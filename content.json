{"meta":{"title":"KnowMyself","subtitle":null,"description":null,"author":"Qiuyihao","url":"http://yoursite.com"},"pages":[{"title":"404","date":"2018-04-30T11:50:23.000Z","updated":"2018-04-30T11:50:23.290Z","comments":true,"path":"404/index.html","permalink":"http://yoursite.com/404/index.html","excerpt":"","text":""},{"title":"search","date":"2018-04-30T11:50:09.000Z","updated":"2018-04-30T11:50:09.063Z","comments":true,"path":"search/index.html","permalink":"http://yoursite.com/search/index.html","excerpt":"","text":""}],"posts":[{"title":"计算机组成原理课堂笔记","slug":"第四章CPU--计组课堂笔记-01","date":"2018-05-03T00:53:04.206Z","updated":"2018-05-03T01:41:11.082Z","comments":true,"path":"2018/05/03/第四章CPU--计组课堂笔记-01/","link":"","permalink":"http://yoursite.com/2018/05/03/第四章CPU--计组课堂笔记-01/","excerpt":"","text":"CPU基础概念CPU功能： 指令控制，操作控制，时间控制，数据加工 CPU控制方式：同步控制，异步控制，联合控制 CPU指令周期：取值时间+执行时间 CPU周期：机器周期，总线周期。 CPU中断逻辑 中断源： 人为设置的中断，程序性事故, 硬件故障，外部事件（比如断电） 中断分类：可屏蔽中断和不可屏蔽中断；内部中断和外部中断；软中断和硬中断。 ​ 中断系统需要解决的7个问题： 中断如何向CPU提出诉求 多个中断同时发生请求，CPU如何优先处理？ 硬件排队 软件轮询 CPU响应中断的条件，时间，方式。 中断服务程序入口地址的查找：硬件向量法和软件查询法 中断响应的条件：中断允许触发器必须为1 中断响应时间：当前指令周期结束。（而不是指令执行结束） （2， 3 为中断响应的充分必要条件） CPU响应中断后如何保护现场 中断响应结束之后如何阻止源程序的执行转入中断服务程序的入口地址 中断处理结束后，CPU如何恢复现场 中断处理结束过程中出现了新的中断请求,CPU该如何处理 处理办法 ：中断处理系统中配置响应的软件和硬件 中断屏蔽技术 实现多重中断的条件： 提前设置开中断指令 优先级高的中断源有权屏蔽优先级别低的中断源 中断屏蔽的结果 屏蔽触发器与屏蔽字 改变中断优先登记以及运行轨迹的变化 多重中断的断点保护 中断响应轨迹图 设置中断屏蔽字改变中断响应优先级","categories":[],"tags":[{"name":"计组理论 CPU","slug":"计组理论-CPU","permalink":"http://yoursite.com/tags/计组理论-CPU/"}]},{"title":"关系数据库设计理论简介","slug":"关系数据库设计理论","date":"2018-05-02T09:28:16.232Z","updated":"2018-05-03T01:00:16.508Z","comments":true,"path":"2018/05/02/关系数据库设计理论/","link":"","permalink":"http://yoursite.com/2018/05/02/关系数据库设计理论/","excerpt":"","text":"函数依赖 X→Y，表示Y依赖于X； X→Y，且Y→X不成立，Y→Z，则X→Z，表示Z传递依赖于X。 函数依赖性质 自反性 传递性 。。。。 函数依赖的种类（完全函数依赖：在关系模式R（u）中，X,Y是U的子集，Y函数依赖于X 并且 Y非函数依赖于X的子集，则称Y完全函数依赖于X。X f &gt;Y）—&gt; Y依赖于X,但不依赖X的子集。 （部分函数依赖：在关系模式R（u）中，X,Y是U的子集，Y函数依赖于X 并且 Y函数依赖于X的子集） （函数依赖：某个属性集决定另一个属性集时，例如学生学号属性集Sno决定学生姓名属性集Sname，称Sname函数依赖于Sname ） （平凡函数依赖：Y函数依赖于X,并且Y包含于X，例如（Sno）-&gt;(Sno)、（Sno、Sname）-&gt;（Sno）） （非平凡函数依赖：Y函数依赖于X,并且Y不包含于X,例如(Sno,Sname）-&gt;（Ssex）） 键候选键： 能够唯一表示一个元组，且不含多属性超键： 是指能够唯一表示一个元组的属性集主属性：表示候选键中的属性非主属性：不包含在主键中的属性 判断主键的方法 ：若属性集为{ A , B, C}，A+ = ABC。 则A为主键。（属性闭包判断法） 范式 Normal Forms（1）第一范式1NF：关系中的所以属性值都是不可分割的原子值；（2）第二范式2NF：如果关系是1NF，且每个非主属性都完全依赖于候选键；（3）第三范式3NF：如果关系是1NF，且每个非主属性都不传递依赖于候选键；（4）鲍依斯-科得(巴斯)范式BCNF范式：如果关系是1NF，且每个属性都不传递依赖于候选键。 属性闭包定义：闭包就是由一个属性直接或间接推导出的所有属性的集合。 表示：B的闭包用B+表示。 计算：关系R的属性集X的闭包的步骤如下： 设最终将成为闭包的属性集是Y，把Y初始化为X； . 检查F中的每一个函数依赖A→B，如果属性集A中所有属性均在Y中，而B中有的属性不在Y中，则将 其加入到Y中； 重复第二步，直到没有属性可以添加到属性集Y中为止。 最后得到的Y就是X＋ 举例： 例1： R = {A,B,C,D,E} ​ F = {B→CD， D→E, B→A, E→C， AD→B } ​ 则 B+ = B ; B+ = BCD; B+ = BCDA； B+ = BCDAE。（推导过程是属性依赖传递的过程。 ​ 所以最终B+ 包含了R中所有属性。 故B is a key for R。 例2： 有关系模式R(U，F)，其中U={A，B，C，D，E，I}，F={A→D，AB→E，BI→E，CD→I，E→C}，计算(AE)闭包。 (1) 令X={AE}，X(0)=AE (2)在F中寻找尚未使用过的左边是AE的子集的函数依赖，结果是: A→D， E→C；所以 X(1)=X(0)DC=ACDE， 显然 X(1)≠X(0). (3) 在F中寻找尚未使用过的左边是ACDE的子集的函数依赖， 结果是: CD→I；所以 X(2)=X(1)I=ACDEI。虽然X（2）≠X(1)，但F中寻找尚未使用过函数依赖的左边已经没有X（2）的子集，所以不必再计算下去，即(AE)+=ACDEI。 例3：f={a-&gt;b，b-&gt;c，a-&gt;d，e-&gt;f}；由a可直接得到b和d，间接得到c，则a的闭包就是{a，b，c，d} 关系模式分解无损连接分解R的无损分解为X Y，那么 x∩y →x 或者 x∩y → y. 补充知识点自然连接在连接运算当中，一种最常用的连接是自然连接。如果关系R与S具有相同的属性组B，且该属性组的值相等时的连接称为自然连接，结果关系的属性集合为R的属性并上S减去属性B的属性集合。 参考的文章 函数依赖集闭包、属性集闭包、超键、候选键和最小函数依赖集 四种范式的实例 函数依赖不懂看这里","categories":[],"tags":[{"name":"数据库理论","slug":"数据库理论","permalink":"http://yoursite.com/tags/数据库理论/"}]},{"title":"ant,junit,vim,java","slug":"Leanring_report-ant-junit-vim-java","date":"2018-05-01T08:35:48.000Z","updated":"2018-05-03T00:55:37.923Z","comments":true,"path":"2018/05/01/Leanring_report-ant-junit-vim-java/","link":"","permalink":"http://yoursite.com/2018/05/01/Leanring_report-ant-junit-vim-java/","excerpt":"","text":"编辑器之神–VimVim简介Vim是一款上古编辑器，被广大程序员成为编辑器之神，这与之强大的编辑功能和编辑效率是分不开的。和Emace一样都在代码行业享有盛誉。vim最为重要的一点就是一切操作几乎可以舍弃鼠标，熟悉了vim命令的话，光靠键盘指令可以使开发效率迅速提高。 Vim的安装Linux下在Ubuntu平台下控制台敲入下列指令即可自动安装。 sudo apt-get install vim Windows下去官网 直接下载使用。 Vim常用指令和教程首先值得注意的一点就是其实vim是自带教程的Vimtutor,s使用方法是linux下输入命令vimtutor,即可开启教程，这属于官方教程， 最为详细，没有之一。 在这里介绍一些常用的vim命令，有利于快速上手vim。 1. 创建或打开文件 vim filename vim helloworld.java 2.添加内容一开始进入处于正常模式在编辑窗口直接输入i,a,o等字符可以进入输入模式，可以在屏幕下方看到insert单词。按左上角Esc键可以回到正常模式，使用各种方便的指令。以下指令均在正常模式下进行。 3.删除内容dd可以删除光标所在的一整行。 ndd可以删除光标以下的n行 4. 复制内容yy可以复制光标所在行的字符nyy可以复制光标以下的n行字符 5.粘贴内容p/P作用时粘贴字符，小写p将已复制的字符粘贴到光标以下，大写P将字符粘贴到光标以上。 6. 撤销内容撤销指令使用u,类似于windows上的ctrl z`。 7. 保存文件先进入正常模式Esc，然后输入:。然后输入： q 离开vim w 保存内容 wq 保存内容并离开vim,回到命令行 其他还有许多可以提高效率的指令在这里就不多赘述啦。 ​ Java知识入门###初探java 从hello world入门, 初步体会java这一门面向对象编程语言。在HelloWorld.java文件中键入以下代码。（注意文件名称必须和类名一致） 12345public class HelloWorld &#123; public static void main(String[] args) &#123; System.out.println(\"Hello World\"); &#125;&#125; 其中用到的编译指令是 javac HelloWorld.java 命令行没有弹出其他消息，即为编译成功。 执行指令是 java HelloWorld 这里用到两个重要指令javac java ，分别是编译和执行指令。 ###基础知识 由于已经学习过C++，java语言在一定程度上和C++是类似的，所以在Java入门学习上可以直接跳过基础语法，对象和类，基本数据类型，运算符，循环结构，分支结构。 Java面向对象java继承java继承的概念和C++类似，同样是定义一个父类，然后定义一个子类，来继承父类的属性，和C++不同的是，java用关键字extends 来表示继承关系。继承格式是 1234567class 父类 &#123;&#125; class 子类 extends 父类 &#123;&#125; ####继承的特性 子类拥有父类非private的属性，方法。 子类可以拥有自己的属性和方法，即子类可以对父类进行扩展。 子类可以用自己的方式实现父类的方法。 Java的继承是单继承，但是可以多重继承，单继承就是一个子类只能继承一个父类，多重继承就是，例如A类继承B类，B类继承C类，所以按照关系就是C类是B类的父类，B类是A类的父类，这是java继承区别于C++继承的一个特性。 提高了类之间的耦合性（继承的缺点，耦合度高就会造成代码之间的联系）。 ​ ####继承的关键字 关键字 作用 extends 单一继承 implements 继承多个父类 super 实现对父类父类成员的访问，引用父类 this 指向自己的引用 final 将自身定义为不可继承的类 java重写和重载重写#####重写含义 重写是子类对父类的允许访问的方法的实现过程进行重新编写, 返回值和形参都不能改变。即外壳不变，核心重写！重写的好处在于子类可以根据需要，定义特定于自己的行为。 也就是说子类能够根据需要实现父类的方法。。 重写方法的原则 参数列表必须完全与被重写方法的相同； 返回类型必须完全与被重写方法的返回类型相同； 访问权限不能比父类中被重写的方法的访问权限更低。例如：如果父类的一个方法被声明为public，那么在子类中重写该方法就不能声明为protected。 父类的成员方法只能被它的子类重写。 声明为final的方法不能被重写。 声明为static的方法不能被重写，但是能够被再次声明。 子类和父类在同一个包中，那么子类可以重写父类所有方法，除了声明为private和final的方法。 子类和父类不在同一个包中，那么子类只能够重写父类的声明为public和protected的非final方法。 代码实例1234567891011121314151617181920class Animal&#123; public void move()&#123; System.out.println(\"动物可以移动\"); &#125;&#125; class Dog extends Animal&#123; public void move()&#123; super.move(); // 应用super类的方法 System.out.println(\"狗可以跑和走\"); &#125;&#125; public class TestDog&#123; public static void main(String args[])&#123; Animal b = new Dog(); // Dog 对象 b.move(); //执行 Dog类的方法 &#125;&#125; 运行的结果是 狗可以跑和走 可以看到在Dog类中重写了move()方法，传入的参数和返回类型和原来父类的方法一致，但内部代码可以修改。 ####重载 #####重载含义 重载(overloading) 是在一个类里面，方法名字相同，而参数不同。返回类型可以相同也可以不同。 每个重载的方法（或者构造函数）都必须有一个独一无二的参数类型列表。 重载的规则 被重载的方法必须改变参数列表(参数个数或类型或顺序不一样)； 被重载的方法可以改变返回类型； 被重载的方法可以改变访问修饰符； 被重载的方法可以声明新的或更广的检查异常； 方法能够在同一个类中或者在一个子类中被重载。 无法以返回值类型作为重载函数的区分标准。 代码实例1234567891011121314151617181920212223242526272829public class Overloading &#123; public int test()&#123; System.out.println(\"test1\"); return 1; &#125; public void test(int a)&#123; System.out.println(\"test2\"); &#125; //以下两个参数类型顺序不同 public String test(int a,String s)&#123; System.out.println(\"test3\"); return \"returntest3\"; &#125; public String test(String s,int a)&#123; System.out.println(\"test4\"); return \"returntest4\"; &#125; public static void main(String[] args)&#123; Overloading o = new Overloading(); System.out.println(o.test()); o.test(1); System.out.println(o.test(1,\"test3\")); System.out.println(o.test(\"test4\",1)); &#125;&#125; 运行结果是 test1 test2 test3 test4 从运行结果看，调用的传参不同的函数顺序执行。 多态多态就是对象多种表现形式的体现。 #####多态存在的三个必要条件 继承 重写 父类引用指向子类对象 这里提供一份代码以便理解。大意就是一个抽象父类声明但不定义一个方法，在其他子类中可以重写这个方法。 123456789101112131415161718192021abstract class Animal &#123; abstract void eat(); &#125; class Cat extends Animal &#123; public void eat() &#123; System.out.println(\"吃鱼\"); &#125; public void work() &#123; System.out.println(\"抓老鼠\"); &#125; &#125; class Dog extends Animal &#123; public void eat() &#123; System.out.println(\"吃骨头\"); &#125; public void work() &#123; System.out.println(\"看家\"); &#125; &#125; ###java组件部分设计 Swing在本次实训实验中利用了Swing这个java的GUI工具包，以实现一个简单的计算器。其中的主要用途是引用这些包的相关控件，控件的相关接口，同时给这些控件注册事件，建立事件处理逻辑。 介绍控件，首先应提到JComponet 。 JComponent Swing 的整个可视组件库的基础构造块是 JComponent。它是所有组件的父类。它是一个抽象类，所以不能创建 JComponent，但是作为类层次结构的结果，从字面意义来说它包含了数百个函数，Swing 中的每个组件都可以使用这些函数。 注意： 每一个控件都是一个类，具有许多接口函数，在eclipes这个IDE上可以轻松获取。使用方法：鼠标移动到某一个控件类名，按ctrl键点击类名，即可弹出这个控件类里头详细的函数定义。 常用的控件集合 控件 用途 JLabel 用作文本描述 JButton 按钮 JFrame 窗口 JPanel 控件容器 JTextField 文本输入框 JCheckBox 确认框 GridLayout 生成网格状的布局 Tips: 任何一个控件都有Add()的方法，意味着每一个控件都可以添加到另外一个控件里。 注册事件的方法以下以button为例，进行两种常用方式的注册。 方法1 匿名内部类实现123456button.addActionListener( new ActionListener()&#123; public void actionPerformed(ActionEvent e) &#123; System.out.println(\"你按了按钮一\"); &#125; &#125;); //调用监听函数并定义监听事件 方法2 利用一般内部类实现1234567button.addActionListener(new Button2ActionListener()); private class Button1ActionListener implements ActionListener&#123; public void actionPerformed(ActionEvent e) &#123; System.out.println(\"你按了按钮一\"); &#125; &#125; //将事件处理为一个类事件 用了以上的基础知识就可以解决一个简单计算器的实现啦。 Junit 学习和使用###Junit是什么 JUnit是用于编写和运行可重复的自动化测试的开源测试框架， 这样可以保证我们的代码按预期工作。JUnit可广泛用于工业和作为支架(从命令行)或IDE(如Eclipse)内单独的Java程序。 JUnit提供： 断言测试预期结果。 测试功能共享通用的测试数据。 测试套件轻松地组织和运行测试。 图形和文本测试运行。 JUnit用于测试： 整个对象 对象的一部分 - 交互的方法或一些方法 几个对象之间的互动(交互) ​ ###JUnit的特点 JUnit是用于编写和运行测试的开源框架。 提供了注释，以确定测试方法。 提供断言测试预期结果。 提供了测试运行的运行测试。 JUnit测试让您可以更快地编写代码，提高质量 JUnit是优雅简洁。它是不那么复杂以及不需要花费太多的时间。 JUnit测试可以自动运行，检查自己的结果，并提供即时反馈。没有必要通过测试结果报告来手动梳理。 JUnit测试可以组织成测试套件包含测试案例，甚至其他测试套件。 Junit显示测试进度的，如果测试是没有问题条形是绿色的，测试失败则会变成红色。 注解 描述 @Testpublic void method() 测试注释指示该公共无效方法它所附着可以作为一个测试用例。 @Beforepublic void method() Before注释表示，该方法必须在类中的每个测试之前执行，以便执行测试某些必要的先决条件。 @BeforeClasspublic static void method() BeforeClass注释指出这是附着在静态方法必须执行一次并在类的所有测试之前。发生这种情况时一般是测试计算共享配置方法(如连接到数据库)。 @Afterpublic void method() After 注释指示，该方法在执行每项测试后执行(如执行每一个测试后重置某些变量，删除临时变量等) @AfterClasspublic static void method() 当需要执行所有的测试在JUnit测试用例类后执行，AfterClass注解可以使用以清理建立方法，(从数据库如断开连接)。注意：附有此批注(类似于BeforeClass)的方法必须定义为静态。 @Ignorepublic static void method() 当想暂时禁用特定的测试执行可以使用忽略注释。每个被注解为@Ignore的方法将不被执行。","categories":[],"tags":[{"name":"编程软件 vim java","slug":"编程软件-vim-java","permalink":"http://yoursite.com/tags/编程软件-vim-java/"}]},{"title":"Verilog 设计初步","slug":"Verilog设计初步","date":"2018-04-29T16:37:36.125Z","updated":"2018-05-03T00:56:27.052Z","comments":true,"path":"2018/04/30/Verilog设计初步/","link":"","permalink":"http://yoursite.com/2018/04/30/Verilog设计初步/","excerpt":"","text":"Verilog设计初步##Verilog 代码模板 1234567891011121314151617181920212223242526//语句关键字字母都为小写字母，大小写敏感//硬件思维来写代码//命名不能以数字开头module &lt;顶层模块名&gt; (输入输出端口列表) //定义输入输出端口列表 output 输出端口列表； //输出端口生声明 input 输入端口列表； //输入输出端口生命 /*定义数据类型，功能定义，函数实现*/ reg 信号名； //逻辑功能定义 assign&lt;结果信号名&gt; = &lt;表达式&gt;; //用always块描述逻辑功能 always @(&lt;敏感信号&gt;) begin //过程赋值运算 //语句，if else while task end //调用其他模块 &lt;调用模块名module_name&gt;&lt;例化模块名&gt;(&lt;端口列表&gt;)； //门元件例化 门元件关键字&lt;例化门元件名&gt;(&lt;端口列表port_list&gt;);endmodule 四位选择器 123456789module mux4_1(out,in0, in1, in2,in4,sel); output out; input in0,in1,in2,in3; input[1:0] reg out; always @（in0 or in1 or in2 or in3 or sel) begin case(sel) 数据类型及运算符 整数类型 构成是：字符宽度+进制+数值。 例如：2’0xd5; 宽度为2的十六进制d5。 逻辑类型 高低电平 1 0，电路里体现为电压的区间 x：未知 z: 高阻 net类型 常用的是wire。用法是 wire[7:0] databus。 //databus宽度8 寄存器类型 reg integer time real realtime parameter参数 用来定义符号常量。 parameter sel = 8’ha3。 向量类型 逻辑运算符 位运算符 三目运算 位拼接运算符 下例采用数据流方式描述1位全加器。 在本例中，有两个连续赋值语句。这些赋值语句是并发的，与其书写的顺序无关。只要连续赋值语句右端表达式中操作数的值变化(即有事件发生), 连续赋值语句即被执行。如果A变化，则两个连续赋值都被计算，即同时对右端表达式求值，并将结果赋给左端目标。 语句 initial always @（敏感信号） @ (posedge clk) 上升沿 @ (negedge clk) 下降沿触发 赋值语句 连续赋值语句assign 只要连续赋值语句右端表达式中操作数的值变化, 连续赋值语句即被执行。 阻塞赋值 a = b; ————-非时序赋值（组合） 非阻塞赋值 a&lt;=b ————时序赋值中使用 时序和组合在电路上的表现是时序赋值过程中需要等待时钟沿来触发。 函数设计特点层次化模块化顶层模块和底层模块的设计方法，将模块细分为若干个子模块，在底层实现子模块功能，在顶层组合各个子模块。","categories":[],"tags":[{"name":"verilog 计组实验","slug":"verilog-计组实验","permalink":"http://yoursite.com/tags/verilog-计组实验/"}]}]}