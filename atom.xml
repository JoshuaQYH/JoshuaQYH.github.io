<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KnowMyself</title>
  <icon>https://www.gravatar.com/avatar/040d8fc733a154c9e497a47d7ba2f04b</icon>
  <subtitle>Code and life</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://joshuaqyh.github.io/"/>
  <updated>2018-12-20T13:35:39.338Z</updated>
  <id>https://joshuaqyh.github.io/</id>
  
  <author>
    <name>Qiuyihao</name>
    <email>576261090@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>adaboost集成学习</title>
    <link href="https://joshuaqyh.github.io/2018/12/20/adaboost%E9%9B%86%E6%88%90%E5%AD%A6%E4%B9%A0/"/>
    <id>https://joshuaqyh.github.io/2018/12/20/adaboost集成学习/</id>
    <published>2018-12-20T01:18:27.000Z</published>
    <updated>2018-12-20T13:35:39.338Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Adaboost-原理"><a href="#Adaboost-原理" class="headerlink" title="Adaboost 原理"></a>Adaboost 原理</h1><p>Adaboost 全称为 adaptive boost,  意为自适应的提升方法，作用是能够通过分布不同权重的方式将多个弱分类器提升为一个强分类器，不同的弱分类器解决不同的分类问题，多个弱分类器通过加权组合得到一个强分类器。详细公式过程如下:</p><ol><li>给定 N 个样本的<strong>特征向量</strong> $(x_1, …..) \, (x_2…..)  \, …(x_N, ….)$, 每一个样本都有对应的<strong>标签</strong> ${y_1, \, y_2, … y_N}$ 与之相对。</li><li>初始化每个<strong>样本</strong>权重 $D_1(i) = (w_1,…..w_N)$ ，初始权重值都为$1/N$。</li><li>循环迭代 $T $ 次，每一次迭代执行如下步骤:<ol><li>找出分类误差最小的弱分类器 $h_j$ , 计算公式为：$h_j = arg\, min \, \theta  $，其中 $\theta = \sum_1^N D_i * (h_j(x_i…) \neq \,y_i)$ </li><li>计算该弱分类器 $h_j$ 的<strong>分类器权重</strong> $\alpha =0.5 * ln(\frac{1 - \theta}{\theta})$ 。这意味着误分率小于0.5的弱分类器得到更高的分类器权重。</li><li>重新更新所有样本的权重  $D_{t+1}(i) = \frac{D_t(i)exp(-a_ty_ih_t(x_i))}{Z}$，其中$Z$为规范化因子， 公式为所有样本权重的分子部分$D_t(i)exp(-a_ty_ih_t(x_i))$ <strong>之和</strong>。该式子使得误分类的样本权重提升，正确分类的样本权重降低。</li></ol></li><li>迭代结束，输出强分类器 $H(x) = \sum_{t=1}^{T}  a_t h_t(x)$， 形式为$T$ 个分类器的加权组合。</li></ol><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>以下是我个人写的一个Adaboost方法的实现，弱分类器采用sklearn库中的决策树分类器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    Description: 以决策树分类器为弱分类器，使用adaboost进行分类器增强</span></span><br><span class="line"><span class="string">    Author: qiuyihao</span></span><br><span class="line"><span class="string">    Date: 18/11/19</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdaboostWithDT</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    @ self.param:</span></span><br><span class="line"><span class="string">        train_num: 训练的迭代的次数</span></span><br><span class="line"><span class="string">        classifier_num: 分类器的个数，等于迭代的次数</span></span><br><span class="line"><span class="string">        learn_rate:  学习率，在确定最优（误分率最小的）分类器的时候使用</span></span><br><span class="line"><span class="string">        train_data: 保存的训练数据</span></span><br><span class="line"><span class="string">        train_labels: 保存训练标签</span></span><br><span class="line"><span class="string">        train_samples_num: 训练样本的数目</span></span><br><span class="line"><span class="string">        vector_columns: 样本特征向量的维度</span></span><br><span class="line"><span class="string">        classifer_sets: 学习得到的弱分类器集合</span></span><br><span class="line"><span class="string">        sample_weights: 学习得到的样本的权重集合</span></span><br><span class="line"><span class="string">        alpha: 弱分类器的权重集合</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, n_estunatirs = <span class="number">50</span>, learn_rate = <span class="number">1.0</span>)</span>:</span></span><br><span class="line">        self.train_num = n_estunatirs        <span class="comment"># 迭代次数</span></span><br><span class="line">        self.classifier_num = n_estunatirs   <span class="comment"># 学习到的弱分类器的个数</span></span><br><span class="line">        self.learn_rate = learn_rate         <span class="comment"># 学习率</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init_args</span><span class="params">(self, train_data, train_labels)</span>:</span></span><br><span class="line">        self.train_data = train_data</span><br><span class="line">        self.train_labels = train_labels </span><br><span class="line">        self.train_samples_num, self.vector_columns = train_data.shape <span class="comment"># 驯良样本数目, 样本特征向量的维度 </span></span><br><span class="line"></span><br><span class="line">        self.classifier_sets = []  <span class="comment"># 学得的弱分类器的集合</span></span><br><span class="line"></span><br><span class="line">        self.sample_weights = [<span class="number">1.0</span> / self.train_samples_num] * self.train_samples_num <span class="comment"># 训练样本的权重集合</span></span><br><span class="line"></span><br><span class="line">        self.alpha = []  <span class="comment"># 弱分类器的权重集合</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输入误分率，计算在这一轮迭代中的alpha值，即当前习得的分类器的权重值</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cal_alpha</span><span class="params">(self, error)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.5</span> * np.log((<span class="number">1</span> - error) / error)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#计算规范化因子，在更新权重的时候会使用到</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cal_normalize_factor</span><span class="params">(self,weights,alpha,classifiers)</span>:</span>  <span class="comment"># 第i个样本的classifers[i] 表示分类结果</span></span><br><span class="line">        <span class="keyword">return</span> sum([weights[i] * np.exp(<span class="number">-1</span> * alpha * self.train_labels[i] * classifiers[i]) <span class="keyword">for</span> i <span class="keyword">in</span> range(self.train_samples_num)])    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 更新样本的权重值</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cal_weight</span><span class="params">(self, alpha, classifier, normalize_factor)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.train_samples_num):</span><br><span class="line">           self.sample_weights[i] = self.sample_weights[i] * np.exp(<span class="number">-1</span> * alpha * self.train_labels[i] * classifier[i]) / normalize_factor</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 训练弱分类器</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">        输入：训练样本，标签，样本权重</span></span><br><span class="line"><span class="string">        输出：分类器，误分因子， 分类结果</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_classifier</span><span class="params">(self, features, labels, weights)</span>:</span></span><br><span class="line">        samples_num = len(features)  <span class="comment"># 训练样本数目</span></span><br><span class="line">        error = <span class="number">1000000</span>             <span class="comment"># 错误率</span></span><br><span class="line">        resultClassifier = <span class="keyword">None</span>    <span class="comment"># 该轮得到的最佳分类器</span></span><br><span class="line">       </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">            learn_size = self.learn_rate + i </span><br><span class="line">            max_depth = <span class="number">6</span> + learn_size  </span><br><span class="line">            min_samples_leaf = <span class="number">6</span> + learn_size</span><br><span class="line">            min_samples_split = <span class="number">6</span> + learn_size</span><br><span class="line"></span><br><span class="line">            DTClassifier = DecisionTreeClassifier(max_depth=max_depth, </span><br><span class="line">            min_samples_split=min_samples_split, min_samples_leaf=min_samples_leaf) <span class="comment"># 决策树分类器</span></span><br><span class="line">            DTClassifier.fit(features, labels) <span class="comment"># 传入样本数据和标签，训练决策树分类器</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 计算误分类因子 </span></span><br><span class="line">            predicted_value = DTClassifier.predict(features) <span class="comment"># 二维预测结果</span></span><br><span class="line">            error_factor = <span class="number">0</span>  </span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(samples_num):</span><br><span class="line">                <span class="keyword">if</span> predicted_value[j] != labels[j]:</span><br><span class="line">                    error_factor += weights[j]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> error_factor &lt; error:</span><br><span class="line">                error  = error_factor</span><br><span class="line">                resultClassifier = DTClassifier</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> error == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        result = resultClassifier.predict(features)  <span class="comment"># 存储分类结果</span></span><br><span class="line">        <span class="keyword">return</span> resultClassifier, error, result </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">        训练接口:</span></span><br><span class="line"><span class="string">        输入： 训练样本集， 标签集</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span><span class="params">(self, train_data, train_labels)</span>:</span></span><br><span class="line">        self.init_args(train_data, train_labels)</span><br><span class="line">        <span class="keyword">for</span> epoch <span class="keyword">in</span> range(self.train_num):  <span class="comment"># 训练次数</span></span><br><span class="line">            <span class="comment"># 训练得到弱分类器（决策树分类器）</span></span><br><span class="line">            resultClassifier, minError, classifiedResult = self.find_classifier(train_data, train_labels, self.sample_weights)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 计算分类器的权重系数alpha</span></span><br><span class="line">            a = self.cal_alpha(minError)</span><br><span class="line">            self.alpha.append(a)</span><br><span class="line">            </span><br><span class="line">            <span class="comment">#记录分类器</span></span><br><span class="line">            self.classifier_sets.append(resultClassifier)</span><br><span class="line"></span><br><span class="line">            <span class="comment">#更新权重</span></span><br><span class="line">            Z = self.cal_normalize_factor(self.sample_weights, a, classifiedResult)</span><br><span class="line">            self.cal_weight(a, classifiedResult, Z)</span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">        预测接口：</span></span><br><span class="line"><span class="string">        输入：一个样本数据</span></span><br><span class="line"><span class="string">        输出：预测结果</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(self, test_data)</span>:</span></span><br><span class="line">        result = <span class="number">0</span></span><br><span class="line">        voteList = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]  </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.classifier_sets)):</span><br><span class="line">            classifer = self.classifier_sets[i]</span><br><span class="line">            test_value = np.array(test_data).reshape(<span class="number">1</span>, len(test_data)).tolist() <span class="comment"># 二维形式</span></span><br><span class="line">            predicted_value =int(classifer.predict(test_value))</span><br><span class="line">            voteList[predicted_value] += self.alpha[i]  <span class="comment"># 投票的思想 按分类器权值投票</span></span><br><span class="line">        result = voteList.index(max(voteList))</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">        使用测试数据和标签评估</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(self, test_data, test_labels)</span>:</span></span><br><span class="line">        right_num = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(test_data)):</span><br><span class="line">            <span class="keyword">if</span> self.predict(test_data[i]) == test_labels[i]:</span><br><span class="line">                right_num += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> right_num / len(test_data)</span><br></pre></td></tr></table></figure><ol><li>对 mnist 数据集做初步处理，将数据标签合并到一个训练数据文件 (.csv) 和一个测试数据文件 (.csv) 中。</li><li>读取数据文件，得到N 个样本的<strong>特征向量</strong> $(x_1, …..) \, (x_2…..)  \, …(x_N, ….)$, 以及每个样本对应的<strong>标签</strong> ${y_1, \, y_2, … y_N}$ 。</li><li>初始化每个<strong>样本</strong>权重 $D_1(i) = (w_1,…..w_N)$ ，初始权重值都为$1/N$。</li><li>循环迭代 $T $ 次，每一次迭代执行如下步骤 :<ol><li>找出分类误差最小的弱分类器 $h_j$ , 计算公式为：$h_j = arg\, min \, \theta  $，其中 $\theta = \sum_1^N D_i * (h_j(x_i…) \neq \,y_i)$ </li><li>计算该弱分类器 $h_j$ 的<strong>分类器权重</strong> $\alpha =0.5 * ln(\frac{1 - \theta}{\theta})$ 。这意味着误分率小于0.5的弱分类器得到更高的分类器权重。</li><li>重新更新所有样本的权重  $D_{t+1}(i) = \frac{D_t(i)exp(-a_ty_ih_t(x_i))}{Z}$，其中$Z$为规范化因子， 公式为所有样本权重的分子部分$D_t(i)exp(-a_ty_ih_t(x_i))$ <strong>之和</strong>。该式子使得误分类的样本权重提升，正确分类的样本权重降低。</li></ol></li><li>迭代结束，输出强分类器 $H(x) = \sum_{t=1}^{T}  a_t h_t(x)$， 形式为$T$ 个分类器的加权组合。</li><li>输入测试数据做预测，得到准确率。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Adaboost-原理&quot;&gt;&lt;a href=&quot;#Adaboost-原理&quot; class=&quot;headerlink&quot; title=&quot;Adaboost 原理&quot;&gt;&lt;/a&gt;Adaboost 原理&lt;/h1&gt;&lt;p&gt;Adaboost 全称为 adaptive boost,  意为自适
      
    
    </summary>
    
    
      <category term="人工智能" scheme="https://joshuaqyh.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
      <category term="机器学习" scheme="https://joshuaqyh.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="计算机视觉" scheme="https://joshuaqyh.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
  </entry>
  
  <entry>
    <title>人工神经网络学习</title>
    <link href="https://joshuaqyh.github.io/2018/12/17/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/"/>
    <id>https://joshuaqyh.github.io/2018/12/17/人工神经网络学习/</id>
    <published>2018-12-17T12:06:03.000Z</published>
    <updated>2018-12-17T13:36:19.584Z</updated>
    
    <content type="html"><![CDATA[<h2 id="神经元结构"><a href="#神经元结构" class="headerlink" title="神经元结构"></a>神经元结构</h2><p>神经元结构就是一个函数发生器：输入+函数运算+输出。</p><ul><li>输入是多个输入点$a$ 的加权(w)求和。 </li></ul><p><img src="https://raw.githubusercontent.com/JoshuaQYH/blogImage/master/20181217200818.png" alt=""></p><ul><li><p>函数运算：激活函数。常用sigmoid函数。</p><p><img src="https://raw.githubusercontent.com/JoshuaQYH/blogImage/master/20181217200939.png" alt=""></p></li><li><p>输出：一个输出值，可能作为其他神经元的输入点之一。</p></li></ul><h2 id="前馈网络"><a href="#前馈网络" class="headerlink" title="前馈网络"></a>前馈网络</h2><h3 id="单层前馈神经网络（感知器）"><a href="#单层前馈神经网络（感知器）" class="headerlink" title="单层前馈神经网络（感知器）"></a>单层前馈神经网络（感知器）</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/JoshuaQYH/blogImage/master/20181217201840.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>​                                                            输入直接连接到输出。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;神经元结构&quot;&gt;&lt;a href=&quot;#神经元结构&quot; class=&quot;headerlink&quot; title=&quot;神经元结构&quot;&gt;&lt;/a&gt;神经元结构&lt;/h2&gt;&lt;p&gt;神经元结构就是一个函数发生器：输入+函数运算+输出。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入是多个输入点$a$ 的加权(w)
      
    
    </summary>
    
    
      <category term="人工智能" scheme="https://joshuaqyh.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
      <category term="神经网络" scheme="https://joshuaqyh.github.io/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>基于以太坊的DApp学习开发之路</title>
    <link href="https://joshuaqyh.github.io/2018/12/11/DApp%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    <id>https://joshuaqyh.github.io/2018/12/11/DApp学习之路/</id>
    <published>2018-12-11T13:47:18.000Z</published>
    <updated>2018-12-24T08:49:19.693Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备的知识"><a href="#准备的知识" class="headerlink" title="准备的知识"></a>准备的知识</h2><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><p>React.js + Redux 用于前端组件设计和状态管理。拟学习MD组件库。</p><p>web3.js 与区块链数据交互通信 webpack</p><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>web3.js 与区块链交互 +  express 响应请求/路由功能+mongodb基本增删该查。</p><h2 id="区块链"><a href="#区块链" class="headerlink" title="区块链"></a>区块链</h2><p>智能合约+测试部署+调用</p><p>solc + ganache + influa + truffle + metamask</p><p>！ IPFS</p><h2 id="学习链接"><a href="#学习链接" class="headerlink" title="学习链接"></a>学习链接</h2><p><a href="https://medium.com/ethereum-developers/the-ultimate-end-to-end-tutorial-to-create-and-deploy-a-fully-descentralized-dapp-in-ethereum-18f0cf6d7e0e" target="_blank" rel="noopener">https://medium.com/ethereum-developers/the-ultimate-end-to-end-tutorial-to-create-and-deploy-a-fully-descentralized-dapp-in-ethereum-18f0cf6d7e0e</a> </p><h2 id="学习记录"><a href="#学习记录" class="headerlink" title="学习记录"></a>学习记录</h2><p>通过一个简单应用体会全栈Dapp过程。涉及框架 truffle ，IPFS，webpack，react，babel，web3</p><h2 id="开发核心步骤"><a href="#开发核心步骤" class="headerlink" title="开发核心步骤"></a>开发核心步骤</h2><p>步骤</p><ol><li>Setup the project</li><li>Program the Solidity contracts</li><li>Create the frontend application</li><li>Deploy the application online with IPFS</li><li>Use a custom domain for the application</li><li>Play with the final Dapp!</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;准备的知识&quot;&gt;&lt;a href=&quot;#准备的知识&quot; class=&quot;headerlink&quot; title=&quot;准备的知识&quot;&gt;&lt;/a&gt;准备的知识&lt;/h2&gt;&lt;h3 id=&quot;前端&quot;&gt;&lt;a href=&quot;#前端&quot; class=&quot;headerlink&quot; title=&quot;前端&quot;&gt;&lt;/a&gt;前
      
    
    </summary>
    
    
      <category term="Ethereum" scheme="https://joshuaqyh.github.io/tags/Ethereum/"/>
    
      <category term="Smart-contract" scheme="https://joshuaqyh.github.io/tags/Smart-contract/"/>
    
      <category term="Full-stack" scheme="https://joshuaqyh.github.io/tags/Full-stack/"/>
    
  </entry>
  
  <entry>
    <title>语法制导翻译法</title>
    <link href="https://joshuaqyh.github.io/2018/12/11/%E8%AF%AD%E6%B3%95%E5%88%B6%E5%AF%BC%E7%BF%BB%E8%AF%91%E6%B3%95/"/>
    <id>https://joshuaqyh.github.io/2018/12/11/语法制导翻译法/</id>
    <published>2018-12-11T02:04:36.000Z</published>
    <updated>2018-12-11T03:38:29.687Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SDTS基本概念"><a href="#SDTS基本概念" class="headerlink" title="SDTS基本概念"></a>SDTS基本概念</h1><p>$语法制导翻译法SDTS = 一个源语言 + 一个目标语言 + 一组翻译规则$</p><p>SDTS的翻译规则是文法中的产生式再加上语义动作。</p><p>SDTS其形式定义T如下：</p><p>$$T = (V_T, V_N, \delta, R, S)$$</p><ul><li>$V_T$ 是一个有穷的输入字母表，包含源语言中的符号。</li><li>$V_N$ 是一个有穷的非终结符号集合。</li><li>$\delta$ 是一个有穷的输出字母表，包含出现翻译串或输出串中的那些符号。</li><li>$R$是形如$A\rightarrow w,y$的规则的有穷集合。</li><li>$S ∈ V_N$是一个开始符号。</li></ul><hr><blockquote><p>解释R中$A\rightarrow w, y$ 。</p></blockquote><p>w 是终结符和（或）非终结符组成的串； y是由$V_N$和（或）$\delta$中符号组成的串。</p><p>w 为规则的源成分；y为规则的翻译成分，出现在w，y中的非终结符必须是一一对应的。</p><hr><blockquote><p>T的基础源文法</p></blockquote><p> SDTS的基础源文法是一个CFG(上下文无关文法context-free-grammar）：$(V_N, V_T, P,S)$ </p><p>$P $是形如$A\rightarrow w（w$ 为源程序成分 )的产生式的集合。</p><p>从T中<strong>去掉输出字母表$\delta$ ，再从T的规则中移走翻译成分y,就可以得到T的基础源文法。</strong></p><hr><blockquote><p>T 的基础目标文法</p></blockquote><p>类似地，从T中去掉字母表$V_T$ 并从T的规则中移去源成分。</p><p>CFG：$(V_N, P, \delta, S)$。</p><p>P是形如$A \rightarrow y$(y为目标成分)产生式的集合。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/JoshuaQYH/blogImage/master/20181211113425.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/JoshuaQYH/blogImage/master/20181211113456.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SDTS基本概念&quot;&gt;&lt;a href=&quot;#SDTS基本概念&quot; class=&quot;headerlink&quot; title=&quot;SDTS基本概念&quot;&gt;&lt;/a&gt;SDTS基本概念&lt;/h1&gt;&lt;p&gt;$语法制导翻译法SDTS = 一个源语言 + 一个目标语言 + 一组翻译规则$&lt;/p&gt;
&lt;p
      
    
    </summary>
    
    
      <category term="编译原理" scheme="https://joshuaqyh.github.io/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>样例学习</title>
    <link href="https://joshuaqyh.github.io/2018/12/10/%E6%A0%B7%E4%BE%8B%E5%AD%A6%E4%B9%A0/"/>
    <id>https://joshuaqyh.github.io/2018/12/10/样例学习/</id>
    <published>2018-12-10T11:07:10.000Z</published>
    <updated>2018-12-10T12:40:50.067Z</updated>
    
    <content type="html"><![CDATA[<h1 id="主要的学习类型"><a href="#主要的学习类型" class="headerlink" title="主要的学习类型"></a>主要的学习类型</h1><ul><li>半监督学习：给定少数样本打标签，并充分利用大量未标注的样例。</li><li>监督学习：对每一个样本进行标注，相当于给出答案，让模型自适应。</li><li>无监督学习：通常的任务是聚类，无需给定样本的标签即可完成分类任务。</li><li>强化学习：Agent在强化序列（奖罚组合的序列）中学习，在Agent完成动作的时候，根据动作的正确与否采取奖罚。</li><li>迁移学习：场景的迁移发生学习的自适应。</li><li>对抗性学习：生成器和分类器之间对抗。生成器产出样本，分类器对样本分类，根据分类结果的偏差调整生成器参数，直到分类器产生近乎无偏差的结果。（图像生成）</li></ul><blockquote><p> 模型求简，然后求精。</p></blockquote><h2 id="监督学习"><a href="#监督学习" class="headerlink" title="监督学习"></a>监督学习</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>监督学习的任务是：给定由N个”输入-输出“对样例组成的训练集</p><p>$$(x_1, y_1), (x_2, y_2), (x_3, y_3), … , (x_N, y_N)$$</p><p>其中每个$y_j$由未知函数$y = f(x)$生成。而我们就是要通过模型假设来寻找一个函数$h$来逼近真实的函数$f$。上述任务描述中的$x, y$不限于数值，可以是任何形式的值。而$h$是一个假说，学习是一个搜索过程，它在可能假设空间中寻找一个不仅在训练集上，而且在新样例上具有高精度的假说。</p><h3 id="学习过程"><a href="#学习过程" class="headerlink" title="学习过程"></a>学习过程</h3><p>通常来说一个学习系统是由一个给定选好的模型，训练集和测试集组成，我们使用训练集来训练模型，训练过程不断调整优化模型的参数，然后使用测试集来验证模型的<strong>泛化</strong>能力，如果泛化能力强，那么意味着模型能正确预测训练集以外的数据，能从小范围的训练样本中习得大范围的样本分类技能。</p><h3 id="分类回归"><a href="#分类回归" class="headerlink" title="分类回归"></a>分类回归</h3><p>当模型给出的结果$y$是有限集合的时候，我们可以把这一类学习问题称之为<strong>分类</strong>。通常分类问题有：布尔分类，二值分类等等。而$y$是数值型的问题时，我们把学习问题称为<strong>回归</strong>。</p><h3 id="拟合问题"><a href="#拟合问题" class="headerlink" title="拟合问题"></a>拟合问题</h3><p>训练过程其实也是一种数据拟合的过程。拟合过程会出现多个拟合的结果，这些结果确切地拟合了数据，结果表现一致，我们称之为一致假说。在多个一致假说中的选择问题上，我们有一个重要的原理：奥坎姆剃刀——即选择与<strong>数据一致的最简单假说</strong>。</p><p>过拟合是机器学习中常见的一个问题，意为“学习过度”，模型输出的样本空间与实际空间出现了较大的偏差。</p><p>##决策树</p><ul><li><p>决策树表示一个函数，以属性值向量作为输入，返回一个”决策“——简单输出值。</p><p>主要的问题在于如何进行特征选择，安排决策树属性值判断顺序。</p></li><li><p>特征选择是从样本数据中提取影响决策的属性值；</p><p>而属性值的顺序则是权衡特征之间的重要性。</p></li><li><p>特征提取的步骤：建立<strong>评价函数</strong>确定该属性是否与决策有一定程度的相关性。</p></li><li><p>特征属性的顺序安排：属性值越重要，分类能力越强，在决策树中越高。</p></li><li><p>决策树叶结点的确定：当样本的输出值一致，样本之间无区别为止。</p></li></ul><p>连续问题的离散化：</p><ol><li>区间划分</li><li>递归二分类</li></ol><h3 id="分而治之策略"><a href="#分而治之策略" class="headerlink" title="分而治之策略"></a>分而治之策略</h3><p>总是优先测试最重要属性。测试样本然后分堆，在分堆结果后再分堆，直到系统熵最大。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/JoshuaQYH/blogImage/master/20181210203105.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="选择测试属性"><a href="#选择测试属性" class="headerlink" title="选择测试属性"></a>选择测试属性</h3><p>利用熵来度量。设随机变量$V$具有值$v_k$，$v_k$具有概率$P(v_k)$</p><p>$$H(V) = \sum_{k} log_2 {1/P(v_k)} = - \sum_kP(v_k)log_2P(v_k)$$</p><p>熵的计算公式如上。</p><p>在某些场合下，使用熵来度量具有缺陷。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;主要的学习类型&quot;&gt;&lt;a href=&quot;#主要的学习类型&quot; class=&quot;headerlink&quot; title=&quot;主要的学习类型&quot;&gt;&lt;/a&gt;主要的学习类型&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;半监督学习：给定少数样本打标签，并充分利用大量未标注的样例。&lt;/li&gt;
&lt;li&gt;监督学习
      
    
    </summary>
    
    
      <category term="人工智能" scheme="https://joshuaqyh.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
      <category term="监督学习" scheme="https://joshuaqyh.github.io/tags/%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>我的React学习路线</title>
    <link href="https://joshuaqyh.github.io/2018/12/07/%E6%88%91%E7%9A%84React%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
    <id>https://joshuaqyh.github.io/2018/12/07/我的React学习路线/</id>
    <published>2018-12-07T08:30:51.000Z</published>
    <updated>2018-12-11T01:57:48.421Z</updated>
    
    <content type="html"><![CDATA[<base href="gallery-by-react"><h1 id="官方文档入门"><a href="#官方文档入门" class="headerlink" title="官方文档入门"></a>官方文档入门</h1><p><a href="https://reactjs.org/tutorial/tutorial.html" target="_blank" rel="noopener">初步体会一个react的小应用</a></p><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用组件定义标签</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShoppingList</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"shopping-list"</span>&gt;</span><br><span class="line">        &lt;h1&gt;Shopping List <span class="keyword">for</span> &#123;<span class="keyword">this</span>.props.name&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">          &lt;li&gt;Instagram&lt;/</span>li&gt;</span><br><span class="line">          &lt;li&gt;WhatsApp&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">          &lt;li&gt;Oculus&lt;/</span>li&gt;</span><br><span class="line">        &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Example usage: &lt;ShoppingList name="Mark" /&gt;</span></span><br></pre></td></tr></table></figure><hr><p>JSX语法：js内嵌html。</p><hr><p>组件之间传值：通过props</p><hr><p>基本流程：就是继承react组件基类，自定义组件及其行为。实例化之后填入html某一个标签中。</p><hr><p>组件内部结构：</p><ol><li>构造函数（如果要维护内部的state需要有，否则可删除）</li><li>内部自定义函数</li><li>render函数</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Game</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">   <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">       <span class="keyword">super</span>(props);</span><br><span class="line">       <span class="keyword">this</span>.state = &#123;</span><br><span class="line">         history: [&#123;</span><br><span class="line">           squares: <span class="built_in">Array</span>(<span class="number">9</span>).fill(<span class="literal">null</span>),</span><br><span class="line">         &#125;],</span><br><span class="line">         xIsNext: <span class="literal">true</span>,</span><br><span class="line">       &#125;;</span><br><span class="line">     &#125;  </span><br><span class="line">   render() &#123;</span><br><span class="line">       <span class="keyword">const</span> history = <span class="keyword">this</span>.state.history;</span><br><span class="line">       <span class="keyword">const</span> current = history[history.length - <span class="number">1</span>];</span><br><span class="line">       <span class="keyword">const</span> winner  = calculateWinner(current.squares);</span><br><span class="line">       <span class="keyword">let</span> status;</span><br><span class="line">       <span class="keyword">if</span> (winner) &#123;</span><br><span class="line">           status = <span class="string">'Winner: '</span> + winner;</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           status = <span class="string">'Next player: '</span> + (<span class="keyword">this</span>.state.xIsNext ? <span class="string">'X'</span> : <span class="string">'O'</span>);</span><br><span class="line">         &#125;</span><br><span class="line">     <span class="keyword">return</span> (</span><br><span class="line">       &lt;div className=<span class="string">"game"</span>&gt;</span><br><span class="line">         &lt;div className=<span class="string">"game-board"</span>&gt;</span><br><span class="line">           &lt;Board squares=&#123;current.squares&#125;</span><br><span class="line">           onClick=&#123;(i) =&gt; <span class="keyword">this</span>.handleClick(i)&#125;/&gt;</span><br><span class="line">         &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">         &lt;div className="game-info"&gt;</span></span><br><span class="line"><span class="regexp">           &lt;div&gt;&#123;status&#125;&lt;/</span>div&gt;</span><br><span class="line">           &lt;ol&gt;&#123;<span class="comment">/* TODO */</span>&#125;&lt;<span class="regexp">/ol&gt;</span></span><br><span class="line"><span class="regexp">         &lt;/</span>div&gt;</span><br><span class="line">       &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">     );</span></span><br><span class="line"><span class="regexp">   &#125;</span></span><br><span class="line"><span class="regexp"> &#125;</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp"> /</span><span class="regexp">/ ========================================</span></span><br><span class="line"><span class="regexp"> /</span><span class="regexp">/ 调用函数进行渲染</span></span><br><span class="line"><span class="regexp"> ReactDOM.render(</span></span><br><span class="line"><span class="regexp">   &lt;Game /</span>&gt;,</span><br><span class="line">   <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line"> );</span><br><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></figure><hr><p>组件结构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">example</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Componet</span></span>&#123;</span><br><span class="line">    construct(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;   <span class="comment">// state 存储本组件的变量成员</span></span><br><span class="line">            变量： 值，  <span class="comment">// props 上层组件调用的传入的变量</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 其他处理的函数</span></span><br><span class="line">    func()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 最后的渲染函数，返回html元素</span></span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="comment">// 一些变量处理逻辑</span></span><br><span class="line">        <span class="keyword">return</span>(<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">div</span>/&gt;</span>);</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"> ReactDOM.render(</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">example</span> /&gt;</span>,  // 此处将组件作为标签渲染</span></span><br><span class="line"><span class="xml">    document.getElementById('root') // 查找root 标签，将组件填入</span></span><br><span class="line"><span class="xml">  );</span></span><br></pre></td></tr></table></figure><h1 id="慕课网视频"><a href="#慕课网视频" class="headerlink" title="慕课网视频"></a>慕课网视频</h1><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/JoshuaQYH/blogImage/master/20181207195500.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/JoshuaQYH/blogImage/master/20181207195542.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>上述是一些hook函数，可以以下面的方式调用</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/JoshuaQYH/blogImage/master/20181207200247.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="绑定事件"><a href="#绑定事件" class="headerlink" title="绑定事件"></a>绑定事件</h3><p>定义事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = React.createClass(&#123;</span><br><span class="line">change: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> tipE = React.findDOMNode(<span class="string">"tip"</span>);</span><br><span class="line">        <span class="keyword">if</span>(tip.display == <span class="string">'none'</span>)</span><br><span class="line">            tip.display = <span class="string">'inline'</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            tip.display = <span class="string">'none'</span>;</span><br><span class="line">    event.stopPropagation();</span><br><span class="line">        evnet.preventDefault();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">    &lt;button onClick = &#123;<span class="keyword">this</span>.change&#125;&gt; click &lt;button/&gt;<span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">ref</span> = <span class="string">"tip"</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    );    </span></span><br><span class="line"><span class="xml">&#125;    </span></span><br><span class="line"><span class="xml">&#125;);</span></span><br></pre></td></tr></table></figure><h1 id="React-项目"><a href="#React-项目" class="headerlink" title="React 项目"></a>React 项目</h1><ul><li>yomen使用学习</li><li>体会网页版的todoapp</li></ul><p><a href="https://yeoman.io/codelab/review-generated-files.html" target="_blank" rel="noopener">https://yeoman.io/codelab/review-generated-files.html</a></p><ul><li><p>画廊应用</p></li><li><p>facebook  creact-react-app 项目 <a href="https://github.com/facebook/create-react-app" target="_blank" rel="noopener">https://github.com/facebook/create-react-app</a>  npm init react-app my-app</p></li><li><p>Material  design学习</p><p><a href="https://material-ui.com/getting-started/page-layout-examples/" target="_blank" rel="noopener">https://material-ui.com/getting-started/page-layout-examples/</a></p></li><li><p>react 路由实现组件之间的切换</p></li></ul><p><a href="https://www.jianshu.com/p/8fcf8d27b9fe" target="_blank" rel="noopener">https://www.jianshu.com/p/8fcf8d27b9fe</a></p><ul><li>多人投票项目，待办</li><li>MERN 全栈开发 pdf ，待办。</li></ul><h1 id="Redux-学习"><a href="#Redux-学习" class="headerlink" title="Redux 学习"></a>Redux 学习</h1><p><a href="https://redux-docs.netlify.com/introduction/learning-resources" target="_blank" rel="noopener">https://redux-docs.netlify.com/introduction/learning-resources</a> </p><p>官方介绍和推荐学习资源 ！</p><p><a href="http://cn.redux.js.org/" target="_blank" rel="noopener">http://cn.redux.js.org/</a>  中文文档</p><p>action 组件可能的行为，需要先定义分类type，然后再生成行为createaction</p><hr><p>reducer 根据当前状态行为确定下一步状态，(previousState, action) =&gt; newState</p><p> It’s very important that the reducer stays pure. Things you should <strong>never</strong> do inside a reducer:</p><ul><li>Mutate its arguments;</li><li>Perform side effects like API calls and routing transitions;</li><li>Call non-pure functions, e.g. <code>Date.now()</code> or <code>Math.random()</code></li></ul><hr><p>container将redux和react组件绑定在一起</p><hr><p>store 维持应用状态</p><ul><li>Holds application state;</li><li>Allows access to state via <a href="https://redux-docs.netlify.com/api/store#getState" target="_blank" rel="noopener"><code>getState()</code></a>;</li><li>Allows state to be updated via <a href="https://redux-docs.netlify.com/api/store#dispatch" target="_blank" rel="noopener"><code>dispatch(action)</code></a>;</li><li>Registers listeners via <a href="https://redux-docs.netlify.com/api/store#subscribe" target="_blank" rel="noopener"><code>subscribe(listener)</code></a>;</li><li>Handles unregistering of listeners via the function returned by <a href="https://redux-docs.netlify.com/api/store#subscribe" target="_blank" rel="noopener"><code>subscribe(listener)</code></a>.</li></ul><h3 id="官方代码学习："><a href="#官方代码学习：" class="headerlink" title="官方代码学习："></a>官方代码学习：</h3><hr><h3 id="一个简单的计时器应用"><a href="#一个简单的计时器应用" class="headerlink" title="一个简单的计时器应用"></a>一个简单的计时器应用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 入口文件 index.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>  </span><br><span class="line"><span class="keyword">import</span> Counter <span class="keyword">from</span> <span class="string">'./components/Counter'</span></span><br><span class="line"><span class="keyword">import</span> counter <span class="keyword">from</span> <span class="string">'./reducers'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(counter)  <span class="comment">// 获取存储</span></span><br><span class="line"><span class="keyword">const</span> rootEl = <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> render = <span class="function"><span class="params">()</span> =&gt;</span> ReactDOM.render(</span><br><span class="line">  &lt;Counter</span><br><span class="line">    value=&#123;store.getState()&#125;  <span class="comment">// 将store中的state值传入组件的值</span></span><br><span class="line">    onIncrement=&#123;() =&gt; store.dispatch(&#123; <span class="attr">type</span>: <span class="string">'INCREMENT'</span> &#125;)&#125;  <span class="comment">//为组件注册store中的方法 </span></span><br><span class="line">    onDecrement=&#123;() =&gt; store.dispatch(&#123; <span class="attr">type</span>: <span class="string">'DECREMENT'</span> &#125;)&#125;</span><br><span class="line">  /&gt;,</span><br><span class="line">  rootEl</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">render()  <span class="comment">// 渲染</span></span><br><span class="line">store.subscribe(render) <span class="comment">// 为渲染结果进行stroe的订阅</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// reducer 文件，根据传入的行为定义响应结果</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (state = <span class="number">0</span>, action) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'INCREMENT'</span>:</span><br><span class="line">      <span class="keyword">return</span> state + <span class="number">1</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'DECREMENT'</span>:</span><br><span class="line">      <span class="keyword">return</span> state - <span class="number">1</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义时钟组件</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.incrementAsync = <span class="keyword">this</span>.incrementAsync.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.incrementIfOdd = <span class="keyword">this</span>.incrementIfOdd.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  incrementIfOdd() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.props.value % <span class="number">2</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.props.onIncrement()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  incrementAsync() &#123;</span><br><span class="line">    setTimeout(<span class="keyword">this</span>.props.onIncrement, <span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; value, onIncrement, onDecrement &#125; = <span class="keyword">this</span>.props   <span class="comment">//获取上层调用的参数</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;p&gt;</span><br><span class="line">        Clicked: &#123;value&#125; times         <span class="comment">// 将上层传来的值绑定在组件的属性之上</span></span><br><span class="line">        &#123;<span class="string">' '</span>&#125;</span><br><span class="line">        &lt;button onClick=&#123;onIncrement&#125;&gt;      <span class="comment">// 将上层定义的事件绑定给下层组件</span></span><br><span class="line">          +</span><br><span class="line">        &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &#123;' '&#125;</span></span><br><span class="line"><span class="regexp">        &lt;button onClick=&#123;onDecrement&#125;&gt;</span></span><br><span class="line"><span class="regexp">          -</span></span><br><span class="line"><span class="regexp">        &lt;/</span>button&gt;</span><br><span class="line">        &#123;<span class="string">' '</span>&#125;</span><br><span class="line">        &lt;button onClick=&#123;<span class="keyword">this</span>.incrementIfOdd&#125;&gt;</span><br><span class="line">          Increment <span class="keyword">if</span> odd</span><br><span class="line">        &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &#123;' '&#125;</span></span><br><span class="line"><span class="regexp">        &lt;button onClick=&#123;this.incrementAsync&#125;&gt;</span></span><br><span class="line"><span class="regexp">          Increment async</span></span><br><span class="line"><span class="regexp">        &lt;/</span>button&gt;</span><br><span class="line">      &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">Counter.propTypes = &#123;  /</span><span class="regexp">/ 组件的属性</span></span><br><span class="line"><span class="regexp">  value: PropTypes.number.isRequired,</span></span><br><span class="line"><span class="regexp">  onIncrement: PropTypes.func.isRequired,</span></span><br><span class="line"><span class="regexp">  onDecrement: PropTypes.func.isRequired</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Counter</span></span><br></pre></td></tr></table></figure><hr><h3 id="Todos-简单应用学习"><a href="#Todos-简单应用学习" class="headerlink" title="Todos 简单应用学习"></a>Todos 简单应用学习</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/JoshuaQYH/blogImage/master/20181211013218.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>react-redux中<strong>Provider</strong>的概念，相当于一个顶层的组件，直接存储了store。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 入口文件</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>  <span class="comment">// </span></span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>  <span class="comment">// render 对象</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>  <span class="comment">// 从redux引入createStore方法创建store</span></span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span> <span class="comment">// 引入顶层组件，注册store</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./components/App'</span>   <span class="comment">// 引入App组件，核心组件</span></span><br><span class="line"><span class="keyword">import</span> rootReducer <span class="keyword">from</span> <span class="string">'./reducers'</span>  <span class="comment">// 一次性引入多个reducer</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(rootReducer)  </span><br><span class="line"></span><br><span class="line">render(</span><br><span class="line">  &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">    &lt;App /&gt;</span><br><span class="line">  &lt;<span class="regexp">/Provider&gt;,</span></span><br><span class="line"><span class="regexp">  document.getElementById('root')</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure><ul><li>学习reducer 如何向其他reducer托管处理行为的逻辑。</li></ul><p>reducer中，index.js中<strong>combineReducers</strong>为汇总的reducer。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// reducers/index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> todos <span class="keyword">from</span> <span class="string">'./todos'</span></span><br><span class="line"><span class="keyword">import</span> visibilityFilter <span class="keyword">from</span> <span class="string">'./visibilityFilter'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> combineReducers(&#123;   <span class="comment">//联合其他reducer</span></span><br><span class="line">  todos,</span><br><span class="line">  visibilityFilter</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// /reducers/todos.js  ??</span></span><br><span class="line"><span class="keyword">const</span> todos = <span class="function">(<span class="params">state = [], action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'ADD_TODO'</span>: <span class="comment">// 添加一条todo</span></span><br><span class="line">      <span class="keyword">return</span> [</span><br><span class="line">        ...state,</span><br><span class="line">        &#123;</span><br><span class="line">          id: action.id,</span><br><span class="line">          text: action.text,</span><br><span class="line">          completed: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'TOGGLE_TODO'</span>: <span class="comment">// 完成todo</span></span><br><span class="line">      <span class="keyword">return</span> state.map(<span class="function"><span class="params">todo</span> =&gt;</span></span><br><span class="line">        (todo.id === action.id)</span><br><span class="line">          ? &#123;...todo, <span class="attr">completed</span>: !todo.completed&#125;</span><br><span class="line">          : todo</span><br><span class="line">      )</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> todos</span><br><span class="line"></span><br><span class="line"><span class="comment">////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// reducers/visibilityFillter.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; VisibilityFilters &#125; <span class="keyword">from</span> <span class="string">'../actions'</span>  <span class="comment">// 将行为交给其他模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> visibilityFilter = <span class="function">(<span class="params">state = VisibilityFilters.SHOW_ALL, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'SET_VISIBILITY_FILTER'</span>: <span class="comment">// 设置可视化条件</span></span><br><span class="line">      <span class="keyword">return</span> action.filter</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> visibilityFilter</span><br></pre></td></tr></table></figure><p>定义行为类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以把type和 actioncreator分开</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> nextTodoId = <span class="number">0</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> addTodo = <span class="function"><span class="params">text</span> =&gt;</span> (&#123;</span><br><span class="line">  type: <span class="string">'ADD_TODO'</span>,</span><br><span class="line">  id: nextTodoId++,</span><br><span class="line">  text</span><br><span class="line">&#125;)  <span class="comment">// 添加todo 行为</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> setVisibilityFilter = <span class="function"><span class="params">filter</span> =&gt;</span> (&#123;</span><br><span class="line">  type: <span class="string">'SET_VISIBILITY_FILTER'</span>,</span><br><span class="line">  filter</span><br><span class="line">&#125;)  <span class="comment">// 设置可视化条件，点击active 按钮或者completed</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> toggleTodo = <span class="function"><span class="params">id</span> =&gt;</span> (&#123;</span><br><span class="line">  type: <span class="string">'TOGGLE_TODO'</span>,</span><br><span class="line">  id</span><br><span class="line">&#125;)  <span class="comment">// 删除待办</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> VisibilityFilters = &#123;</span><br><span class="line">  SHOW_ALL: <span class="string">'SHOW_ALL'</span>,</span><br><span class="line">  SHOW_COMPLETED: <span class="string">'SHOW_COMPLETED'</span>,</span><br><span class="line">  SHOW_ACTIVE: <span class="string">'SHOW_ACTIVE'</span></span><br><span class="line">&#125;  <span class="comment">// 可视化</span></span><br></pre></td></tr></table></figure><p>表面组件和容器组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 三个组件</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> Footer <span class="keyword">from</span> <span class="string">'./Footer'</span></span><br><span class="line"><span class="keyword">import</span> AddTodo <span class="keyword">from</span> <span class="string">'../containers/AddTodo'</span></span><br><span class="line"><span class="keyword">import</span> VisibleTodoList <span class="keyword">from</span> <span class="string">'../containers/VisibleTodoList'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;AddTodo /&gt;</span><br><span class="line">    &lt;VisibleTodoList /&gt;</span><br><span class="line">    &lt;Footer /&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="comment">/////////////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// AddTodo.js</span></span><br><span class="line"><span class="comment">// 这个逻辑比较简单，分发add todo 事件即可</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"><span class="keyword">import</span> &#123; addTodo &#125; <span class="keyword">from</span> <span class="string">'../actions'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> AddTodo = <span class="function">(<span class="params">&#123; dispatch &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> input</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;form onSubmit=&#123;e =&gt; &#123;</span><br><span class="line">        e.preventDefault()</span><br><span class="line">        <span class="keyword">if</span> (!input.value.trim()) &#123;</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        dispatch(addTodo(input.value))  <span class="comment">// 分发addtodo行为，在action中定义好了</span></span><br><span class="line">        input.value = <span class="string">''</span></span><br><span class="line">      &#125;&#125;&gt;</span><br><span class="line">        &lt;input ref=&#123;node =&gt; input = node&#125; /&gt;</span><br><span class="line">        &lt;button type=<span class="string">"submit"</span>&gt;</span><br><span class="line">          Add Todo</span><br><span class="line">        &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>form&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default connect()(AddTodo)   /</span><span class="regexp">/ 将react组件使用connect建立起redux和react之间的联系</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="comment">////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// FilterLink.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"><span class="keyword">import</span> &#123; setVisibilityFilter &#125; <span class="keyword">from</span> <span class="string">'../actions'</span></span><br><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">'../components/Link'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function">(<span class="params">state, ownProps</span>) =&gt;</span> (&#123;</span><br><span class="line">  active: ownProps.filter === state.visibilityFilter</span><br><span class="line">&#125;) <span class="comment">// Link组件的属性active，通过比较组件当前状态和上级传入状态，确定是否隐藏</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapDispatchToProps = <span class="function">(<span class="params">dispatch, ownProps</span>) =&gt;</span> (&#123;</span><br><span class="line">  onClick: <span class="function"><span class="params">()</span> =&gt;</span> dispatch(setVisibilityFilter(ownProps.filter))</span><br><span class="line">&#125;) <span class="comment">// link组件的点击事件，根据分发事件来确定</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(</span><br><span class="line">  mapStateToProps,  </span><br><span class="line">  mapDispatchToProps</span><br><span class="line">)(Link)    <span class="comment">// 将两个事件处理绑定在link组件中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/////  组件之中无需注意事件分发逻辑，只需要暴露组件事件分发的接口</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Link = <span class="function">(<span class="params">&#123; active, children, onClick &#125;</span>) =&gt;</span> (</span><br><span class="line">    &lt;button</span><br><span class="line">       onClick=&#123;onClick&#125;</span><br><span class="line">       disabled=&#123;active&#125;</span><br><span class="line">       style=&#123;&#123;</span><br><span class="line">           marginLeft: <span class="string">'4px'</span>,</span><br><span class="line">       &#125;&#125;</span><br><span class="line">    &gt;</span><br><span class="line">      &#123;children&#125;</span><br><span class="line">    &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">Link.propTypes = &#123;</span></span><br><span class="line"><span class="regexp">  active: PropTypes.bool.isRequired,</span></span><br><span class="line"><span class="regexp">  children: PropTypes.node.isRequired,</span></span><br><span class="line"><span class="regexp">  onClick: PropTypes.func.isRequired</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Link</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="comment">//////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// visibletodolist.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"><span class="keyword">import</span> &#123; toggleTodo &#125; <span class="keyword">from</span> <span class="string">'../actions'</span></span><br><span class="line"><span class="keyword">import</span> TodoList <span class="keyword">from</span> <span class="string">'../components/TodoList'</span></span><br><span class="line"><span class="keyword">import</span> &#123; VisibilityFilters &#125; <span class="keyword">from</span> <span class="string">'../actions'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据fiter 确定reducer todos如何确定操作</span></span><br><span class="line"><span class="keyword">const</span> getVisibleTodos = <span class="function">(<span class="params">todos, filter</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (filter) &#123;  <span class="comment">// fiter是state.visibilityFilter，一个reducer，会根据分发的action确定返回action.filter,即是显示active还是显示completed，然后todos也是一个reducer将会根据显示条件，对todo进行分类，</span></span><br><span class="line">    <span class="keyword">case</span> VisibilityFilters.SHOW_ALL:</span><br><span class="line">      <span class="keyword">return</span> todos</span><br><span class="line">    <span class="keyword">case</span> VisibilityFilters.SHOW_COMPLETED:</span><br><span class="line">      <span class="keyword">return</span> todos.filter(<span class="function"><span class="params">t</span> =&gt;</span> t.completed)</span><br><span class="line">    <span class="keyword">case</span> VisibilityFilters.SHOW_ACTIVE:</span><br><span class="line">      <span class="keyword">return</span> todos.filter(<span class="function"><span class="params">t</span> =&gt;</span> !t.completed)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Unknown filter: '</span> + filter)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function"><span class="params">state</span> =&gt;</span> (&#123;  <span class="comment">// 得到状态，显示todo</span></span><br><span class="line">  todos: getVisibleTodos(state.todos, state.visibilityFilter) <span class="comment">// state代表一个全局顶层的reducer</span></span><br><span class="line">&#125;) <span class="comment">// state.todos 代表一个reducer，第二个参数也是，返回一个todo的显示与否的结果</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapDispatchToProps = <span class="function"><span class="params">dispatch</span> =&gt;</span> (&#123;  <span class="comment">// 分发事件的行为，点击待办，删除</span></span><br><span class="line">  toggleTodo: <span class="function"><span class="params">id</span> =&gt;</span> dispatch(toggleTodo(id))  <span class="comment">// 按id区分行为</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(</span><br><span class="line">  mapStateToProps,</span><br><span class="line">  mapDispatchToProps</span><br><span class="line">)(TodoList)   <span class="comment">// 对组件todolist todos和toggleTodo属性进行状态和分发事件的绑定</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">////////////////////////// todolist 事件</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span></span><br><span class="line"><span class="keyword">import</span> Todo <span class="keyword">from</span> <span class="string">'./Todo'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> TodoList = <span class="function">(<span class="params">&#123; todos, toggleTodo &#125;</span>) =&gt;</span> (</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &#123;todos.map(<span class="function"><span class="params">todo</span> =&gt;</span></span><br><span class="line">      &lt;Todo</span><br><span class="line">        key=&#123;todo.id&#125;</span><br><span class="line">        &#123;...todo&#125;  <span class="comment">// 按照id来分配是否toggletodo事件</span></span><br><span class="line">        onClick=&#123;() =&gt; toggleTodo(todo.id)&#125; <span class="comment">// 先确定行为属于toggleTodo，然后reducer解决处理，确定todo的completed的值，todo.id ,todo代表状态todos中的一条todo，todo.id为todo的序号，传入id后将会对该todo的completed取反，结果会导致本来是横线会变无横线，或者无横线变有横线</span></span><br><span class="line">      /&gt;</span><br><span class="line">    )&#125;</span><br><span class="line">  &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">TodoList.propTypes = &#123;</span></span><br><span class="line"><span class="regexp">  todos: PropTypes.arrayOf(PropTypes.shape(&#123;</span></span><br><span class="line"><span class="regexp">    id: PropTypes.number.isRequired,</span></span><br><span class="line"><span class="regexp">    completed: PropTypes.bool.isRequired,</span></span><br><span class="line"><span class="regexp">    text: PropTypes.string.isRequired</span></span><br><span class="line"><span class="regexp">  &#125;).isRequired).isRequired,</span></span><br><span class="line"><span class="regexp">  toggleTodo: PropTypes.func.isRequired</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default TodoList</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="comment">// todo.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 单条todo的三个属性</span></span><br><span class="line"><span class="keyword">const</span> Todo = <span class="function">(<span class="params">&#123; onClick, completed, text &#125;</span>) =&gt;</span> (</span><br><span class="line">  &lt;li</span><br><span class="line">    onClick=&#123;onClick&#125;</span><br><span class="line">    style=&#123;&#123; <span class="comment">// 属性与上层todolist绑定</span></span><br><span class="line">      textDecoration: completed ? <span class="string">'line-through'</span> : <span class="string">'none'</span></span><br><span class="line">    &#125;&#125;</span><br><span class="line">  &gt;</span><br><span class="line">    &#123;text&#125;</span><br><span class="line">  &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">Todo.propTypes = &#123;</span></span><br><span class="line"><span class="regexp">  onClick: PropTypes.func.isRequired,</span></span><br><span class="line"><span class="regexp">  completed: PropTypes.bool.isRequired,</span></span><br><span class="line"><span class="regexp">  text: PropTypes.string.isRequired</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Todo</span></span><br></pre></td></tr></table></figure><hr><h3 id="todos-with-undo"><a href="#todos-with-undo" class="headerlink" title="todos-with-undo"></a>todos-with-undo</h3><p>使用redux undo实现用更少的代码撤销或者回退上一步（取消撤销）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义好todos 这一个reducer，然后下面这句，最后export undoabletodos</span></span><br><span class="line"><span class="keyword">const</span> undoableTodos = undoable(todos, &#123; <span class="attr">filter</span>: includeAction([<span class="string">'ADD_TODO'</span>, <span class="string">'TOGGLE_TODO'</span>]) &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在redo 和undo按钮中，注册redo </span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; ActionCreators <span class="keyword">as</span> UndoActionCreators &#125; <span class="keyword">from</span> <span class="string">'redux-undo'</span></span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> UndoRedo = <span class="function">(<span class="params">&#123; canUndo, canRedo, onUndo, onRedo &#125;</span>) =&gt;</span> (</span><br><span class="line">  &lt;p&gt;</span><br><span class="line">    &lt;button onClick=&#123;onUndo&#125; disabled=&#123;!canUndo&#125;&gt;</span><br><span class="line">      Undo</span><br><span class="line">    &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;button onClick=&#123;onRedo&#125; disabled=&#123;!canRedo&#125;&gt;</span></span><br><span class="line"><span class="regexp">      Redo</span></span><br><span class="line"><span class="regexp">    &lt;/</span>button&gt;</span><br><span class="line">  &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const mapStateToProps = (state) =&gt; (&#123;</span></span><br><span class="line"><span class="regexp">  canUndo: state.todos.past.length &gt; 0,  /</span><span class="regexp">/state.todos相当于undoableTodos</span></span><br><span class="line"><span class="regexp">  canRedo: state.todos.future.length &gt; 0</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const mapDispatchToProps = (&#123;</span></span><br><span class="line"><span class="regexp">  onUndo: UndoActionCreators.undo,  /</span><span class="regexp">/ 这一步是 考虑组件变化记忆？？？</span></span><br><span class="line"><span class="regexp">  onRedo: UndoActionCreators.redo</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">UndoRedo = connect(</span></span><br><span class="line"><span class="regexp">  mapStateToProps,</span></span><br><span class="line"><span class="regexp">  mapDispatchToProps</span></span><br><span class="line"><span class="regexp">)(UndoRedo)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default UndoRedo</span></span><br></pre></td></tr></table></figure><hr><p>redux中数据的生命周期主要是以下四个步骤：</p><ol><li>你调用事件分发 store.dispatch(action)</li><li>redux 的store调用给定好的reducer函数</li><li>root reducer将多个reducers函数的输出值装入一个单一的状态树</li><li>​</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;base href=&quot;gallery-by-react&quot;&gt;

&lt;h1 id=&quot;官方文档入门&quot;&gt;&lt;a href=&quot;#官方文档入门&quot; class=&quot;headerlink&quot; title=&quot;官方文档入门&quot;&gt;&lt;/a&gt;官方文档入门&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://react
      
    
    </summary>
    
    
      <category term="前端开发" scheme="https://joshuaqyh.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="React" scheme="https://joshuaqyh.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>IPSec 学习</title>
    <link href="https://joshuaqyh.github.io/2018/12/07/IPSec-%E5%AD%A6%E4%B9%A0/"/>
    <id>https://joshuaqyh.github.io/2018/12/07/IPSec-学习/</id>
    <published>2018-12-07T02:11:34.000Z</published>
    <updated>2018-12-07T03:27:13.575Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IP-Sec-定义"><a href="#IP-Sec-定义" class="headerlink" title="IP Sec 定义"></a>IP Sec 定义</h1><p>IPSec全称是<code>Internet Protocol Security</code> ，因特网协议安全，由IETF官方定义。</p><p><code>RFC-1825 to RFC-1827</code>。属于一种协议套件，通过认证和加密数据包来保证因特网安全通信。</p><ul><li><p>属于端到端的安全模式。</p></li><li><p>保护跨IP网络的应用层通信。但应用层无需设计使用ＩＰＳｅｃ。</p><ul><li>可以使用SSL（安全套接字），TLS（传输层安全），安全壳（SSH）。</li></ul></li><li><p>ＩＰＳｅｃ是ISO标准网络层安全协议的后继者。</p></li><li><p>IP协议的安全性：使用IPＳｅｃ解决</p></li><li><p>IPＳｅｃ提供网络层加密方案，在网络层对内容先加密再传输。</p><ul><li>数据加密方式有<ul><li>传输模式：对数据部分ｐａｙｌｏａｄ加密。</li><li>隧道模式：对整个IP分组进行加密。</li></ul></li></ul></li></ul><h1 id="数据保护措施"><a href="#数据保护措施" class="headerlink" title="数据保护措施"></a>数据保护措施</h1><ul><li>数据保密：使用各种加密手法。主要是对称加密技术。要保证公钥的合法性，我们需要确认发送证书的一方不是伪装的攻击者。Ｘ．５０９证书作为可信第三方为通信双方做身份验证。或者使用预共享的密钥，RSA密钥。</li><li>数据完整性度量：保证数据完整。数据做摘要，完整接收后再进行摘要比对。</li><li>来源认证：确认收发双方，以信息摘要的方式解决。信息摘要种包含了发送方的地址信息HMAC</li><li>防止重放攻击：加上时间戳＋随机数，保证消息唯一区分。</li></ul><h1 id="IPSec-的一些基本理念"><a href="#IPSec-的一些基本理念" class="headerlink" title="IPSec 的一些基本理念"></a>IPSec 的一些基本理念</h1><h3 id="AH认证头协议"><a href="#AH认证头协议" class="headerlink" title="AH认证头协议"></a>AH认证头协议</h3><p>AH比ESP相比具有更强的<strong>认证</strong>能力。能有效在数据传送过程中对数据进行完整性度量度量和来源认证，防止重放攻击。</p><p>工作原理：在IP数据报前加上一个身份验证报头，报头中有一个带密钥的Hash值。</p><p>可单独使用，也可以和ESP协议结合使用。</p><h3 id="ESP封装安全载荷协议"><a href="#ESP封装安全载荷协议" class="headerlink" title="ESP封装安全载荷协议"></a>ESP封装安全载荷协议</h3><p>能够对数据进行完整性度量，来源认证和加密，防止重放攻击。</p><ul><li><p>ESP服务依据建立的SA，对可选项目有所限制</p><ul><li>完整性检查和验证一起进行</li></ul></li><li><p>加密服务是可选的。启用加密，那么也就启用了完整性检车和认证。</p></li><li><p>一般情况下，ESP只加密数据报中有效载荷部分（传输模式），在端对端的隧道通信下，需要开启隧道模式。</p></li><li><p>ESP报头位置在IP报头之后，在TCP，UDP报头之前。</p></li><li><p>可以与AH协议结合使用，也可以单独使用。</p><p>​</p></li></ul><h3 id="Tunnel隧道模式"><a href="#Tunnel隧道模式" class="headerlink" title="Tunnel隧道模式"></a>Tunnel隧道模式</h3><p>加密原IP报文，作为数据内容，在这段数据内容之前，加上ESP或AH协议头，加上新的IP头，形成IPSec报文进行传输。</p><h3 id="Transport-Mode传输模式"><a href="#Transport-Mode传输模式" class="headerlink" title="Transport Mode传输模式"></a>Transport Mode传输模式</h3><p>仅保护IP报文中的有效载荷部分，在该过程中原报文结构被修改。然后在修改后有效载荷前加上新的ESP或AH协议头，装回原来的IP地址，形成IPSec报文。</p><h3 id="SA"><a href="#SA" class="headerlink" title="SA"></a>SA</h3><p>安全关联。可以认为是某一连接被IPSec保护的唯一标识。</p><p>SA是单向的，一次连接，通信双方都需要创建一个SA。</p><h3 id="SAD"><a href="#SAD" class="headerlink" title="SAD"></a>SAD</h3><p>  安全关联数据库。</p><p>SAD条目：</p><ol><li>顺序号计数器</li><li>顺序号溢出计数器</li><li>防止回放窗口</li><li>SA有效期</li><li>AH协议中所使用的算法和密钥</li><li>ESP协议 涉及加密认证的算法和密钥</li><li>IPSec运行模式</li><li>PMTU 两个通信设备间的MTU</li></ol><p>除了SAD外还有 SPI，SPD，IKE</p><h1 id="ESP协议"><a href="#ESP协议" class="headerlink" title="ESP协议"></a>ESP协议</h1><p>１.　主要了解隧道模式下IPSec数据报结构。</p><p>新IP头 + ESP头 + 加密原数据报 + 加密ESP尾 + ESP的MAC验证码</p><p>２.　传输模式下的ＩＰＳｅｃ数据报结构</p><p>原IP头＋ESP头＋加密的原IP数据报文＋加密的ESP尾＋ESP－MAC　</p><h1 id="AH协议"><a href="#AH协议" class="headerlink" title="AH协议"></a>AH协议</h1><p>不加密，供验证。消息高，不防窃听。</p><h1 id="IKE-因特网密钥交换"><a href="#IKE-因特网密钥交换" class="headerlink" title="IKE 因特网密钥交换"></a>IKE 因特网密钥交换</h1><p>几种IKE协议。</p><p>ISAKMP：用于建立SA，密钥。</p><p>Oakley：允许在非安全连接中安全交换密钥</p><p>SKEME：安全密钥交换机制。</p><h1 id="Gateway-模式和Road-Warrior模式"><a href="#Gateway-模式和Road-Warrior模式" class="headerlink" title="Gateway 模式和Road Warrior模式"></a>Gateway 模式和Road Warrior模式</h1><p>IPSec适用于：</p><ol><li>两个私有网络通过因特网对接</li><li>因特网接入私有网络</li></ol><p>需要保护好通信数据。</p><p>Gateway模式是网关之间的通信，只需要在网关上设置好IPSec模式。</p><p>Road Warrior模式一头是网关，另外一头是单个客户端。</p><p><em>注： 私有网络内部主机默认为安全，没有必要对私有网络中的每一个设备配置ＩＰｓｅｃ</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;IP-Sec-定义&quot;&gt;&lt;a href=&quot;#IP-Sec-定义&quot; class=&quot;headerlink&quot; title=&quot;IP Sec 定义&quot;&gt;&lt;/a&gt;IP Sec 定义&lt;/h1&gt;&lt;p&gt;IPSec全称是&lt;code&gt;Internet Protocol Security&lt;/
      
    
    </summary>
    
    
      <category term="信息安全" scheme="https://joshuaqyh.github.io/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Java实现MD算法并验证</title>
    <link href="https://joshuaqyh.github.io/2018/12/07/Java%E5%AE%9E%E7%8E%B0MD%E7%AE%97%E6%B3%95%E5%B9%B6%E9%AA%8C%E8%AF%81/"/>
    <id>https://joshuaqyh.github.io/2018/12/07/Java实现MD算法并验证/</id>
    <published>2018-12-06T16:44:10.000Z</published>
    <updated>2018-12-06T16:54:24.643Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、实验环境说明"><a href="#一、实验环境说明" class="headerlink" title="一、实验环境说明"></a>一、实验环境说明</h2><p>操作系统：window10</p><p>编程语言：Java （JDK版本 11.0.1）</p><p>使用IDE：Intellij IDEA</p><h2 id="二、算法原理概述"><a href="#二、算法原理概述" class="headerlink" title="二、算法原理概述"></a>二、算法原理概述</h2><h3 id="实验流程"><a href="#实验流程" class="headerlink" title="实验流程"></a>实验流程</h3><p> 整个MD5（信息摘要算法5）的基本过程可以概括为以下几个步骤：</p><ol><li><p><strong>填充</strong>：消息为 $K$ bits的原始消息数据尾部填充长度为$P$ bits的标识$1000…0 \, 1\le P \le 512$ （至少要填充一个bit) 。使得填充后的消息位数满足$K + P \equiv 448 (mod \, 512)$ (注：当$K \equiv 448(mod \, 512)$)时，$P = 512$。</p><p>填充好的消息尾部需要在附加 $K$值的低64位即$K \, mod \,2^{64}$。 最终结果得到  $K + P  + 64 \equiv 0 (mod \, 512)$的<strong>填充消息</strong>。</p></li><li><p><strong>分块</strong>：把填充之后的消息结果分割为$L$个$512-bit$ 分组：$Y_0..Y_{L-1}$ 。也是$L$个64字节的分组。</p></li></ol><ol><li><strong>缓冲区初始化</strong>：初始化一个$128-bit$的MD缓冲区，记为$CV_q$，表示成4个$32-bit (4个byte)$ 的寄存器$(A,B,C,D)$；$CV_0 = IV (IV为16进制初值)$。</li></ol><ol><li><p><strong>循环压缩</strong> ：对L个消息分组$Y_q(q = 0, 1,…L-1)$ ，逐个经过4重循环的压缩算法。表示为：</p><p>$$CV_0 = IV$$ </p><p>$$CV_i = H_{MD5}(CV_{i-1}, Y_i)$$</p></li><li><p><strong>得出结果</strong>：最后一个消息分组经过$H_{MD5}$压缩得到MD5结果为MD值，即$MD = CV_L$。</p><p>​</p></li></ol><h3 id="核心压缩步骤"><a href="#核心压缩步骤" class="headerlink" title="核心压缩步骤"></a>核心压缩步骤</h3><ol><li><strong>总控流程</strong>：$H_{MD5}$ 从$CV$输入128位，分配到缓冲区$(A,B,C,D)$，从消息分组输入512位$Y_q$ ，经过4轮循环，每次循环16次迭代（共64次迭代）之后，得到用于下一轮的输入的$CV$值。如果$Yq = Y_{L-1}$，即输出MD5值。</li><li><strong>每轮循环</strong>：结合T表元素$T[]$和消息分组的不同部分$X[]$，每轮固定不同的生成函数$F，G，H，I$做16次迭代运算，生成下一轮循环的输入。</li><li>四个生成函数$F,G,H,I$</li></ol><ol start="4"><li><p>消息分组的内容：需要靠下标k来进行运算得到参与 迭代的消息部分，代表当前处理消息分组的第$k$个$(k = 0…15)32$位字，即$M_{q × 16 + k}$。</p><p>在各轮循环中第$i$ 次迭代$(i = 1..16)$ 使用的$X[k]$ 的确定：</p><p>​    设$j = i -1$：<br>◌    第1轮迭代：$k = j$.</p><pre><code>顺序使用 $ X[0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15]$</code></pre><p>◌    第2轮迭代：$k = (1 + 5j) mod 16$.</p><pre><code>顺序使用$X[1, 6,11, 0, 5,10,15, 4, 9,14, 3, 8,13, 2, 7,12]$</code></pre><p>◌    第3轮迭代：$k = (5 + 3j) mod 16$.</p><pre><code>顺序使用$X[5, 8,11,14, 1, 4, 7,10,13, 0, 3, 6, 9,12,15, 2]$</code></pre><p>◌    第4轮迭代：$k = 7j mod 16$.</p><pre><code>顺序使用$X[0, 7,14, 5,12, 3,10, 1, 8,15, 6,13, 4,11, 2, 9]$</code></pre></li><li><p>T 表元素的生成：共有64个元素，用于64次的迭代，每个元素的计算如下。</p><p>$$T[i] = int(2_{32}×|sin(i)|)$$<br>$$ int为 取整函数，sin正弦函数，以i 作为弧度输入。$$</p></li><li><p>移位数s的确定：<br>s表共有64个元素，用于64次迭代，各次迭代运算采用的左循环移位的s 值：<br>$$s[ 1..16] = { 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22 }$$<br>$$s[17..32] = { 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20 } $$<br>$$s[33..48] = { 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23 }$$<br>$$s[49..64] = { 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21 }$$</p></li><li><p><strong>一次迭代运算逻辑</strong>: $a,b,c,d$为寄存器$A,B,C,D$的内容，每轮循环重的一次迭代运算逻辑如下:</p><ol><li>对寄存器A进行迭代：$a \leftarrow b + ((a + g(b,c,d) + X[k] + T[i]) &lt;&lt;&lt; s)$ </li><li>对缓冲区的内容进行向左循环变换，即$(B,C,D,A) \leftarrow (A,B,C,D)$。<br>$X[k]$为消息分组的部分内容，$g(b,c,d)$为生成函数，$T[i]$为T表元素，$s$为移位数。<br>​</li></ol></li></ol><h2 id="三、程序设计"><a href="#三、程序设计" class="headerlink" title="三、程序设计"></a>三、程序设计</h2><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>本程序使用的数据数据结构如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">byte</span>[] M;                  <span class="comment">/* 存放消息字节数组 */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">long</span>[] T = <span class="keyword">new</span> <span class="keyword">long</span>[<span class="number">64</span>];   <span class="comment">/* 迭代运算的T表， 64个元素，每个元素有32bits，16进制8位 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/*在迭代中的消息数组*/</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">long</span>[] X = <span class="keyword">new</span> <span class="keyword">long</span>[<span class="number">16</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*四个寄存器A，B，C，D，构成128bits的迭代缓冲区*/</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">long</span> A = <span class="number">0x67452301</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">long</span> B = <span class="number">0xEFCDAB89</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">long</span> C = <span class="number">0x98BADCFE</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">long</span> D = <span class="number">0x10325476</span>;</span><br></pre></td></tr></table></figure><p>消息数组M的生成如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(inputString);   <span class="comment">// 读入文件流</span></span><br><span class="line">BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(fis);   <span class="comment">// 将文件流读入缓冲区</span></span><br><span class="line">DataInputStream dis = <span class="keyword">new</span> DataInputStream(bis);           <span class="comment">// 将缓冲区数据写入数据流</span></span><br><span class="line"></span><br><span class="line">M = <span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>) (length + paddingLength + <span class="number">8</span>)];     <span class="comment">// 填充消息最终长度  满足于 length + padding + 8 = 0 mod 64  字节</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将文件内容读入全部字节数组M中并填充</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length + paddingLength; i++)&#123;</span><br><span class="line">   <span class="keyword">if</span>( i &lt; length)&#123;</span><br><span class="line">      M[i] = (<span class="keyword">byte</span>)dis.read();</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(i == length)&#123;</span><br><span class="line">      M[i] = (<span class="keyword">byte</span>)<span class="number">128</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span>&#123;</span><br><span class="line">       M[i] = <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>迭代运算中的T表数据生成如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*生成迭代的T表格*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">create_T_Table</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">64</span>;i++)&#123;</span><br><span class="line">        T[i] = (<span class="keyword">long</span>) (Math.floor(Math.abs(Math.sin(i+<span class="number">1</span>)) * (<span class="keyword">long</span>)Math.pow(<span class="number">2</span>,<span class="number">32</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>处理消息分组X[]的生成如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*将 512bit的消息处理为 16个字的X数组*/</span></span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>,k=<span class="number">0</span>;j&lt;<span class="number">16</span>;j++,k+=<span class="number">4</span>)&#123;</span><br><span class="line">   X[j] = ((<span class="keyword">int</span>)M[i * <span class="number">64</span> + k] &amp; <span class="number">0xFF</span>) | ((<span class="keyword">int</span>)M[i*<span class="number">64</span>+k+<span class="number">1</span>] &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">8</span> |</span><br><span class="line">         ((<span class="keyword">int</span>)M[i*<span class="number">64</span>+k+<span class="number">2</span>] &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">16</span> | ((<span class="keyword">int</span>)M[i*<span class="number">64</span>+k+<span class="number">3</span>] &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">24</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重要模块步骤"><a href="#重要模块步骤" class="headerlink" title="重要模块步骤"></a>重要模块步骤</h3><p>循环左移s位模块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">*  @ param  x  被移数</span></span><br><span class="line"><span class="comment">*  @ param  s  左移的位数</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">rotateLeft</span><span class="params">(<span class="keyword">long</span> x, <span class="keyword">long</span> s)</span></span>&#123;</span><br><span class="line">     <span class="keyword">return</span> (x &lt;&lt; s)| (x &gt;&gt; (<span class="number">32</span> - s)) &amp; <span class="number">0xFFFFFFFL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/////////////////////////////////////////////////////////////////////</span></span><br></pre></td></tr></table></figure><p>四个生成函数和四个迭代函数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*四重循环使用的函数*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* @param a b c d 为四个缓冲区的内容</span></span><br><span class="line"><span class="comment">*        k 为X[k]</span></span><br><span class="line"><span class="comment">*        s 为移位数目</span></span><br><span class="line"><span class="comment">*        i为 T[j]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">F_Func</span><span class="params">(<span class="keyword">long</span> a,<span class="keyword">long</span> b,<span class="keyword">long</span> c,<span class="keyword">long</span> d,<span class="keyword">long</span> k,<span class="keyword">long</span> s, <span class="keyword">long</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (b + rotate_left(((a + ((b &amp; c) | ((~b) &amp; d)) + k + i) &amp; <span class="number">0xFFFFFFFFL</span>),s)) &amp; <span class="number">0xFFFFFFFFL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">G_Func</span><span class="params">(<span class="keyword">long</span> a,<span class="keyword">long</span> b,<span class="keyword">long</span> c,<span class="keyword">long</span> d,<span class="keyword">long</span> k,<span class="keyword">long</span> s, <span class="keyword">long</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (b + rotate_left(((a + ((b &amp; d) | (c &amp; (~d))) + k + i) &amp; <span class="number">0xFFFFFFFFL</span>),s)) &amp; <span class="number">0xFFFFFFFFL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">H_Func</span><span class="params">(<span class="keyword">long</span> a,<span class="keyword">long</span> b,<span class="keyword">long</span> c,<span class="keyword">long</span> d,<span class="keyword">long</span> k,<span class="keyword">long</span> s, <span class="keyword">long</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (b + rotate_left(((a + (b ^ c ^ d) + k + i) &amp; <span class="number">0xFFFFFFFFL</span>) , s)) &amp; <span class="number">0xFFFFFFFFL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">I_Func</span><span class="params">(<span class="keyword">long</span> a,<span class="keyword">long</span> b,<span class="keyword">long</span> c,<span class="keyword">long</span> d,<span class="keyword">long</span> k,<span class="keyword">long</span> s, <span class="keyword">long</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (b + rotate_left(((a + (c ^ (b | (~d))) + k + i) &amp; <span class="number">0xFFFFFFFFL</span>), s)) &amp; <span class="number">0xFFFFFFFFL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*将小端形式转为大端形式*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">encode</span><span class="params">(<span class="keyword">long</span> t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((t &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xff</span>) | ((t &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>) &lt;&lt; <span class="number">8</span> | ((t &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>) &lt;&lt; <span class="number">16</span> | (t &amp; <span class="number">0xff</span>) &lt;&lt; <span class="number">24</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将数据从小端转为大端的形式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*将小端形式转为大端形式*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">encode</span><span class="params">(<span class="keyword">long</span> t)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ((t &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xff</span>) | ((t &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>) &lt;&lt; <span class="number">8</span> | ((t &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>) &lt;&lt; <span class="number">16</span> | (t &amp; <span class="number">0xff</span>) &lt;&lt; <span class="number">24</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>获取填充的位数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">String inputString = <span class="string">"test1.txt"</span>;       <span class="comment">// 输入的文件名</span></span><br><span class="line">   File file = <span class="keyword">new</span> File(inputString);  <span class="comment">// 文件操作对象</span></span><br><span class="line">   length = file.length();             <span class="comment">// 获取文件的字节长度1</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 获取填充的位数</span></span><br><span class="line">   <span class="keyword">if</span>(length % <span class="number">64</span> &lt; <span class="number">56</span>)&#123;</span><br><span class="line">       paddingLength = (<span class="keyword">int</span>)(<span class="number">56</span> - length % <span class="number">64</span>); <span class="comment">// 字节</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span>(length % <span class="number">64</span> == <span class="number">56</span>)&#123;</span><br><span class="line">       paddingLength = <span class="number">64</span>;   <span class="comment">// 64 字节</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span>(length % <span class="number">64</span> &gt; <span class="number">56</span>)&#123;</span><br><span class="line">       paddingLength = (<span class="keyword">int</span>) (<span class="number">64</span> - (length % <span class="number">64</span> - <span class="number">56</span>));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>将消息分块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该循环的作用是：对全部原始消息进行分块，每块大小为64个字节，共512位</span></span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (length + paddingLength + <span class="number">8</span>)/<span class="number">64</span>; i++)&#123;</span><br><span class="line">            ...</span><br></pre></td></tr></table></figure><p>进入4次循环，共64次迭代</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 进入 4 轮循环，每次循环16次迭代，一共64次迭代</span></span><br><span class="line"> <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">64</span>; j ++)&#123;</span><br><span class="line">     <span class="keyword">int</span> div16 = j / <span class="number">16</span>;  <span class="comment">// div16 代表每次循环的迭代次数</span></span><br></pre></td></tr></table></figure><p>每次循环的迭代过程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (div16)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">           <span class="comment">// 第一轮循环，16次迭代</span></span><br><span class="line">           j_factor = j ;</span><br><span class="line">           k_index = j_factor;</span><br><span class="line">           <span class="comment">// 分四个A、B、C、D 缓冲区处理</span></span><br><span class="line">           <span class="keyword">if</span>(j % <span class="number">4</span> == <span class="number">0</span>)</span><br><span class="line">           &#123;</span><br><span class="line">              A = F_Func(A,B,C,D,X[k_index],<span class="number">7</span>,T[j]);</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(j % <span class="number">4</span> == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                D = F_Func(D,A,B,C,X[k_index],<span class="number">12</span>,T[j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(j % <span class="number">4</span> == <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                C = F_Func(C,D,A,B,X[k_index],<span class="number">17</span>,T[j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(j % <span class="number">4</span> == <span class="number">3</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                B = F_Func(B,C,D,A,X[k_index],<span class="number">22</span>,T[j]);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>原寄存器内容与4重循环后的寄存器内容相加，得到下一轮压缩的寄存器值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A = (A + tmpA) &amp; <span class="number">0xFFFFFFFFL</span>;</span><br><span class="line">B = (B + tmpB) &amp; <span class="number">0xFFFFFFFFL</span>;</span><br><span class="line">C = (C + tmpC) &amp; <span class="number">0xFFFFFFFFL</span>;</span><br><span class="line">D = (D + tmpD) &amp; <span class="number">0xFFFFFFFFL</span>;</span><br></pre></td></tr></table></figure><p>全部消息压缩后，输出结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">System.out.format(<span class="string">"小端形式MD5：%x %x %x %x\n"</span>, A,B,C,D);</span><br><span class="line">A = encode(A);   <span class="comment">// 转为大端形式</span></span><br><span class="line">B = encode(B);</span><br><span class="line">C = encode(C);</span><br><span class="line">D = encode(D);</span><br><span class="line">System.out.format(<span class="string">"大端形式MD5：%x %x %x %x\n"</span>,A,B,C,D);</span><br></pre></td></tr></table></figure><p>使用java自带的MD5函数进行比对验证。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*调用java自带md5函数 输出md5值*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getMd5ForFile</span><span class="params">(String fileName)</span> <span class="keyword">throws</span> IOException, NoSuchAlgorithmException </span>&#123;</span><br><span class="line">        FileInputStream in = <span class="keyword">null</span>;</span><br><span class="line">        File file = <span class="keyword">new</span> File(fileName);</span><br><span class="line">        in = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">        MessageDigest md5 = MessageDigest.getInstance(<span class="string">"MD5"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] cache = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2048</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = in.read(cache)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            md5.update(cache, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        in.close();</span><br><span class="line">        BigInteger bigInt = <span class="keyword">new</span> BigInteger(<span class="number">1</span>, md5.digest());</span><br><span class="line">        <span class="keyword">return</span> bigInt.toString(<span class="number">16</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、实验环境说明&quot;&gt;&lt;a href=&quot;#一、实验环境说明&quot; class=&quot;headerlink&quot; title=&quot;一、实验环境说明&quot;&gt;&lt;/a&gt;一、实验环境说明&lt;/h2&gt;&lt;p&gt;操作系统：window10&lt;/p&gt;
&lt;p&gt;编程语言：Java （JDK版本 11.0.1）&lt;
      
    
    </summary>
    
    
      <category term="信息安全" scheme="https://joshuaqyh.github.io/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
      <category term="algorithm" scheme="https://joshuaqyh.github.io/tags/algorithm/"/>
    
      <category term="Java" scheme="https://joshuaqyh.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>C++实现二叉树各种遍历</title>
    <link href="https://joshuaqyh.github.io/2018/12/07/C-%E5%AE%9E%E7%8E%B0%E4%BA%8C%E5%8F%89%E6%A0%91%E5%90%84%E7%A7%8D%E9%81%8D%E5%8E%86/"/>
    <id>https://joshuaqyh.github.io/2018/12/07/C-实现二叉树各种遍历/</id>
    <published>2018-12-06T16:08:04.000Z</published>
    <updated>2018-12-07T02:01:01.285Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文主要使用C++ 实现二叉树的遍历：</p><ol><li>前序，中序，后序遍历的递归和非递归实现</li><li>层序遍历</li><li>深度优先遍历</li></ol><hr><h3 id="结点数据结构"><a href="#结点数据结构" class="headerlink" title="结点数据结构"></a>结点数据结构</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Definition for binary tree</span></span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> &#123;</span></span><br><span class="line">     <span class="keyword">int</span> val;</span><br><span class="line">     TreeNode *left;</span><br><span class="line">     TreeNode *right;</span><br><span class="line">     TreeNode(<span class="keyword">int</span> x) : val(x), left(<span class="literal">NULL</span>), right(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h2><h3 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; root-&gt;val &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        preOrder(root-&gt;left);</span><br><span class="line">        preOrder(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="非递归实现"><a href="#非递归实现" class="headerlink" title="非递归实现"></a>非递归实现</h3><p>思路：</p><ol><li>初始化一个栈用于存储结点指针</li><li>若结点非空，访问其值，然后将该结点push入栈。并将左孩子置为当前结点。</li><li>若结点为空，那么将当前结点置为栈顶结点的右孩子，并弹出栈顶结点。</li><li>重复2，3，直到栈为空或者无结点。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">stack</span>&lt;TreeNode*&gt; S;</span><br><span class="line">    TreeNode* node = root;</span><br><span class="line">    <span class="keyword">while</span>(node!=<span class="literal">NULL</span> || !S.empty())&#123;</span><br><span class="line">    <span class="keyword">if</span>(node != <span class="literal">NULL</span>)&#125;&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; node-&gt;val &lt;&lt; <span class="string">" "</span>; </span><br><span class="line">  S.push(node);</span><br><span class="line">          node = node-&gt;left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        node = S.top()-&gt;right;</span><br><span class="line">             S.pop();</span><br><span class="line">    &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h2><h3 id="递归实现-1"><a href="#递归实现-1" class="headerlink" title="递归实现"></a>递归实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        preOrder(root-&gt;left);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; root-&gt;val &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        preOrder(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="非递归实现-1"><a href="#非递归实现-1" class="headerlink" title="非递归实现"></a>非递归实现</h3><p>思想同前序遍历一致，利用栈来实现，唯一不同之处就是访问结点的顺序是在结点出栈的时候才进行。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">stack</span>&lt;TreeNode*&gt; S;</span><br><span class="line">    TreeNode* node = root;</span><br><span class="line">    <span class="keyword">while</span>(node!=<span class="literal">NULL</span> || !S.empty())&#123;</span><br><span class="line">    <span class="keyword">if</span>(node != <span class="literal">NULL</span>)&#125;&#123;</span><br><span class="line">  S.push(node);</span><br><span class="line">          node = node-&gt;left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; node-&gt;val &lt;&lt; <span class="string">" "</span>; </span><br><span class="line">        node = S.top()-&gt;right;</span><br><span class="line">             S.pop();</span><br><span class="line">    &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后续遍历"><a href="#后续遍历" class="headerlink" title="后续遍历"></a>后续遍历</h2><h3 id="递归实现-2"><a href="#递归实现-2" class="headerlink" title="递归实现"></a>递归实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        preOrder(root-&gt;left);</span><br><span class="line">        preOrder(root-&gt;right);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; root-&gt;val &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="非递归实现-2"><a href="#非递归实现-2" class="headerlink" title="非递归实现"></a>非递归实现</h3><p>难！！！</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//后序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrderWithoutRecursion</span><span class="params">(BTNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">stack</span>&lt;BTNode*&gt; s;</span><br><span class="line"><span class="comment">//pCur:当前访问节点，pLastVisit:上次访问节点</span></span><br><span class="line">BTNode* pCur, *pLastVisit;</span><br><span class="line"><span class="comment">//pCur = root;</span></span><br><span class="line">pCur = root;</span><br><span class="line">pLastVisit = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//先把pCur移动到左子树最下边</span></span><br><span class="line"><span class="keyword">while</span> (pCur)</span><br><span class="line">&#123;</span><br><span class="line">s.push(pCur);</span><br><span class="line">pCur = pCur-&gt;lchild;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!s.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//走到这里，pCur都是空，并已经遍历到左子树底端(看成扩充二叉树，则空，亦是某棵树的左孩子)</span></span><br><span class="line">pCur = s.top();</span><br><span class="line">s.pop();</span><br><span class="line"><span class="comment">//一个根节点被访问的前提是：无右子树或右子树已被访问过</span></span><br><span class="line"><span class="keyword">if</span> (pCur-&gt;rchild == <span class="literal">NULL</span> || pCur-&gt;rchild == pLastVisit)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; setw(<span class="number">4</span>) &lt;&lt; pCur-&gt;data;</span><br><span class="line"><span class="comment">//修改最近被访问的节点</span></span><br><span class="line">pLastVisit = pCur;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*这里的else语句可换成带条件的else if:</span></span><br><span class="line"><span class="comment">else if (pCur-&gt;lchild == pLastVisit)//若左子树刚被访问过，则需先进入右子树(根节点需再次入栈)</span></span><br><span class="line"><span class="comment">因为：上面的条件没通过就一定是下面的条件满足。仔细想想！</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//根节点再次入栈</span></span><br><span class="line">s.push(pCur);</span><br><span class="line"><span class="comment">//进入右子树，且可肯定右子树一定不为空</span></span><br><span class="line">pCur = pCur-&gt;rchild;</span><br><span class="line"><span class="keyword">while</span> (pCur)</span><br><span class="line">&#123;</span><br><span class="line">s.push(pCur);</span><br><span class="line">pCur = pCur-&gt;lchild;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">--------------------- </span><br><span class="line">作者：苏叔叔 </span><br><span class="line">来源：CSDN </span><br><span class="line">原文：https:<span class="comment">//blog.csdn.net/zhangxiangDavaid/article/details/37115355 </span></span><br><span class="line">版权声明：本文为博主原创文章，转载请附上博文链接！</span><br></pre></td></tr></table></figure><h2 id="层次优先遍历"><a href="#层次优先遍历" class="headerlink" title="层次优先遍历"></a>层次优先遍历</h2><p>使用队列来实现，每访问一个结点就将该结点左右孩子（如果有）加入队列末尾，然后将结点从队头弹出。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">levelOrder</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">queue</span>&lt;TreeNode*&gt; Q;</span><br><span class="line">    Q.push(root);</span><br><span class="line">    <span class="keyword">while</span>(!Q.empty())&#123;</span><br><span class="line">        TreeNpde* node = Q.front();</span><br><span class="line">        Q.pop();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; node-&gt;val &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        <span class="keyword">if</span>(node-&gt;left != <span class="literal">NULL</span>)</span><br><span class="line">            Q.push(node-&gt;left);</span><br><span class="line">        <span class="keyword">if</span>(node-&gt;right != <span class="literal">NULL</span>)</span><br><span class="line">            Q.push(node-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="深度优先遍历"><a href="#深度优先遍历" class="headerlink" title="深度优先遍历"></a>深度优先遍历</h2><p>使用栈来实现，原理同前序，中序遍历。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">depthOrder</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; S;</span><br><span class="line">    S.push(root);</span><br><span class="line">    <span class="keyword">while</span>(!S.empty())&#123;</span><br><span class="line">       TreeNode* node = S.pop();</span><br><span class="line">       <span class="built_in">cout</span> &lt;&lt; node-&gt;val &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        <span class="keyword">if</span>(node-&gt;left != <span class="literal">NULL</span>)</span><br><span class="line">            S.push(node-&gt;left);</span><br><span class="line">        <span class="keyword">if</span>(node-&gt;right != <span class="literal">NULL</span>)</span><br><span class="line">            S.push(node-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本文主要使用C++ 实现二叉树的遍历：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;前序，中序，后序遍历的递归和非递归实现&lt;/li&gt;
&lt;li&gt;层序遍历&lt;/li
      
    
    </summary>
    
    
      <category term="C++" scheme="https://joshuaqyh.github.io/tags/C/"/>
    
      <category term="algorithm" scheme="https://joshuaqyh.github.io/tags/algorithm/"/>
    
      <category term="数据结构" scheme="https://joshuaqyh.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="二叉树" scheme="https://joshuaqyh.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode | 深度搜索和广度搜索训练</title>
    <link href="https://joshuaqyh.github.io/2018/12/06/LeetCode-%E6%B7%B1%E5%BA%A6%E6%90%9C%E7%B4%A2%E5%92%8C%E5%B9%BF%E5%BA%A6%E6%90%9C%E7%B4%A2%E8%AE%AD%E7%BB%83/"/>
    <id>https://joshuaqyh.github.io/2018/12/06/LeetCode-深度搜索和广度搜索训练/</id>
    <published>2018-12-06T08:46:15.000Z</published>
    <updated>2018-12-06T08:46:15.276Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Leetcode | Practice 1</title>
    <link href="https://joshuaqyh.github.io/2018/12/06/Leetcode-Pratice-1/"/>
    <id>https://joshuaqyh.github.io/2018/12/06/Leetcode-Pratice-1/</id>
    <published>2018-12-06T08:26:17.000Z</published>
    <updated>2018-12-06T08:45:34.436Z</updated>
    
    <content type="html"><![CDATA[<p>以下问题，主要是练习递归的使用，体会递归的思想。</p><h2 id="Problem-654-最大数二叉树"><a href="#Problem-654-最大数二叉树" class="headerlink" title="Problem 654 最大数二叉树"></a>Problem 654 最大数二叉树</h2><p><code>Medium</code> <code>C++</code><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************</span></span><br><span class="line"><span class="comment">Given an integer array with no duplicates. </span></span><br><span class="line"><span class="comment">A maximum tree building on this array is defined as follow:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">The root is the maximum number in the array.</span></span><br><span class="line"><span class="comment">The left subtree is the maximum tree constructed </span></span><br><span class="line"><span class="comment">from left part subarray divided by the maximum number.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">The right subtree is the maximum tree constructed </span></span><br><span class="line"><span class="comment">from right part subarray divided by the maximum number.</span></span><br><span class="line"><span class="comment">Construct the maximum tree by the given array and output the root node of this tree.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Example 1:</span></span><br><span class="line"><span class="comment">Input: [3,2,1,6,0,5]</span></span><br><span class="line"><span class="comment">Output: return the tree root node representing the following tree:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  6</span></span><br><span class="line"><span class="comment">/   \</span></span><br><span class="line"><span class="comment">   3     5</span></span><br><span class="line"><span class="comment">\    /</span></span><br><span class="line"><span class="comment"> 2  0</span></span><br><span class="line"><span class="comment">   \</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">Note:</span></span><br><span class="line"><span class="comment">The size of the given array will be in the range [1,1000].</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">***********************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line">TreeNode *left;</span><br><span class="line">TreeNode *right;</span><br><span class="line">TreeNode(<span class="keyword">int</span> x) : val(x), left(<span class="literal">NULL</span>), right(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// method 1 使用迭代器 快了一点</span></span><br><span class="line"><span class="function">TreeNode* <span class="title">constructMaximumBinaryTree</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (nums.empty()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">auto</span> it = max_element(nums.begin(), nums.end());</span><br><span class="line">TreeNode* root = <span class="keyword">new</span> TreeNode(*it);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; left(nums.begin(), it);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; right(next(it), nums.end());</span><br><span class="line">root-&gt;left = constructMaximumBinaryTree(left);</span><br><span class="line">root-&gt;right = constructMaximumBinaryTree(right);</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// method 2  性能差</span></span><br><span class="line"><span class="function">TreeNode* <span class="title">construct</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> build(nums, <span class="number">0</span>, nums.size());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">TreeNode* <span class="title">build</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; num, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (start == end) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> maxIndex = findMax(num, start, end);</span><br><span class="line">TreeNode* root = <span class="keyword">new</span> TreeNode(num[maxIndex]);</span><br><span class="line">root-&gt;left = build(num, start, maxIndex);</span><br><span class="line">root-&gt;right = build(num, maxIndex + <span class="number">1</span>, end);</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findMax</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; num, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> index = start;</span><br><span class="line"><span class="keyword">int</span> max = num[start];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; end; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (num[i] &gt; max) &#123;</span><br><span class="line">index = i;</span><br><span class="line">max = num[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">总结：</span><br><span class="line"><span class="number">1.</span> 使用迭代器速度快了一些</span><br><span class="line"><span class="number">2.</span> 递归循环查找速度显然慢了</span><br><span class="line"><span class="number">3.</span> 非递归版本速度更快，可利用栈实现</span><br><span class="line"></span><br><span class="line">以下是 O(n)实现方式（摘自大佬）</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">constructMaximumBinaryTree</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;TreeNode*&gt; stk;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            TreeNode* cur = <span class="keyword">new</span> TreeNode(nums[i]);</span><br><span class="line">            <span class="keyword">while</span> (!stk.empty() &amp;&amp; stk.back()-&gt;val &lt; nums[i])</span><br><span class="line">            &#123;</span><br><span class="line">                cur-&gt;left = stk.back();</span><br><span class="line">                stk.pop_back();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!stk.empty())</span><br><span class="line">                stk.back()-&gt;right = cur;</span><br><span class="line">            stk.push_back(cur);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stk.front();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="递归统计二叉树结点在某区间内的和"><a href="#递归统计二叉树结点在某区间内的和" class="headerlink" title="递归统计二叉树结点在某区间内的和"></a>递归统计二叉树结点在某区间内的和</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************************</span></span><br><span class="line"><span class="comment">Given the root node of a binary search tree, </span></span><br><span class="line"><span class="comment">return the sum of values of all nodes with value </span></span><br><span class="line"><span class="comment">between L and R (inclusive).</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">The binary search tree is guaranteed to have unique values.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Example 1:</span></span><br><span class="line"><span class="comment">Input: root = [10,5,15,3,7,null,18], L = 7, R = 15</span></span><br><span class="line"><span class="comment">Output: 32</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Example 2:</span></span><br><span class="line"><span class="comment">Input: root = [10,5,15,3,7,13,18,1,null,6], L = 6, R = 10</span></span><br><span class="line"><span class="comment">Output: 23</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Note:</span></span><br><span class="line"><span class="comment">The number of nodes in the tree is at most 10000.</span></span><br><span class="line"><span class="comment">The final answer is guaranteed to be less than 2^31.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*******************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line">TreeNode *left;</span><br><span class="line">TreeNode *right;</span><br><span class="line">TreeNode(<span class="keyword">int</span> x) : val(x), left(<span class="literal">NULL</span>), right(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rangeSumBST</span><span class="params">(TreeNode* root, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">tranverse(root, L, R); <span class="comment">// 递归统计</span></span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tranverse</span><span class="params">(TreeNode* root, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (root-&gt;val &lt;= R &amp;&amp; root-&gt;val &gt;= L) &#123;</span><br><span class="line">sum += root-&gt;val;</span><br><span class="line">&#125;</span><br><span class="line">tranverse(root-&gt;left, L, R);</span><br><span class="line">tranverse(root-&gt;right, L, R);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="简单二叉树剪枝"><a href="#简单二叉树剪枝" class="headerlink" title="简单二叉树剪枝"></a>简单二叉树剪枝</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Question:</span></span><br><span class="line"><span class="comment">We are given the head node root of a binary tree,</span></span><br><span class="line"><span class="comment">where additionally every node's value is either a 0 or a 1.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Return the same tree where every subtree (of the </span></span><br><span class="line"><span class="comment">given tree) not containing a 1 has been removed.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">(Recall that the subtree of a node X is X, plus </span></span><br><span class="line"><span class="comment">every node that is a descendant of X.)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Author: qiuyh</span></span><br><span class="line"><span class="comment">Date: 18/09/16</span></span><br><span class="line"><span class="comment">描述：一个二叉树，节点值为0或1，我们要对一棵</span></span><br><span class="line"><span class="comment">给定的二叉树剪枝，将其子树的节点值全为0的去除掉</span></span><br><span class="line"><span class="comment">思路：利用递归实现，将每一个节点视为根节点，</span></span><br><span class="line"><span class="comment">递归判断是否全为0，为0则该点置为null</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line">TreeNode *left;</span><br><span class="line">TreeNode *right;</span><br><span class="line">TreeNode(<span class="keyword">int</span> x) : val(x), left(<span class="literal">NULL</span>), right(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">TreeNode* resultNode;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">TreeNode * <span class="title">pruneTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 找到空节点，就返回</span></span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> root;</span><br><span class="line"><span class="comment">// 继续下溯，若返回值可能为空或者不为空</span></span><br><span class="line">root-&gt;left = pruneTree(root-&gt;left);</span><br><span class="line">root-&gt;right = pruneTree(root-&gt;right);</span><br><span class="line"><span class="comment">// 左右节点都为空而且值为0，则返回一个空指针</span></span><br><span class="line"><span class="keyword">if</span> (root-&gt;left == <span class="literal">NULL</span> &amp;&amp; root-&gt;right == <span class="literal">NULL</span> &amp;&amp; root-&gt;val == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 最后返回剪枝后的节点</span></span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="矩阵递归搜索"><a href="#矩阵递归搜索" class="headerlink" title="矩阵递归搜索"></a>矩阵递归搜索</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Question:An image is represented by a 2-D array of integers, </span></span><br><span class="line"><span class="comment">each integer representing the pixel value of the image </span></span><br><span class="line"><span class="comment">(from 0 to 65535).</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Given a coordinate (sr, sc) representing the </span></span><br><span class="line"><span class="comment">starting pixel (row and column) of the flood fill,</span></span><br><span class="line"><span class="comment">and a pixel value newColor, "flood fill" the image.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">To perform a "flood fill", consider the starting </span></span><br><span class="line"><span class="comment">pixel, plus any pixels connected 4-directionally to </span></span><br><span class="line"><span class="comment">the starting pixel of the same color as the starting pixel, </span></span><br><span class="line"><span class="comment">plus any pixels connected 4-directionally to those </span></span><br><span class="line"><span class="comment">pixels (also with the same color as the starting pixel), </span></span><br><span class="line"><span class="comment">and so on. Replace the color of all </span></span><br><span class="line"><span class="comment">of the aforementioned pixels with the newColor.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">At the end, return the modified image.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Author:qiuyh</span></span><br><span class="line"><span class="comment">Date: 18/09/16</span></span><br><span class="line"><span class="comment">描述：给定一个二维矩阵，和一个起点和一个颜色，</span></span><br><span class="line"><span class="comment">该起点会向相邻水平竖直四个方向的点进行染色，</span></span><br><span class="line"><span class="comment">  然后被染色的点成为新的点</span></span><br><span class="line"><span class="comment">思路：1.从起点开始，进行行列扫描，遇到相邻且颜色相同的点，</span></span><br><span class="line"><span class="comment">继续加入起点，然后继续行列扫描， 时间复杂度大，不建议</span></span><br><span class="line"><span class="comment"> 2. </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; floodFill(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; image, <span class="keyword">int</span> sr, <span class="keyword">int</span> sc, <span class="keyword">int</span> newColor) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (image[sr][sc] == newColor) <span class="keyword">return</span> image;</span><br><span class="line"><span class="keyword">int</span> oldColor = image[sr][sc];</span><br><span class="line">image[sr][sc] = newColor;</span><br><span class="line"><span class="keyword">if</span> (sc + <span class="number">1</span> &lt; image[sr].size() &amp;&amp; oldColor == image[sr][sc + <span class="number">1</span>]) &#123;</span><br><span class="line">floodFill(image, sr, sc + <span class="number">1</span>, newColor);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (sc - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; oldColor == image[sr][sc - <span class="number">1</span>]) &#123;</span><br><span class="line">floodFill(image, sr, sc - <span class="number">1</span>, newColor);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (sr + <span class="number">1</span> &lt; image.size() &amp;&amp; oldColor == image[sr + <span class="number">1</span>][sc]) &#123;</span><br><span class="line">floodFill(image, sr + <span class="number">1</span>, sc, newColor);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (sr - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; oldColor == image[sr - <span class="number">1</span>][sc]) &#123;</span><br><span class="line">floodFill(image, sr - <span class="number">1</span>, sc, newColor);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> image;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>递归的思想和步骤：</p><ol><li>递归就是找到重复相似的步骤，重复调用同一函数实现。</li><li>需要找到递归的终结条件。</li><li>明确多重递归之间的参数变量关系。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;以下问题，主要是练习递归的使用，体会递归的思想。&lt;/p&gt;
&lt;h2 id=&quot;Problem-654-最大数二叉树&quot;&gt;&lt;a href=&quot;#Problem-654-最大数二叉树&quot; class=&quot;headerlink&quot; title=&quot;Problem 654 最大数二叉树&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="C++" scheme="https://joshuaqyh.github.io/tags/C/"/>
    
      <category term="algorithm" scheme="https://joshuaqyh.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>消息认证和哈希算法</title>
    <link href="https://joshuaqyh.github.io/2018/12/03/%E6%B6%88%E6%81%AF%E8%AE%A4%E8%AF%81%E5%92%8C%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0/"/>
    <id>https://joshuaqyh.github.io/2018/12/03/消息认证和哈希函数/</id>
    <published>2018-12-03T09:59:20.640Z</published>
    <updated>2018-12-03T09:59:20.855Z</updated>
    
    <content type="html"><![CDATA[<h2 id="消息认证概述"><a href="#消息认证概述" class="headerlink" title="消息认证概述"></a>消息认证概述</h2><p>网络通信针对消息内容的攻击方法：</p><ol><li>伪造消息</li><li>篡改消息内容</li><li>改变消息顺序</li><li>消息重放或者延迟</li></ol><p>消息认证过程：</p><ol><li>接收者确信消息未被改变</li><li>接收者确信消息来自所生成的发送者</li><li>消息中含有序列号，保证正确的消息顺序</li></ol><p>消息认证的三种方式：</p><ol><li><p>消息认证加密。对消息加密，以密文作为消息的认证标识。</p></li><li><p>消息认证码MAC。使用一个公开函数，加上密钥，为消息产生一个数据块，作为消息的认证标识并附加到消息中一起传输。</p></li><li><p>哈希方法。使用一个公开函数，将消息映射到一个固定长度的散列值，并作为消息认证标识附加到消息中一起传输。</p></li><li><p>数字签名。基于非对称密码技术的数字签名将签名与被签文件绑定，提供了不可依赖不可伪造，容易验证的功能。</p><p>​</p></li></ol><h2 id="MAC-消息认证码"><a href="#MAC-消息认证码" class="headerlink" title="MAC 消息认证码"></a>MAC 消息认证码</h2><p>消息验证码有三部分算法（G：密钥生成算法；S：签名算法；V：消息验证算法）</p><ul><li>基本结构：</li></ul><p>MAC方法双方使用一个共享的密钥，为目标消息生成一个固定的数据块，并加入到消息中，该数据块被称为消息认证码，或者是密码校验和。</p><p>MAC函数类似于加密函数，但<strong>不需要</strong> 可逆性，因此收到攻击的弱点在数学上比加密算法要少。</p><ul><li>使用MAC的理由：<ul><li>主要提供真实性。</li><li>与加密算法比较，代价算法较小。</li><li>认证和保密函数分离较为灵活</li><li>很多信息需要真实性而不是保密性。</li></ul></li><li>模型<ul><li>只用于消息认证的MAC模型</li><li>用于与明文相关的消息认证和保密性的MAC模型</li><li>用于与密文相关的消息认证和保密性的MAC模型</li></ul></li><li>与数字签名都用于消息认证。MAC是通讯双方共享一个私有密钥。而数字签名则是利用公钥密码技术实现。</li></ul><p>##HASH</p><p>输入变长的消息，经过hash输出定常的散列值。</p><h3 id="哈希函数的一些基本要求"><a href="#哈希函数的一些基本要求" class="headerlink" title="哈希函数的一些基本要求"></a>哈希函数的一些基本要求</h3><ol><li>能够映射任意长的分组数据</li><li>产生定长的哈希结果</li><li>可计算，易于计算</li><li>单向性</li><li>抗碰撞（强弱）</li></ol><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li><p>按规避碰撞能力分：</p><ul><li>强无碰撞</li><li>弱无碰撞</li></ul></li><li><p>按是否需要密钥分：</p><ul><li><p>不带密钥的hash</p></li><li><p>带密钥的hash</p><p>​</p></li></ul></li></ul><p>生日攻击理论：计算哈希碰撞的概率和计算量之间的关系</p><h3 id="hash函数通用模型"><a href="#hash函数通用模型" class="headerlink" title="hash函数通用模型"></a>hash函数通用模型</h3><p>由merkle提出的模型结构:</p><ol><li>将消息M划分为一些固定长度的块Yi</li><li>最后一块padding并使其包含消息M的长度</li><li>设定初始值CV0</li><li>采用压缩函数f，CVi = f（CVi-1， Yi-1）</li><li>最后一个CVi为hash值。</li></ol><h2 id="MD5-算法"><a href="#MD5-算法" class="headerlink" title="MD5 算法"></a>MD5 算法</h2><p>信息摘要5算法。确保信息传输的完整性和一致性。</p><p>使用小端模式，输入不定长度信息，以512bit进行分组，生成4个32bit的数据，最后联合输出固定128bit的信息摘要。</p><p>小端模式，低字节放在低地址处。</p><h4 id="算法逻辑"><a href="#算法逻辑" class="headerlink" title="算法逻辑"></a>算法逻辑</h4><ol><li>填充<ol><li>在长度为 $K$ bits的原始消息数据尾部填充长度为 $P$ bits的标识$100…0  。$ $ 1 \le P \le 512$ ,使得填充后的消息位数为$K + P \equiv 448(mod \, 512)$。<ol><li>注意：当$K \equiv 448 (mod\,512)$时，$P = 512$。</li></ol></li><li>向上述填充好的消息尾部附加$K$值得低64位，即$(K \, mod \, 2^{64})$。最后得到一个长度位数为$K + P + 64 \equiv 0 (mod \, 512)$。</li></ol></li><li>分块<ol><li>将填充后得消息结果分割为$L$  个$512-bit$分组,记为:$Y_0, Y_1, …, Y_{L-1}$</li><li>分组结果表示为$N$个$32-bit$字记为$M_0, M_1, …, M_{N-1}, N = L×16 $ </li></ol></li><li>初始化<ol><li>初始化一个$128-bit$ 的MD缓冲区，记为$CV_q$,表示成4个$32-bit$寄存器$(A,B,C,D)$； $CV_0 = IV$。迭代在MD缓冲区进行，最后一步的$128-bit$输出即为算法的结果。</li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;消息认证概述&quot;&gt;&lt;a href=&quot;#消息认证概述&quot; class=&quot;headerlink&quot; title=&quot;消息认证概述&quot;&gt;&lt;/a&gt;消息认证概述&lt;/h2&gt;&lt;p&gt;网络通信针对消息内容的攻击方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;伪造消息&lt;/li&gt;
&lt;li&gt;篡改消息内容&lt;/li
      
    
    </summary>
    
    
      <category term="信息安全" scheme="https://joshuaqyh.github.io/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
      <category term="加密技术" scheme="https://joshuaqyh.github.io/tags/%E5%8A%A0%E5%AF%86%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>聚类算法 | K-means and mean-shift</title>
    <link href="https://joshuaqyh.github.io/2018/12/03/%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95-K-means-and-mean-shift/"/>
    <id>https://joshuaqyh.github.io/2018/12/03/聚类算法-K-means-and-mean-shift/</id>
    <published>2018-12-03T04:51:17.000Z</published>
    <updated>2018-12-03T04:52:30.366Z</updated>
    
    <content type="html"><![CDATA[<h1 id="聚类算法"><a href="#聚类算法" class="headerlink" title="聚类算法"></a>聚类算法</h1><h2 id="K-means-算法"><a href="#K-means-算法" class="headerlink" title="K-means 算法"></a>K-means 算法</h2><h3 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h3><ol><li>随机确定好 k个聚类中心</li><li>根据离聚类中心最近的原则给样本点分类</li><li>根据分类后的样本点集合进行平均重新 计算聚类中心。返回2；</li><li>存在聚类中心差异小的时候，结束计算。</li></ol><h3 id="K值的挑选"><a href="#K值的挑选" class="headerlink" title="K值的挑选"></a>K值的挑选</h3><ul><li>cost function ： 分类后的样本点和聚类中心的方差作为代价函数。</li><li>K值变大，cost function 变小</li></ul><p>Elbow method 可以确定变化的骤变点。该点是 K-cost function图像上曲率最大的点。</p><h3 id="使用K-means进行图像分割"><a href="#使用K-means进行图像分割" class="headerlink" title="使用K-means进行图像分割"></a>使用K-means进行图像分割</h3><ol><li>特征聚类</li><li>亮度聚类</li><li>颜色空间聚类</li></ol><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><ol><li>类密集且区别明显的时候，分类效果好</li><li>强的一致性</li><li>算法复杂度O(NMt)，处理大数据集是高效的</li></ol><h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h3><ol><li>初始化中心的选择影响收敛</li><li>需要预先给出k值</li><li>噪声敏感</li><li>收敛到局部最优解，可能效果感人。。</li></ol><h2 id="Mean-shift"><a href="#Mean-shift" class="headerlink" title="Mean shift"></a>Mean shift</h2><p>在数据空间中，确定一个圆区域，计算圆内数据质心，然后圆心漂移到质心，重新在圆内计算质心，直到圆心等于质心。即收敛，达到局部最小值。</p><p>另外一种表述，在窗口中计算均值漂移向量，变换密度窗口，重复计算变换直到收敛。</p><ul><li>不受噪声敏感(除三维颜色，还引入位置坐标信息)</li><li>参数单一 </li><li>维度越高，聚类越慢</li><li>重复计算(染色标记降低冗余)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;聚类算法&quot;&gt;&lt;a href=&quot;#聚类算法&quot; class=&quot;headerlink&quot; title=&quot;聚类算法&quot;&gt;&lt;/a&gt;聚类算法&lt;/h1&gt;&lt;h2 id=&quot;K-means-算法&quot;&gt;&lt;a href=&quot;#K-means-算法&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="机器学习" scheme="https://joshuaqyh.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="图像分割" scheme="https://joshuaqyh.github.io/tags/%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2/"/>
    
      <category term="数据挖掘" scheme="https://joshuaqyh.github.io/tags/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
    
  </entry>
  
  <entry>
    <title>认证技术</title>
    <link href="https://joshuaqyh.github.io/2018/11/28/%E9%9B%B6%E7%9F%A5%E8%AF%86%E8%AF%81%E6%98%8E/"/>
    <id>https://joshuaqyh.github.io/2018/11/28/零知识证明/</id>
    <published>2018-11-28T08:24:19.198Z</published>
    <updated>2018-11-28T08:23:44.323Z</updated>
    
    <content type="html"><![CDATA[<h2 id="零知识证明"><a href="#零知识证明" class="headerlink" title="零知识证明"></a>零知识证明</h2><h3 id="Fiat-Shamir-算法"><a href="#Fiat-Shamir-算法" class="headerlink" title="Fiat-Shamir 算法"></a>Fiat-Shamir 算法</h3><ol><li>$n  = p * q。p, q$是大素数。 $n$为可信第三方机构公开，而$p, q$为私有或者销毁</li><li>$s: Alice$的密钥, $0 &lt; s &lt; n$。 Alice 必须证明其知晓密钥$s$,而不需要向任何人出示$s$。</li><li>$v:Alice$的公钥，满足$v \equiv s^2 \, mod \, n$ 。<ol><li>Alice 计算并得出v展示给Bob</li><li>无法从v推导出s。</li></ol></li><li>$r: Alice$随机挑选的一个数字，满足$0 &lt; r &lt; n-1$。</li><li>$x : x = r^2 \, mod \, n$ 作为一个Alice计算后的证据x(evidence)，并发送给Bob。</li><li>$c: $ Bob随机挑选的一个数c(challenger)，范围是{1， 0}。</li><li>$y : y = rs^c \, mod \, n$ 由$Alice$计算得到结果y（response），并发送给Bob。</li><li>Bob通过计算$y^2\, mod \,n \,\,?=  xv^c\, mode \, n$ ,如果相等，则认证完毕。</li></ol><h2 id="认证技术"><a href="#认证技术" class="headerlink" title="认证技术"></a>认证技术</h2><h4 id="X-509"><a href="#X-509" class="headerlink" title="X.509"></a>X.509</h4><p>数据协议，定义一个数据目录服务，维护一个用户信息数据库。</p><h4 id="Kerberos"><a href="#Kerberos" class="headerlink" title="Kerberos"></a>Kerberos</h4><p>认证协议，用于证明接收双方的合法性。基于C/S结构的单向认证，弱双向认证。</p><p>##认证攻击类型</p><ul><li>假冒攻击</li><li>重放攻击</li><li>强迫延时攻击</li><li>交错攻击</li><li>Oracle会话攻击</li><li>并行会话攻击</li></ul><h2 id="PKI"><a href="#PKI" class="headerlink" title="PKI"></a>PKI</h2><p>PKI 公钥基础设施，通过公开密钥技术和数字证书，来确保系统信息安全，并负责验证数字证书持有者身份的体系。<strong>绝对安全，由国家信用作为背书</strong>。</p><p>应用：VPN，安全电子邮件，web服务安全。</p><h2 id="Kerberos-1"><a href="#Kerberos-1" class="headerlink" title="Kerberos"></a>Kerberos</h2><p>Kerberos  是一种计算机网络认证协议。基于<strong>票据（tickets）</strong> 的工作原理和$Neeedham-Schroeder \, Symmetric \, key \, Protocol$，允许结点以一种安全的策略，在不安全的网络中，互相证明的身份。</p><ul><li>防窃听，防重放攻击。</li><li>C/S 模型，提供双方认证。</li><li>该协议无竞争对手！</li><li>开源，多平台可用。</li></ul><p>该协议建立在对称加密体系之上，并且需要一个<strong>可信的第三方机构</strong> 。在特定的认证情景中使用不同的对称加密算法。</p><h4 id="Neeedham-Schroeder-Symmetric-key-Protocol"><a href="#Neeedham-Schroeder-Symmetric-key-Protocol" class="headerlink" title="* $Neeedham-Schroeder \, Symmetric \, key \, Protocol$"></a>* $Neeedham-Schroeder \, Symmetric \, key \, Protocol$</h4><p>情景：</p><ol><li>TA是一个第三方的可信机构，可分发密钥中心，能够提供双方会话共享密钥。</li><li>E（K，-）是一个对称加密算法（如DES）</li><li>TA拥有一个密钥$K_{AT}$y与Alice一致，同样也有一个$K_{BT}$ 与Bob一致。</li><li>Alice使用一个随机数$r_A$ 来认证TA，并从TA获得一个会话密钥 $K_{AB}$ 。</li><li>Alice使用$K_{BT}$加密$(K_{AB}, r_B) $ 发给bob，bob使用$K_{BT}$解密。</li><li>Bob使用会话密钥$K_{AB}$ 加密$r_B $发送给Alice。</li><li>Alice使用$K_{AB}$解密得到$r_B$，并使用$K_AB$加密$r_B - 1$ 发送给Bob，Bob解密检查结果是否为$r_B -1$  。</li></ol><h3 id="架构"><a href="#架构" class="headerlink" title="* 架构"></a>* 架构</h3><p>AS = 认证服务器（认证机构）</p><p>SS = 提供服务的服务器（服务机构）</p><p>TGS= 票据许可服务器</p><p>TGT = 许可的票据</p><p>ST = 服务票据</p><h3 id="流程"><a href="#流程" class="headerlink" title="* 流程"></a>* 流程</h3><ul><li>用户客户端注册</li><li>客户端认证</li><li>客户服务认证</li><li>客户服务请求</li></ul><p>客户登录步骤：</p><ol><li>用户输入用户名和密码，构成【长期密钥】，用于加密网络传输的数据。</li><li>使用hash函数运行输入的密码，得到客户的主密钥【客户/客户 密钥】，并由客户端保管。</li><li>TGS，SS会话密钥属于短期密钥，利用主密钥实现交换和发布。</li></ol><p>客户认证步骤：</p><ol><li>客户机向AS发送一个明文消息，代表用户请求服务。</li><li>AS校验Bob是否在其数据库中，如果在，则AS返回一下两条信息给客户<ol><li>消息A，用主密钥加密的【客户/TGS】会话密钥。</li><li>消息B， 用TGS加密的票据授权票据TGT，客户网络地址，票据有效期，【客户/TGS会话密钥】。</li></ol></li><li>客户机收到A，B，使用主密钥解密A 得到【客户/TGS 会话密钥】,消息B无法解密，因为没有TGS密钥来解密。</li></ol><p>客户服务认证步骤：</p><ol><li>申请服务时，客户机向TGS发送两条消息：<ol><li>消息C，由消息B和申请服务的ID组成。</li><li>消息D，用【客户/TGS会话密钥】加密的认证。（客户ID+时间戳组成）</li></ol></li><li>基于收到的消息C，D，TGS将从消息C中重新获取消息B，用TGS密钥解密消息B，从而得到【客户/TGS会话密钥】，TGS使用这个密钥解密消息D，成功认证，然后返回两条消息给客户机 ：<ol><li>消息E，用SS服务器加密的客户-SS服务票据ST（客户ID，客户网络地址，【客户/SS会话密钥】，票据有效期）</li><li>消息F：用【客户/TGS会话密钥】加密的【客户/SS会话密钥】。</li></ol></li></ol><p>客户服务申请步骤:</p><ol><li>基于从TGS收到的消息E，F，客户机有足够的消息向SS认证自己。客户机发送消息给SS：<ol><li>消息E，由先前步骤得到的E。</li><li>消息G：用【客户/SS会话密钥】加密的一个新的认证，包括客户ID和时间戳</li></ol></li><li>SS用自己的密钥解密消息E（票据），重新得到 【客户/SS会话密钥】，用这个会话密钥，SS解密消息G得到认证，返回确认函H给客户机，确认该身份真实，并同一向该客户提供服务。<ol><li>消息H：在客户认证中找到时间戳， +1，用【客户/SS会话密钥加密】</li></ol></li><li>客户机使用【客户/SS会话密钥】解密确认函H，并检查时间戳是否被正确地更新，如果是，客户机可以信赖该服务器，并向该服务器发送服务请求。</li><li>服务器向客户机提供所请求地服务。</li></ol><h3 id="局限性"><a href="#局限性" class="headerlink" title="*  局限性"></a>*  局限性</h3><ul><li>单点故障：中心化</li><li>时钟同步：未同步时间戳认证将会失效。</li><li>管理协议未标准化</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;零知识证明&quot;&gt;&lt;a href=&quot;#零知识证明&quot; class=&quot;headerlink&quot; title=&quot;零知识证明&quot;&gt;&lt;/a&gt;零知识证明&lt;/h2&gt;&lt;h3 id=&quot;Fiat-Shamir-算法&quot;&gt;&lt;a href=&quot;#Fiat-Shamir-算法&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="信息安全" scheme="https://joshuaqyh.github.io/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
      <category term="加密认证技术" scheme="https://joshuaqyh.github.io/tags/%E5%8A%A0%E5%AF%86%E8%AE%A4%E8%AF%81%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>python实现DES加密算法</title>
    <link href="https://joshuaqyh.github.io/2018/11/28/DES%20%E7%AE%97%E6%B3%95/"/>
    <id>https://joshuaqyh.github.io/2018/11/28/DES 算法/</id>
    <published>2018-11-28T07:08:57.541Z</published>
    <updated>2018-11-28T08:28:40.225Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、-DES算法原理概述"><a href="#一、-DES算法原理概述" class="headerlink" title="一、 DES算法原理概述"></a>一、 DES算法原理概述</h2><h3 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h3><ul><li><p>64位为一个分组，当成明文输入DES算法模型，输出同样长度64位的密文。</p></li><li><p>对称加密，加密密钥也是解密密钥，密钥定义了加密过程。</p></li><li><p>密钥构成：64位，每8位的最后一位用于奇偶校验，所以实际密钥长度为56位。</p></li><li><p>基本过程是换位和置换（根据置换矩阵）</p><p>​</p></li></ul><h3 id="算法核心概要"><a href="#算法核心概要" class="headerlink" title="算法核心概要"></a>算法核心概要</h3><ul><li><p>总体结构</p></li><li><p>Feistel轮函数</p></li><li><p>子密钥生成</p></li><li><p>解密过程</p><p>​</p></li></ul><h3 id="信息空间处理："><a href="#信息空间处理：" class="headerlink" title="信息空间处理："></a>信息空间处理：</h3><ol><li><p>原始明文消息的处理：最后的分组不足64位时，填充的字节为缺失的字节数目。</p></li><li><p>明文分组结构：$M = m_1m_2…m_{64}  \,, m_i  ∈ {0， 1}，i= 1…64 $</p></li><li><p>密文分组结构： $C = c_1c_2…c_{64}  \,, c_i  ∈ {0， 1}，i= 1…64 $</p></li><li><p>密钥结构:$K = k_1k_2…k_{64}  \,, k_i  ∈ {0， 1}，i= 1…64 $</p><p>​</p></li></ol><h3 id="加密过程："><a href="#加密过程：" class="headerlink" title="加密过程："></a>加密过程：</h3><p>64位原始密文M经IP初始置换得到$IP(M)$</p><p>$IP(M)$经过16次迭代$T_1, T_2… T_{16}$ 得到$T_16T_15…T_1IP(M)$</p><p>然后在经过$IP^{-1}$ 逆变换得到密文。</p><h3 id="解密过程："><a href="#解密过程：" class="headerlink" title="解密过程："></a>解密过程：</h3><p>加密逆向进行分析。和加密不同的是，子密钥调度过程为逆序，其他一致。</p><h3 id="初始置换："><a href="#初始置换：" class="headerlink" title="初始置换："></a>初始置换：</h3><p>给定一个固定的初始置换IP矩阵来重排明文块M中的二进制位。得到二进制串$M_0 = IP (M) = L_0R_0$</p><p>表： IP置换表（8 <em> 8）（row </em> col 下同）</p><h3 id="迭代T"><a href="#迭代T" class="headerlink" title="迭代T"></a>迭代T</h3><ol><li><p>迭代规则：交叉迭代。$L_i = R_{i-1} \,\,  R_i = L_{i-1} \bigoplus f(R_{i - 1}, K_i)$. $K_i$为子密钥，长度为$$K_i\,, f$$为$$fiestel$$ 轮函数。</p></li><li><p>16次迭代后产生$L_{16}R_{16}$</p></li><li><p>左右交换输出$R_{16}L_{16}$</p><p>​</p></li></ol><h3 id="逆置换"><a href="#逆置换" class="headerlink" title="逆置换"></a>逆置换</h3><p>$P^{-1}$ $C = IP^{-1}(R_{16}L_{16})$ </p><p>表： 逆置换表（8 * 8）</p><h3 id="轮函数-f-R-i-1-K-i"><a href="#轮函数-f-R-i-1-K-i" class="headerlink" title="轮函数$f(R_{i-1}, K_i)$"></a>轮函数$f(R_{i-1}, K_i)$</h3><p>密码函数<code>f(R, K)</code>接受两个输入：32 位的数据和 48 位的子密钥。然后：</p><ol><li><p>通过表 E 进行<strong>扩展置换</strong> （表），将输入的 32 位数据扩展为 48 位；</p></li><li><p>将扩展后的 48 位数据与 48 位的子密钥进行<strong>异或</strong>运算；</p></li><li><p>将异或得到的 48 位数据分成 8 个 6 位的块，每一个块通过对应的一个 S 表产生一个 4 位的输出。其中，每个 S 表都是 4 行 16 列。<strong>具体的置换过程如下：</strong>把 6 位输入中的第 1 位和第 6 位取出来行成一个两位的二进制数 x ，作为 Si 表中的行数（0~3）；把 6 位输入的中间 4 位构成另外一个二进制数 y，作为 Si 表的列数（0~15）；查出 Si 盒表（8 <em> 4 </em> 16 的矩阵）中 x 行 y 列所对应的整数，将该整数转换为一个 4 位的二进制数。</p></li><li><p>把通过 S 表置换得到的 8 个 4 位连在一起，形成一个 32 位的数据。然后将该 32 位数据通过表 P 进行置换（称为P-置换），置换后得到一个仍然是 32 位的结果数据，这就是<code>f(R, K)</code>函数的输出。</p><p>三个表：E扩展置换表（8 <em> 6），S盒置换表（4 </em> 16），P-置换表（8 * 4）</p><p>​</p></li></ol><h3 id="子密钥生成"><a href="#子密钥生成" class="headerlink" title="子密钥生成"></a>子密钥生成</h3><ol><li><p>对密钥K中的56个非校验位实现PC-1置换，得到$C_0D_0$,即置换后的前28位和后28位。</p></li><li><p>对$C_{i-1} D_{i-1}$ 分别进行循环左移操作，得到$C_{i}D_{i}$,当$i = 1，2，9，16$时二进制串左移一个位置，否则左移两个位置。</p></li><li><p>对56位的$C_iD_i$ 实行PC-2压缩置换，得到48位的$K_i$ 。 然后$i++$。</p></li><li><p>如果已经得到$K_{16}$，密码调度结束，否则转步骤2.</p><p>两个表：压缩置换表PC-1 PC-2</p></li></ol><p>​                                                             </p><h2 id="二、-代码模块"><a href="#二、-代码模块" class="headerlink" title="二、 代码模块"></a>二、 代码模块</h2><h3 id="核心函数展示和描述"><a href="#核心函数展示和描述" class="headerlink" title="核心函数展示和描述"></a>核心函数展示和描述</h3><p>由于解密函数需要的模块基本与加密一致，所以不做呈现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#####加密总函数############################################################################</span></span><br><span class="line"><span class="comment"># 1. 初始置换 2. 交叉迭代 3. 逆置换</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Encryption</span><span class="params">(plainText, secretKey)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> PRINT_FLAG == <span class="keyword">True</span>: </span><br><span class="line">        print(<span class="string">"&gt; 开始加密64位明文"</span>)</span><br><span class="line">    M = list(plainText)</span><br><span class="line">    L0, R0 = InitialPermutation(M)</span><br><span class="line">    RL = CrossIterationInEncryption(L0, R0, secretKey)</span><br><span class="line">    cipherText = <span class="string">""</span>.join(InversePermutation(RL))</span><br><span class="line">    <span class="keyword">return</span> cipherText</span><br><span class="line"><span class="comment">##############################################################################################</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">######表格置换函数###########################################################################</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    function: transfrom the binaryStr with the giver permutation table</span></span><br><span class="line"><span class="string">    condition: len(binaryStr) == len(PermutationTable)</span></span><br><span class="line"><span class="string">    return: the permutated binary List.</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 传入01字符串列表和置换表，返回置换结果</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Permutation</span><span class="params">(binaryStr, PermutationTable)</span>:</span></span><br><span class="line">    length = len(PermutationTable)</span><br><span class="line">    PermutatedList = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, length):</span><br><span class="line">        PermutatedList.extend(binaryStr[PermutationTable[i] - <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> PermutatedList</span><br><span class="line"><span class="comment">############################################################################################</span></span><br></pre></td></tr></table></figure> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#########加密过程的的交叉迭代####################################################################</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    function: make cross iteration on L0, R0 for 16 times</span></span><br><span class="line"><span class="string">    input: L0--the front 32 bits of 64-bits plain text , R0--the back 32 bits of plain text</span></span><br><span class="line"><span class="string">    return: R16--the back iterated 32-bits result, L16--the front iterated 32-bits result </span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 16次交叉迭代，返回RL列表用于逆置换。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CrossIterationInEncryption</span><span class="params">(L_0, R_0, SecretKey)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> PRINT_FLAG == <span class="keyword">True</span>: </span><br><span class="line">        print(<span class="string">"&gt; 正在进行加密过程的交叉迭代"</span>)</span><br><span class="line">    R = <span class="string">""</span></span><br><span class="line">    L = <span class="string">""</span></span><br><span class="line">    tmp_R = R_0</span><br><span class="line">    tmp_L = L_0</span><br><span class="line">    sonKeyList = createSonKey(SecretKey)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">17</span>):</span><br><span class="line">        L = tmp_R</span><br><span class="line">        R = XOROperation(tmp_L,Feistel(tmp_R,sonKeyList[i - <span class="number">1</span>]))</span><br><span class="line">        tmp_R = R</span><br><span class="line">        tmp_L = L</span><br><span class="line">    RL = R + L</span><br><span class="line">    <span class="keyword">return</span> RL </span><br><span class="line"><span class="comment">##############################################################################################</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">####创建子密钥##################################################################################</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    function: create the 16 son keys with the given key</span></span><br><span class="line"><span class="string">    return: sonKeysList: 16 son keys list</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createSonKey</span><span class="params">(SecretKey)</span>:</span></span><br><span class="line">    <span class="comment"># 提取密钥中的非校验位</span></span><br><span class="line">    <span class="keyword">if</span> PRINT_FLAG == <span class="keyword">True</span>: </span><br><span class="line">        print(<span class="string">"&gt; 正在生成16个子密钥"</span>)</span><br><span class="line">    str_56_bits_List = list(SecretKey)</span><br><span class="line">    sonKeyList = []</span><br><span class="line">    <span class="comment"># 进行PC-1置换</span></span><br><span class="line">    Temp_PC_1_PermutationResult_C_i_1, Temp_PC_1_PermutationResult_D_i_1 = PC_1_Permutation(str_56_bits_List) </span><br><span class="line">    C_i = []</span><br><span class="line">    D_i = []     </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">17</span>):        </span><br><span class="line">        <span class="comment"># C_i-1 D_i-1</span></span><br><span class="line">        <span class="comment"># 计算C_i D_i</span></span><br><span class="line">        <span class="comment"># 循环左移</span></span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">1</span> <span class="keyword">or</span> i == <span class="number">2</span> <span class="keyword">or</span> i == <span class="number">9</span> <span class="keyword">or</span> i == <span class="number">16</span>:</span><br><span class="line">            C_i = shiftLeft(Temp_PC_1_PermutationResult_C_i_1, <span class="number">1</span>)</span><br><span class="line">            D_i = shiftLeft(Temp_PC_1_PermutationResult_D_i_1, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            C_i = shiftLeft(Temp_PC_1_PermutationResult_C_i_1, <span class="number">2</span>)</span><br><span class="line">            D_i = shiftLeft(Temp_PC_1_PermutationResult_D_i_1, <span class="number">2</span>)</span><br><span class="line">        CD = C_i + D_i</span><br><span class="line">        <span class="comment"># PC2压缩置换</span></span><br><span class="line">        sonKey_i = PC_2_Permutation(CD)</span><br><span class="line">        sonKeyList.append(sonKey_i)  </span><br><span class="line">        Temp_PC_1_PermutationResult_C_i_1 = C_i</span><br><span class="line">        Temp_PC_1_PermutationResult_D_i_1 = D_i</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">16</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> sonKeyList</span><br><span class="line"><span class="comment">##############################################################################################</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#####Feistel 函数#############################################################################</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    function: Feistel function to create bit-stR_ing to permute with R_i -- a 32-bit stR_ing</span></span><br><span class="line"><span class="string">    input: R_i_1--the (i-1)th back 32 bits string, K_i--the son secret key</span></span><br><span class="line"><span class="string">    return: Feistel result (string type)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 轮函数：1. E扩展置换； 2. 扩展结果和子密钥进行异或运算 3. 进行S盒6-4转换</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Feistel</span><span class="params">(R_i_1, K_i)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> PRINT_FLAG == <span class="keyword">True</span>: </span><br><span class="line">        print(<span class="string">"&gt; 正在执行feistel轮函数"</span>)</span><br><span class="line">    E_ExpandResult = E_Expand(R_i_1)</span><br><span class="line">    xorResult = XOROperation(E_ExpandResult, K_i)</span><br><span class="line">    str_32_bits = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">        str_6_bits = xorResult[i * <span class="number">6</span>: i * <span class="number">6</span> + <span class="number">6</span>]</span><br><span class="line">        str_32_bits += S_Box_Transformation(str_6_bits, i + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>.join(P_Permutation(str_32_bits))</span><br><span class="line"><span class="comment">##############################################################################################</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">####随机生成64位key，8个字符#####################################################################</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    return: a 64-bits (8 bytes) string as a secret key</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createSecrteKey</span><span class="params">()</span>:</span></span><br><span class="line">    seed = <span class="string">"1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&amp;*()_+=-"</span></span><br><span class="line">    key = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">        key.append(random.choice(seed))</span><br><span class="line">    randomSecretKey = <span class="string">''</span>.join(key)</span><br><span class="line">    <span class="keyword">return</span> randomSecretKey</span><br><span class="line"><span class="comment">################################################################################################</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##########8个字符的字符串转为ascii，然后转 0 1串####################################</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ToBitString</span><span class="params">(string_8_char)</span>:</span></span><br><span class="line">    strList = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">        strList.append(str(int2bin(ord(string_8_char[i]), <span class="number">8</span>)))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>.join(strList)</span><br><span class="line"><span class="comment">##################################################################################</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">########64位bits转为8个ascci字符###################################################</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ToAsciiChar</span><span class="params">(string_64_bits)</span>:</span></span><br><span class="line">    strList = []</span><br><span class="line">    bitList = list(string_64_bits)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span> int(<span class="string">""</span>.join(bitList[i * <span class="number">8</span>: i * <span class="number">8</span> + <span class="number">8</span>]), <span class="number">2</span>) &lt; <span class="number">8</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># 八个bit一个处理单元，先转为10进制，然后转ascii，存入列表</span></span><br><span class="line">        strList.append(chr(int(<span class="string">""</span>.join(bitList[i * <span class="number">8</span>: i * <span class="number">8</span> + <span class="number">8</span>]), <span class="number">2</span>)))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>.join(strList)</span><br><span class="line"><span class="comment">##################################################################################</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">############ 加密过程和解密过程</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        text_8_bytes = PlainTextFile.read(<span class="number">8</span>)  <span class="comment"># 读取8个ascii字符</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> text_8_bytes:</span><br><span class="line">            print(<span class="string">"读取明文文件到结尾啦"</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> len(text_8_bytes) != <span class="number">8</span>:</span><br><span class="line">            full_flag = <span class="keyword">False</span></span><br><span class="line">          </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            bitString = ToBitString(text_8_bytes) <span class="comment"># 8个ascii字符转十进制int，然后再转为64位01</span></span><br><span class="line">            <span class="comment"># 加密</span></span><br><span class="line">            encryptStr = Encryption(bitString, secretKeyBitString)</span><br><span class="line">            <span class="comment"># 加密结果写入文件</span></span><br><span class="line">            CipherTextFile.write(str(ToAsciiChar(encryptStr)))</span><br><span class="line">            <span class="comment"># 解密</span></span><br><span class="line">            decryptStr = Decryption(encryptStr, secretKeyBitString)</span><br><span class="line">            <span class="comment"># 解密结果写入文件 </span></span><br><span class="line">            DecryptTextFile.write(str(ToAsciiChar(decryptStr)))</span><br><span class="line">        <span class="keyword">if</span> full_flag == <span class="keyword">False</span>:  <span class="comment"># 如果尾部字节不足8个，那么每个字节都填入缺失的字节数量</span></span><br><span class="line">            NumOfLostBytes = <span class="number">8</span> - len(text_8_bytes)</span><br><span class="line">            bitStringList = []</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(text_8_bytes)):</span><br><span class="line">                bitStringList.append(int2bin(ord(text_8_bytes[i]), <span class="number">8</span>))</span><br><span class="line">    </span><br><span class="line">            full_8_bits = int2bin(NumOfLostBytes, <span class="number">8</span>)  <span class="comment"># 填充的比特串</span></span><br><span class="line">            <span class="comment"># 填充的字节数 转为bitstring</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(NumOfLostBytes):</span><br><span class="line">                bitStringList.append(full_8_bits)</span><br><span class="line">            bitString = <span class="string">""</span>.join(bitStringList)  <span class="comment">#补全64位分组</span></span><br><span class="line">             <span class="comment"># 加密</span></span><br><span class="line">            encryptStr = Encryption(bitString, secretKeyBitString)</span><br><span class="line">            <span class="comment"># 加密结果写入文件</span></span><br><span class="line">            CipherTextFile.write(str(ToAsciiChar(encryptStr)))</span><br><span class="line">            <span class="comment"># 解密</span></span><br><span class="line">            decryptStr = Decryption(encryptStr, secretKeyBitString)</span><br><span class="line">            <span class="comment"># 解密结果写入文件 </span></span><br><span class="line">            DecryptTextFile.write(str(ToAsciiChar(decryptStr)))</span><br><span class="line">  <span class="comment"># 读取完整的8个字节分组字节，尾部填充8个字节，取值都为08</span></span><br><span class="line">    <span class="keyword">if</span> full_flag == <span class="keyword">True</span>:</span><br><span class="line">        zero_eight = <span class="string">"00001000"</span></span><br><span class="line">        tmpList = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">            tmpList.append(zero_eight)</span><br><span class="line">        bitString = <span class="string">""</span>.join(tmpList)</span><br><span class="line">        <span class="comment"># 加密</span></span><br><span class="line">        encryptStr = Encryption(bitString, secretKeyBitString)</span><br><span class="line">        <span class="comment"># 加密结果写入文件</span></span><br><span class="line">        CipherTextFile.write(str(ToAsciiChar(encryptStr)))</span><br><span class="line">        <span class="comment"># 解密</span></span><br><span class="line">        decryptStr = Decryption(encryptStr, secretKeyBitString)</span><br><span class="line">        <span class="comment"># 解密结果写入文件 </span></span><br><span class="line">        DecryptTextFile.write(str(ToAsciiChar(decryptStr)))</span><br></pre></td></tr></table></figure><h3 id="数据结构说明"><a href="#数据结构说明" class="headerlink" title="数据结构说明"></a>数据结构说明</h3><ol><li>明文，密文，解密后的数据</li></ol><p>从明文文件中读取8个ascii字符，存放在string结构中，然后再转换为64个ascii字符的0 1 字符串作为加密的明文。加密结果和解密结果也是转换为ascii字符串，存放在文件中。</p><ol start="2"><li>加密解密过程的0 1 字符串数据</li></ol><p>在实际操作中，由于python中的string不支持赋值以及增删操作，所以通过python里的list即列表来存放字符串，通过list 方便的操作接口来执行加密解密。而string和list之间的转换方式也很简单，如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List = list(str)    <span class="comment"># string 转 list</span></span><br><span class="line">str = <span class="string">""</span>.join(List) <span class="comment"># list 转string</span></span><br></pre></td></tr></table></figure><h2 id="三、-完整代码"><a href="#三、-完整代码" class="headerlink" title="三、 完整代码"></a>三、 完整代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    Autor: qiuyh </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    contact: 576261090@qq.com</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Date: 18/11/1</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Description: achieve an encryption algoriithm -- DES(Data Encryption Standard)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Note: To code a nice code !</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy </span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment">#########文件变量</span></span><br><span class="line">CIPHER_TEXT_FILE = <span class="string">"cipherText.txt"</span>   <span class="comment">#密文文件</span></span><br><span class="line">PLAIN_TEXT_FILE = <span class="string">"plainText.txt"</span>     <span class="comment">#明文文件</span></span><br><span class="line">SECRET_KEY_FILE = <span class="string">"secretKey.txt"</span>     <span class="comment">#密钥文件</span></span><br><span class="line">DECRYPT_TEXT_FILE = <span class="string">"decryptText.txt"</span> <span class="comment">#解密文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">######## 显示过程变量,为真显示加密步骤</span></span><br><span class="line">PRINT_FLAG = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">########异或运算###################################################################################</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    function:do XOR operation on bits string s1, s2  异或运算</span></span><br><span class="line"><span class="string">    condition: len (s1) == len(s2)</span></span><br><span class="line"><span class="string">    return: xorResult -- the xor result and itstype is list</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">XOROperation</span><span class="params">(s1,s2)</span>:</span></span><br><span class="line">    length = len(s1)     </span><br><span class="line">    xorResult = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, length):</span><br><span class="line">        <span class="comment"># 转为int类型0，1比特，进行异或操作后，转为string类型</span></span><br><span class="line">        xorResult.extend(str(int(s1[i]) ^ int(s2[i])))</span><br><span class="line">    <span class="keyword">return</span> xorResult</span><br><span class="line"><span class="comment">####################################################################################################</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">########## int 转 二进制 指定位数#####################################################################</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">int2bin</span><span class="params">(n, count=<span class="number">24</span>)</span>:</span></span><br><span class="line">    <span class="string">"""returns the binary of integer n, using count number of digits"""</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>.join([str((n &gt;&gt; y) &amp; <span class="number">1</span>) <span class="keyword">for</span> y <span class="keyword">in</span> range(count<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>)])</span><br><span class="line"><span class="comment">######################################################################################################</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">######表格置换函数###################################################################################</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    function: transfrom the binaryStr with the giver permutation table</span></span><br><span class="line"><span class="string">    condition: len(binaryStr) == len(PermutationTable)</span></span><br><span class="line"><span class="string">    return: the permutated binary List.</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Permutation</span><span class="params">(binaryStr, PermutationTable)</span>:</span></span><br><span class="line">    length = len(PermutationTable)</span><br><span class="line">    PermutatedList = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, length):</span><br><span class="line">        PermutatedList.extend(binaryStr[PermutationTable[i] - <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> PermutatedList</span><br><span class="line"><span class="comment">####################################################################################################</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##循环左移############################################################################################</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    function: to achieve cycle shift n bits.</span></span><br><span class="line"><span class="string">    return: the shifted result.</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shiftLeft</span><span class="params">(binaryStr, nBits)</span>:</span></span><br><span class="line">    length = len(binaryStr)</span><br><span class="line">    nBits = nBits % nBits</span><br><span class="line">    shiftedList = list(binaryStr)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, length):</span><br><span class="line">        <span class="keyword">if</span> i &lt; nBits:</span><br><span class="line">            shiftedList.extend(shiftedList[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">del</span> shiftedList[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> shiftedList</span><br><span class="line"><span class="comment">####################################################################################################</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##字节转比特#########################################################################################</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ByteToBit</span><span class="params">(ByteString)</span>:</span></span><br><span class="line">    bitList = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">4</span>):</span><br><span class="line">        bitList.insert(<span class="number">0</span>, str(ByteString%<span class="number">2</span>))</span><br><span class="line">        ByteString = int(ByteString / <span class="number">2</span>)</span><br><span class="line">    bitResult = <span class="string">""</span>.join(bitList)</span><br><span class="line">    <span class="keyword">return</span> bitResult</span><br><span class="line"><span class="comment">####################################################################################################</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#########初始P置换####################################################################################</span></span><br><span class="line">InitialPermutationTable=[<span class="number">58</span>,<span class="number">50</span>,<span class="number">42</span>,<span class="number">34</span>,<span class="number">26</span>,<span class="number">18</span>,<span class="number">10</span>,<span class="number">2</span>,</span><br><span class="line">                        <span class="number">60</span>,<span class="number">52</span>,<span class="number">44</span>,<span class="number">36</span>,<span class="number">28</span>,<span class="number">20</span>,<span class="number">12</span>,<span class="number">4</span>,</span><br><span class="line">                        <span class="number">62</span>,<span class="number">54</span>,<span class="number">46</span>,<span class="number">38</span>,<span class="number">30</span>,<span class="number">22</span>,<span class="number">14</span>,<span class="number">6</span>,</span><br><span class="line">                        <span class="number">64</span>,<span class="number">56</span>,<span class="number">48</span>,<span class="number">40</span>,<span class="number">32</span>,<span class="number">24</span>,<span class="number">16</span>,<span class="number">8</span>,</span><br><span class="line">                        <span class="number">57</span>,<span class="number">49</span>,<span class="number">41</span>,<span class="number">33</span>,<span class="number">25</span>,<span class="number">17</span>,<span class="number">9</span>,<span class="number">1</span>,</span><br><span class="line">                        <span class="number">59</span>,<span class="number">51</span>,<span class="number">43</span>,<span class="number">35</span>,<span class="number">27</span>,<span class="number">19</span>,<span class="number">11</span>,<span class="number">3</span>,</span><br><span class="line">                        <span class="number">61</span>,<span class="number">53</span>,<span class="number">45</span>,<span class="number">37</span>,<span class="number">29</span>,<span class="number">21</span>,<span class="number">13</span>,<span class="number">5</span>,</span><br><span class="line">                        <span class="number">63</span>,<span class="number">55</span>,<span class="number">47</span>,<span class="number">39</span>,<span class="number">31</span>,<span class="number">23</span>,<span class="number">15</span>,<span class="number">7</span>]</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    function: Initial permutation function</span></span><br><span class="line"><span class="string">    input: M_0--64bit plain text block</span></span><br><span class="line"><span class="string">    return: L_0--the front 32 bits of M_0 , R0--the back 32 bits of M_0</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">InitialPermutation</span><span class="params">(M_0)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> PRINT_FLAG == <span class="keyword">True</span>: </span><br><span class="line">        print(<span class="string">"&gt; 进行初始IP置换"</span>)</span><br><span class="line">    InitialPermutationResult = Permutation(M_0, InitialPermutationTable)</span><br><span class="line">    L_0 = InitialPermutationResult[<span class="number">0</span>:int((len(InitialPermutationResult)/<span class="number">2</span>))]</span><br><span class="line">    R_0 = InitialPermutationResult[int((len(InitialPermutationResult)/<span class="number">2</span>)):int(len(InitialPermutationResult))]</span><br><span class="line">    <span class="keyword">return</span> L_0, R_0 <span class="comment"># List type</span></span><br><span class="line"><span class="comment">##############################################################################################</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#####PC-1置换#########################################################################################</span></span><br><span class="line">PC_1Table = [<span class="number">57</span>,<span class="number">49</span>,<span class="number">41</span>,<span class="number">33</span>,<span class="number">25</span>,<span class="number">17</span>,<span class="number">9</span>,</span><br><span class="line">            <span class="number">1</span>,<span class="number">58</span>,<span class="number">50</span>,<span class="number">42</span>,<span class="number">34</span>,<span class="number">26</span>,<span class="number">18</span>,</span><br><span class="line">            <span class="number">10</span>,<span class="number">2</span>,<span class="number">59</span>,<span class="number">51</span>,<span class="number">43</span>,<span class="number">35</span>,<span class="number">27</span>,</span><br><span class="line">            <span class="number">19</span>,<span class="number">11</span>,<span class="number">3</span>,<span class="number">60</span>,<span class="number">52</span>,<span class="number">44</span>,<span class="number">36</span>,</span><br><span class="line">            <span class="number">63</span>,<span class="number">55</span>,<span class="number">47</span>,<span class="number">39</span>,<span class="number">31</span>,<span class="number">23</span>,<span class="number">15</span>,</span><br><span class="line">            <span class="number">7</span>,<span class="number">62</span>,<span class="number">54</span>,<span class="number">46</span>,<span class="number">38</span>,<span class="number">30</span>,<span class="number">22</span>,</span><br><span class="line">            <span class="number">14</span>,<span class="number">6</span>,<span class="number">61</span>,<span class="number">53</span>,<span class="number">45</span>,<span class="number">37</span>,<span class="number">29</span>,</span><br><span class="line">            <span class="number">21</span>,<span class="number">13</span>,<span class="number">5</span>,<span class="number">28</span>,<span class="number">20</span>,<span class="number">12</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    function: PC-1 permutation</span></span><br><span class="line"><span class="string">    input: 56 not checked bits of secret ley</span></span><br><span class="line"><span class="string">    return: C_0, D_0 </span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">PC_1_Permutation</span><span class="params">(SecretKey)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> PRINT_FLAG == <span class="keyword">True</span>: </span><br><span class="line">        print(<span class="string">"&gt; 进行PC-1 置换"</span>)</span><br><span class="line">    PC_1_PermutationResult = Permutation(SecretKey, PC_1Table)</span><br><span class="line">    C_0 = PC_1_PermutationResult[<span class="number">0</span>: int(len(PC_1_PermutationResult)/<span class="number">2</span>)]</span><br><span class="line">    D_0 = PC_1_PermutationResult[int(len(PC_1_PermutationResult)/<span class="number">2</span>): int(len(PC_1_PermutationResult))]</span><br><span class="line">    <span class="keyword">return</span> C_0, D_0</span><br><span class="line"><span class="comment">##############################################################################################</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">########循环左移函数######################################################################################</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    function: do ring shift left on a str_28_bits</span></span><br><span class="line"><span class="string">    input: str_28_bits -- a 28 bits string; ShiftFlag -- when it is 1,2,9,16, shift 2 bits</span></span><br><span class="line"><span class="string">    return: shift_result</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RingShiftLeft</span><span class="params">(str_28_bits, ShiftFlag)</span>:</span></span><br><span class="line">    shiftResult = <span class="string">""</span></span><br><span class="line">    <span class="keyword">if</span> ShiftFlag == <span class="number">1</span> <span class="keyword">or</span> ShiftFlag == <span class="number">2</span> <span class="keyword">or</span> ShiftFlag == <span class="number">9</span> <span class="keyword">or</span> ShiftFlag == <span class="number">16</span>:</span><br><span class="line">        shiftResult = shiftLeft(str_28_bits, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        shiftResult = shiftLeft(str_28_bits, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> shiftResult</span><br><span class="line"><span class="comment">##############################################################################################</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##########PC-2置换####################################################################################</span></span><br><span class="line">PC_2Table = [<span class="number">14</span>,<span class="number">17</span>,<span class="number">11</span>,<span class="number">24</span>,<span class="number">1</span>,<span class="number">5</span>,</span><br><span class="line">            <span class="number">3</span>,<span class="number">28</span>,<span class="number">15</span>,<span class="number">6</span>,<span class="number">21</span>,<span class="number">10</span>,</span><br><span class="line">            <span class="number">23</span>,<span class="number">19</span>,<span class="number">12</span>,<span class="number">4</span>,<span class="number">26</span>,<span class="number">8</span>,</span><br><span class="line">            <span class="number">16</span>,<span class="number">7</span>,<span class="number">27</span>,<span class="number">20</span>,<span class="number">13</span>,<span class="number">2</span>,</span><br><span class="line">            <span class="number">41</span>,<span class="number">52</span>,<span class="number">31</span>,<span class="number">37</span>,<span class="number">47</span>,<span class="number">55</span>,</span><br><span class="line">            <span class="number">30</span>,<span class="number">40</span>,<span class="number">51</span>,<span class="number">45</span>,<span class="number">33</span>,<span class="number">48</span>,</span><br><span class="line">            <span class="number">44</span>,<span class="number">49</span>,<span class="number">39</span>,<span class="number">56</span>,<span class="number">34</span>,<span class="number">53</span>,</span><br><span class="line">            <span class="number">46</span>,<span class="number">42</span>,<span class="number">50</span>,<span class="number">36</span>,<span class="number">29</span>,<span class="number">32</span>]</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    function: PC-2 compressed permutation</span></span><br><span class="line"><span class="string">    input:  str_56_bits</span></span><br><span class="line"><span class="string">    return: str_48_bits</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">PC_2_Permutation</span><span class="params">(str_56_bits)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> PRINT_FLAG == <span class="keyword">True</span>: </span><br><span class="line">        print(<span class="string">"&gt; 进行PC-2置换"</span>)</span><br><span class="line">    <span class="comment">#  去掉9， 18， 22， 25， 35， 38，43， 54 位</span></span><br><span class="line">    str_48_bits = Permutation(str_56_bits, PC_2Table)</span><br><span class="line">    <span class="keyword">return</span> str_48_bits</span><br><span class="line"><span class="comment">##############################################################################################</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">####创建子密钥##################################################################################</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    function: create the 16 son keys with the given key</span></span><br><span class="line"><span class="string">    return: sonKeysList: 16 son keys list</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createSonKey</span><span class="params">(SecretKey)</span>:</span></span><br><span class="line">    <span class="comment"># 提取密钥中的非校验位</span></span><br><span class="line">    <span class="keyword">if</span> PRINT_FLAG == <span class="keyword">True</span>: </span><br><span class="line">        print(<span class="string">"&gt; 正在生成16个子密钥"</span>)</span><br><span class="line">    str_56_bits_List = list(SecretKey)</span><br><span class="line">    sonKeyList = []</span><br><span class="line">    <span class="comment"># 获取子密钥</span></span><br><span class="line">    Temp_PC_1_PermutationResult_C_i_1, Temp_PC_1_PermutationResult_D_i_1 = PC_1_Permutation(str_56_bits_List) </span><br><span class="line">    C_i = []</span><br><span class="line">    D_i = []     </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">17</span>):        </span><br><span class="line">        <span class="comment"># C_i-1 D_i-1</span></span><br><span class="line">        <span class="comment"># 计算C_i D_i</span></span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">1</span> <span class="keyword">or</span> i == <span class="number">2</span> <span class="keyword">or</span> i == <span class="number">9</span> <span class="keyword">or</span> i == <span class="number">16</span>:</span><br><span class="line">            C_i = shiftLeft(Temp_PC_1_PermutationResult_C_i_1, <span class="number">1</span>)</span><br><span class="line">            D_i = shiftLeft(Temp_PC_1_PermutationResult_D_i_1, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            C_i = shiftLeft(Temp_PC_1_PermutationResult_C_i_1, <span class="number">2</span>)</span><br><span class="line">            D_i = shiftLeft(Temp_PC_1_PermutationResult_D_i_1, <span class="number">2</span>)</span><br><span class="line">        CD = C_i + D_i</span><br><span class="line">        sonKey_i = PC_2_Permutation(CD)</span><br><span class="line">        sonKeyList.append(sonKey_i)  </span><br><span class="line">        Temp_PC_1_PermutationResult_C_i_1 = C_i</span><br><span class="line">        Temp_PC_1_PermutationResult_D_i_1 = D_i</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">16</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> sonKeyList</span><br><span class="line"><span class="comment">##############################################################################################</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">######E扩展置换#################################################################################</span></span><br><span class="line">E_ExpandTable = [<span class="number">32</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,</span><br><span class="line">                <span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,</span><br><span class="line">                <span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,</span><br><span class="line">                <span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,</span><br><span class="line">                <span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">21</span>,</span><br><span class="line">                <span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">24</span>,<span class="number">25</span>,</span><br><span class="line">                <span class="number">24</span>,<span class="number">25</span>,<span class="number">26</span>,<span class="number">27</span>,<span class="number">28</span>,<span class="number">29</span>,</span><br><span class="line">                <span class="number">28</span>,<span class="number">29</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">32</span>,<span class="number">1</span>]</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    function: E_Expand on the 32 bits R(i-1) string</span></span><br><span class="line"><span class="string">    input: R_i_1 -- the (i-1)th back 32 bits string</span></span><br><span class="line"><span class="string">    return: E_R_i_1 -- the 48 bits expanded string</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">E_Expand</span><span class="params">(R_i_1)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> PRINT_FLAG == <span class="keyword">True</span>: </span><br><span class="line">        print(<span class="string">"&gt; 正在进行E扩展置换"</span>)</span><br><span class="line">    E_R_i_1 = Permutation(R_i_1, E_ExpandTable)</span><br><span class="line">    <span class="keyword">return</span> E_R_i_1</span><br><span class="line"><span class="comment">##############################################################################################</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#######S盒置换################################################################################</span></span><br><span class="line">eight_S_Boxes=[[<span class="number">14</span>,<span class="number">4</span>,<span class="number">13</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">15</span>,<span class="number">11</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">7</span>,</span><br><span class="line">                <span class="number">0</span>,<span class="number">15</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">14</span>,<span class="number">2</span>,<span class="number">13</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">8</span>,</span><br><span class="line">                <span class="number">4</span>,<span class="number">1</span>,<span class="number">14</span>,<span class="number">8</span>,<span class="number">13</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">11</span>,<span class="number">15</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">0</span>,</span><br><span class="line">                <span class="number">15</span>,<span class="number">12</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">3</span>,<span class="number">14</span>,<span class="number">10</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">13</span>,],</span><br><span class="line">                [<span class="number">15</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">14</span>,<span class="number">6</span>,<span class="number">11</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">13</span>,<span class="number">12</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">10</span>,</span><br><span class="line">                <span class="number">3</span>,<span class="number">13</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">15</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">14</span>,<span class="number">12</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">5</span>,</span><br><span class="line">                <span class="number">0</span>,<span class="number">14</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">10</span>,<span class="number">4</span>,<span class="number">13</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">15</span>,</span><br><span class="line">                <span class="number">13</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">15</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">11</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">12</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">14</span>,<span class="number">9</span>,],</span><br><span class="line">                [<span class="number">10</span>,<span class="number">0</span>,<span class="number">9</span>,<span class="number">14</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">15</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">13</span>,<span class="number">12</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">8</span>,</span><br><span class="line">                <span class="number">13</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">14</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">15</span>,<span class="number">1</span>,</span><br><span class="line">                <span class="number">13</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">15</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">11</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">14</span>,<span class="number">7</span>,</span><br><span class="line">                <span class="number">1</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">15</span>,<span class="number">14</span>,<span class="number">3</span>,<span class="number">11</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">12</span>],</span><br><span class="line">                [<span class="number">7</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">4</span>,<span class="number">15</span>,</span><br><span class="line">                <span class="number">13</span>,<span class="number">8</span>,<span class="number">11</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">15</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">14</span>,<span class="number">9</span>,</span><br><span class="line">                <span class="number">10</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">7</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">14</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>,</span><br><span class="line">                <span class="number">3</span>,<span class="number">15</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">13</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">14</span>,],</span><br><span class="line">                [<span class="number">2</span>,<span class="number">12</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">15</span>,<span class="number">13</span>,<span class="number">0</span>,<span class="number">14</span>,<span class="number">9</span>,</span><br><span class="line">                <span class="number">14</span>,<span class="number">11</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">13</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">15</span>,<span class="number">10</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">6</span>,</span><br><span class="line">                <span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">11</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">15</span>,<span class="number">9</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">14</span>,</span><br><span class="line">                <span class="number">11</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">14</span>,<span class="number">2</span>,<span class="number">13</span>,<span class="number">6</span>,<span class="number">15</span>,<span class="number">0</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>],</span><br><span class="line">                [<span class="number">12</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">13</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">14</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">11</span>,</span><br><span class="line">                <span class="number">10</span>,<span class="number">15</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">0</span>,<span class="number">11</span>,<span class="number">3</span>,<span class="number">8</span>,</span><br><span class="line">                <span class="number">9</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">13</span>,<span class="number">11</span>,<span class="number">6</span>,</span><br><span class="line">                <span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">15</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">14</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">13</span>,],</span><br><span class="line">                [<span class="number">4</span>,<span class="number">11</span>,<span class="number">2</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">13</span>,<span class="number">3</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">1</span>,</span><br><span class="line">                <span class="number">13</span>,<span class="number">0</span>,<span class="number">11</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">14</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">12</span>,<span class="number">2</span>,<span class="number">15</span>,<span class="number">8</span>,<span class="number">6</span>,</span><br><span class="line">                <span class="number">1</span>,<span class="number">4</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">12</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">14</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">2</span>,</span><br><span class="line">                <span class="number">6</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">10</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">15</span>,<span class="number">14</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">12</span>],</span><br><span class="line">                [<span class="number">13</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">15</span>,<span class="number">11</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">14</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">12</span>,<span class="number">7</span>,</span><br><span class="line">                <span class="number">1</span>,<span class="number">15</span>,<span class="number">13</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">11</span>,<span class="number">0</span>,<span class="number">14</span>,<span class="number">9</span>,<span class="number">2</span>,</span><br><span class="line">                <span class="number">7</span>,<span class="number">11</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">12</span>,<span class="number">14</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>,</span><br><span class="line">                <span class="number">2</span>,<span class="number">1</span>,<span class="number">14</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">10</span>,<span class="number">8</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">11</span>]]</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    function: to transfrom a 6-bits string to a 4-bits string with 8 S-Boxes</span></span><br><span class="line"><span class="string">    input: six_bits_str -- 6-bits string; S_Box_Num -- indicate the number of the S-Box [1, 8]</span></span><br><span class="line"><span class="string">    return: four_bits_str -- 4 bits string group</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">S_Box_Transformation</span><span class="params">(six_bits_str, S_Box_Num)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> PRINT_FLAG == <span class="keyword">True</span>: </span><br><span class="line">        print(<span class="string">"&gt; 正在通过S盒进行6-4转换"</span>)</span><br><span class="line">    row = int(six_bits_str[<span class="number">0</span>]) * <span class="number">2</span> + int(six_bits_str[<span class="number">5</span>])</span><br><span class="line">    col = int(six_bits_str[<span class="number">1</span>]) * <span class="number">8</span> + int(six_bits_str[<span class="number">2</span>]) * <span class="number">4</span> + int(six_bits_str[<span class="number">3</span>]) * <span class="number">2</span> + int(six_bits_str[<span class="number">4</span>])</span><br><span class="line">    value = eight_S_Boxes[int(S_Box_Num - <span class="number">1</span>)][int(row * <span class="number">15</span> + col)]</span><br><span class="line">    four_bits_str = list(int2bin(value,<span class="number">4</span>))</span><br><span class="line">    <span class="keyword">return</span> four_bits_str</span><br><span class="line"><span class="comment">##############################################################################################</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">########P扩展置换##############################################################################</span></span><br><span class="line">P_Table=[<span class="number">16</span>,<span class="number">7</span>,<span class="number">20</span>,<span class="number">21</span>,</span><br><span class="line">   <span class="number">29</span>,<span class="number">12</span>,<span class="number">28</span>,<span class="number">17</span>,</span><br><span class="line">   <span class="number">1</span>,<span class="number">15</span>,<span class="number">23</span>,<span class="number">26</span>,</span><br><span class="line">   <span class="number">5</span>,<span class="number">18</span>,<span class="number">31</span>,<span class="number">10</span>,</span><br><span class="line">   <span class="number">2</span>,<span class="number">8</span>,<span class="number">24</span>,<span class="number">14</span>,</span><br><span class="line">   <span class="number">32</span>,<span class="number">27</span>,<span class="number">3</span>,<span class="number">9</span>,</span><br><span class="line">   <span class="number">19</span>,<span class="number">13</span>,<span class="number">30</span>,<span class="number">6</span>,</span><br><span class="line">   <span class="number">22</span>,<span class="number">11</span>,<span class="number">4</span>,<span class="number">25</span>]</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    function: P_Permutation on the 32 bits string</span></span><br><span class="line"><span class="string">    input: str_32bits -- the 32 bits string List</span></span><br><span class="line"><span class="string">    return: FeistelResult -- the output of the feistel function</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">P_Permutation</span><span class="params">(str_32bits)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> PRINT_FLAG == <span class="keyword">True</span>: </span><br><span class="line">        print(<span class="string">"&gt; 正在进行P置换"</span>)</span><br><span class="line">    FeistelResult = Permutation(str_32bits, P_Table)</span><br><span class="line">    <span class="keyword">return</span> FeistelResult</span><br><span class="line"><span class="comment">##############################################################################################</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#####Feistel 函数#########################################################################################</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    function: Feistel function to create bit-stR_ing to permute with R_i -- a 32-bit stR_ing</span></span><br><span class="line"><span class="string">    input: R_i_1--the (i-1)th back 32 bits string, K_i--the son secret key</span></span><br><span class="line"><span class="string">    return: Feistel result (string type)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Feistel</span><span class="params">(R_i_1, K_i)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> PRINT_FLAG == <span class="keyword">True</span>: </span><br><span class="line">        print(<span class="string">"&gt; 正在执行feistel轮函数"</span>)</span><br><span class="line">    E_ExpandResult = E_Expand(R_i_1)</span><br><span class="line">    xorResult = XOROperation(E_ExpandResult, K_i)</span><br><span class="line">    str_32_bits = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">        str_6_bits = xorResult[i * <span class="number">6</span>: i * <span class="number">6</span> + <span class="number">6</span>]</span><br><span class="line">        str_32_bits += S_Box_Transformation(str_6_bits, i + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>.join(P_Permutation(str_32_bits))</span><br><span class="line"><span class="comment">##############################################################################################</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#########加密过程的的交叉迭代过程#####################################################################################</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    function: make cross iteration on L0, R0 for 16 times</span></span><br><span class="line"><span class="string">    input: L0--the front 32 bits of 64-bits plain text , R0--the back 32 bits of plain text</span></span><br><span class="line"><span class="string">    return: R16--the back iterated 32-bits result, L16--the front iterated 32-bits result </span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CrossIterationInEncryption</span><span class="params">(L_0, R_0, SecretKey)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> PRINT_FLAG == <span class="keyword">True</span>: </span><br><span class="line">        print(<span class="string">"&gt; 正在进行加密过程的交叉迭代"</span>)</span><br><span class="line">    R = <span class="string">""</span></span><br><span class="line">    L = <span class="string">""</span></span><br><span class="line">    tmp_R = R_0</span><br><span class="line">    tmp_L = L_0</span><br><span class="line">    sonKeyList = createSonKey(SecretKey)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">17</span>):</span><br><span class="line">        L = tmp_R</span><br><span class="line">        R = XOROperation(tmp_L,Feistel(tmp_R,sonKeyList[i - <span class="number">1</span>]))</span><br><span class="line">        tmp_R = R</span><br><span class="line">        tmp_L = L</span><br><span class="line">    RL = R + L</span><br><span class="line">    <span class="keyword">return</span> RL </span><br><span class="line"><span class="comment">##############################################################################################</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#########解密过程的的交叉迭代过程#####################################################################################</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    function: make cross iteration on L0, R0 for 16 times</span></span><br><span class="line"><span class="string">    input: L0--the front 32 bits of 64-bits cipher text , R0--the back 32 bits of cipher text</span></span><br><span class="line"><span class="string">    return: R16--the back iterated 32-bits result, L16--the front iterated 32-bits result </span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CrossIterationInDecryption</span><span class="params">(L_0, R_0, SecretKey)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> PRINT_FLAG == <span class="keyword">True</span>: </span><br><span class="line">        print(<span class="string">"&gt; 正在进行解密过程的交叉迭代"</span>)</span><br><span class="line">    R = []</span><br><span class="line">    L = []</span><br><span class="line">    tmp_R = R_0</span><br><span class="line">    tmp_L = L_0</span><br><span class="line">    sonKeyList = createSonKey(SecretKey)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">17</span>):</span><br><span class="line">        L = tmp_R</span><br><span class="line">        R = XOROperation(tmp_L,Feistel(tmp_R,sonKeyList[<span class="number">16</span> - i]))</span><br><span class="line">        tmp_R = R</span><br><span class="line">        tmp_L = L</span><br><span class="line">    RL = R + L</span><br><span class="line">    <span class="keyword">return</span> RL </span><br><span class="line"><span class="comment">##############################################################################################</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">######P 逆置换########################################################################################</span></span><br><span class="line">InversePermutationTable=[<span class="number">40</span>,<span class="number">8</span>,<span class="number">48</span>,<span class="number">16</span>,<span class="number">56</span>,<span class="number">24</span>,<span class="number">64</span>,<span class="number">32</span>,</span><br><span class="line">                        <span class="number">39</span>,<span class="number">7</span>,<span class="number">47</span>,<span class="number">15</span>,<span class="number">55</span>,<span class="number">23</span>,<span class="number">63</span>,<span class="number">31</span>,</span><br><span class="line">                        <span class="number">38</span>,<span class="number">6</span>,<span class="number">46</span>,<span class="number">14</span>,<span class="number">54</span>,<span class="number">22</span>,<span class="number">62</span>,<span class="number">30</span>,</span><br><span class="line">                        <span class="number">37</span>,<span class="number">5</span>,<span class="number">45</span>,<span class="number">13</span>,<span class="number">53</span>,<span class="number">21</span>,<span class="number">61</span>,<span class="number">29</span>,</span><br><span class="line">                        <span class="number">36</span>,<span class="number">4</span>,<span class="number">44</span>,<span class="number">12</span>,<span class="number">52</span>,<span class="number">20</span>,<span class="number">60</span>,<span class="number">28</span>,</span><br><span class="line">                        <span class="number">35</span>,<span class="number">3</span>,<span class="number">43</span>,<span class="number">11</span>,<span class="number">51</span>,<span class="number">19</span>,<span class="number">59</span>,<span class="number">27</span>,</span><br><span class="line">                        <span class="number">34</span>,<span class="number">2</span>,<span class="number">42</span>,<span class="number">10</span>,<span class="number">50</span>,<span class="number">18</span>,<span class="number">58</span>,<span class="number">26</span>,</span><br><span class="line">                        <span class="number">33</span>,<span class="number">1</span>,<span class="number">41</span>,<span class="number">9</span>,<span class="number">49</span>,<span class="number">17</span>,<span class="number">57</span>,<span class="number">25</span>]</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    function: inverse permutation on the R16L16 bit-stR_ing</span></span><br><span class="line"><span class="string">    input: R16--the back iterated 32-bits result, L16--the front iterated 32-bits result </span></span><br><span class="line"><span class="string">    return: ciphterText--64bits</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">InversePermutation</span><span class="params">(R_16_L_16)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> PRINT_FLAG == <span class="keyword">True</span>: </span><br><span class="line">        print(<span class="string">"&gt; 正在进行逆置换"</span>)</span><br><span class="line">    cipherText = <span class="string">""</span></span><br><span class="line">    cipherText = Permutation(R_16_L_16, InversePermutationTable)</span><br><span class="line">    <span class="keyword">return</span> cipherText </span><br><span class="line"><span class="comment">##############################################################################################</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#####加密总函数#########################################################################################</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Encryption</span><span class="params">(plainText, secretKey)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> PRINT_FLAG == <span class="keyword">True</span>: </span><br><span class="line">        print(<span class="string">"&gt; 开始加密64位明文"</span>)</span><br><span class="line">    M = list(plainText)</span><br><span class="line">    L0, R0 = InitialPermutation(M)</span><br><span class="line">    RL = CrossIterationInEncryption(L0, R0, secretKey)</span><br><span class="line">    cipherText = <span class="string">""</span>.join(InversePermutation(RL))</span><br><span class="line">    <span class="keyword">return</span> cipherText</span><br><span class="line"><span class="comment">##############################################################################################</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">######解密总函数###############################################################################</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Decryption</span><span class="params">(cipherText, secretKey)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> PRINT_FLAG == <span class="keyword">True</span>: </span><br><span class="line">        print(<span class="string">"&gt; 开始解密64位密文"</span>)</span><br><span class="line">    M = list(cipherText)</span><br><span class="line">    L0, R0 = InitialPermutation(M)</span><br><span class="line">    RL = CrossIterationInDecryption(L0, R0, secretKey)</span><br><span class="line">    decryptedText = <span class="string">""</span>.join(InversePermutation(RL))</span><br><span class="line">    <span class="keyword">return</span> decryptedText</span><br><span class="line"><span class="comment">##############################################################################################</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">####随机生成64位key，8个字符#####################################################################</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    return: a 64-bits (8 bytes) string as a secret key</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createSecrteKey</span><span class="params">()</span>:</span></span><br><span class="line">    seed = <span class="string">"1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&amp;*()_+=-"</span></span><br><span class="line">    key = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">        key.append(random.choice(seed))</span><br><span class="line">    randomSecretKey = <span class="string">''</span>.join(key)</span><br><span class="line">    <span class="keyword">return</span> randomSecretKey</span><br><span class="line"><span class="comment">################################################################################################</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##########8个字符的字符串转为ascii，然后转 0 1串####################################</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ToBitString</span><span class="params">(string_8_char)</span>:</span></span><br><span class="line">    strList = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">        strList.append(str(int2bin(ord(string_8_char[i]), <span class="number">8</span>)))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>.join(strList)</span><br><span class="line"><span class="comment">##################################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment">########64位bits转为8个ascci字符###################################################</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ToAsciiChar</span><span class="params">(string_64_bits)</span>:</span></span><br><span class="line">    strList = []</span><br><span class="line">    bitList = list(string_64_bits)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span> int(<span class="string">""</span>.join(bitList[i * <span class="number">8</span>: i * <span class="number">8</span> + <span class="number">8</span>]), <span class="number">2</span>) &lt; <span class="number">8</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># 八个bit一个处理单元，先转为10进制，然后转ascii，存入列表</span></span><br><span class="line">        strList.append(chr(int(<span class="string">""</span>.join(bitList[i * <span class="number">8</span>: i * <span class="number">8</span> + <span class="number">8</span>]), <span class="number">2</span>)))</span><br><span class="line">    <span class="comment">#print("ASCII:" + str(strList))</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>.join(strList)</span><br><span class="line"><span class="comment">##################################################################################</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:  </span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    print("执行DES加密算法")</span></span><br><span class="line"><span class="string">    M="0000000100100011010001010110011110001001101010111100110111101111"#测试的明文</span></span><br><span class="line"><span class="string">    K="0001001100110100010101110111100110011011101111001101111111110001"#密钥</span></span><br><span class="line"><span class="string">    print("明文是" + M)</span></span><br><span class="line"><span class="string">    print("加密后:" + Encryption(M, K))</span></span><br><span class="line"><span class="string">    print("解密后" + Decryption(Encryption(M,K), K))</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    print(<span class="string">"【DES程序说明】"</span>)</span><br><span class="line">    print(<span class="string">"1. 明文文件默认为同目录下的plainText.txt，如需加密其他文件，请修改16到20行代码的文件变量。"</span> )</span><br><span class="line">    print(<span class="string">"2. 密钥是随机生成的，保存在同目录的secretKey.txt文件中"</span>)</span><br><span class="line">    print(<span class="string">"3. 如果要显示加密和解密过程，可修改23行代码的打印变量，置为True"</span>)</span><br><span class="line">    print(<span class="string">"---------------------------------------------------------------------"</span>)</span><br><span class="line">    continueSign = input(<span class="string">"请按任意键执行加密和解密过程。。。"</span>)</span><br><span class="line">    print(<span class="string">"随机生成密钥中..."</span>)</span><br><span class="line">    secretKey = createSecrteKey()</span><br><span class="line">    <span class="keyword">with</span> open(SECRET_KEY_FILE, <span class="string">'w'</span>) <span class="keyword">as</span> sf:</span><br><span class="line">        sf.write(secretKey)</span><br><span class="line">    print(<span class="string">"密钥已写入文件"</span> + SECRET_KEY_FILE + <span class="string">"!"</span>)</span><br><span class="line">    secretKeyBitString = ToBitString(secretKey)</span><br><span class="line">    print(<span class="string">"得到密钥的 0 1字符串！"</span>)</span><br><span class="line">    </span><br><span class="line">    full_flag = <span class="keyword">True</span>   <span class="comment"># 分组为8的倍数的标志，为8则真</span></span><br><span class="line">    PlainTextFile = open(PLAIN_TEXT_FILE, <span class="string">'r'</span>)</span><br><span class="line">    CipherTextFile = open(CIPHER_TEXT_FILE, <span class="string">'w'</span>)</span><br><span class="line">    DecryptTextFile = open(DECRYPT_TEXT_FILE, <span class="string">'w'</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        text_8_bytes = PlainTextFile.read(<span class="number">8</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> text_8_bytes:</span><br><span class="line">            print(<span class="string">"读取明文文件到结尾啦"</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> len(text_8_bytes) != <span class="number">8</span>:</span><br><span class="line">            full_flag = <span class="keyword">False</span></span><br><span class="line">          </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            bitString = ToBitString(text_8_bytes)</span><br><span class="line">            <span class="comment"># 加密</span></span><br><span class="line">            encryptStr = Encryption(bitString, secretKeyBitString)</span><br><span class="line">            <span class="comment"># 加密结果写入文件</span></span><br><span class="line">            CipherTextFile.write(str(ToAsciiChar(encryptStr)))</span><br><span class="line">            <span class="comment"># 解密</span></span><br><span class="line">            decryptStr = Decryption(encryptStr, secretKeyBitString)</span><br><span class="line">            <span class="comment"># 解密结果写入文件 </span></span><br><span class="line">            DecryptTextFile.write(str(ToAsciiChar(decryptStr)))</span><br><span class="line">          </span><br><span class="line">        <span class="keyword">if</span> full_flag == <span class="keyword">False</span>:</span><br><span class="line">            NumOfLostBytes = <span class="number">8</span> - len(text_8_bytes)</span><br><span class="line">            bitStringList = []</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(text_8_bytes)):</span><br><span class="line">                bitStringList.append(int2bin(ord(text_8_bytes[i]), <span class="number">8</span>))</span><br><span class="line">    </span><br><span class="line">            full_8_bits = int2bin(NumOfLostBytes, <span class="number">8</span>)  <span class="comment"># 填充的比特串</span></span><br><span class="line">            <span class="comment"># 填充的字节数 转为bitstring</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(NumOfLostBytes):</span><br><span class="line">                bitStringList.append(full_8_bits)</span><br><span class="line">            bitString = <span class="string">""</span>.join(bitStringList)  <span class="comment">#补全64位分组</span></span><br><span class="line">             <span class="comment"># 加密</span></span><br><span class="line">            encryptStr = Encryption(bitString, secretKeyBitString)</span><br><span class="line">            <span class="comment"># 加密结果写入文件</span></span><br><span class="line">            CipherTextFile.write(str(ToAsciiChar(encryptStr)))</span><br><span class="line">            <span class="comment"># 解密</span></span><br><span class="line">            decryptStr = Decryption(encryptStr, secretKeyBitString)</span><br><span class="line">            <span class="comment"># 解密结果写入文件 </span></span><br><span class="line">            DecryptTextFile.write(str(ToAsciiChar(decryptStr)))</span><br><span class="line">            </span><br><span class="line">    <span class="comment"># 读取完整的8个字节分组字节，尾部填充8个字节，取值都为08</span></span><br><span class="line">    <span class="keyword">if</span> full_flag == <span class="keyword">True</span>:</span><br><span class="line">        zero_eight = <span class="string">"00001000"</span></span><br><span class="line">        tmpList = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">            tmpList.append(zero_eight)</span><br><span class="line">        bitString = <span class="string">""</span>.join(tmpList)</span><br><span class="line">        <span class="comment"># 加密</span></span><br><span class="line">        encryptStr = Encryption(bitString, secretKeyBitString)</span><br><span class="line">        <span class="comment"># 加密结果写入文件</span></span><br><span class="line">        CipherTextFile.write(str(ToAsciiChar(encryptStr)))</span><br><span class="line">        <span class="comment"># 解密</span></span><br><span class="line">        decryptStr = Decryption(encryptStr, secretKeyBitString)</span><br><span class="line">        <span class="comment"># 解密结果写入文件 </span></span><br><span class="line">        DecryptTextFile.write(str(ToAsciiChar(decryptStr)))  </span><br><span class="line">    print(<span class="string">"加密成功！"</span>)</span><br><span class="line">    print(<span class="string">"解密成功！"</span>)</span><br><span class="line">    PlainTextFile.close()</span><br><span class="line">    CipherTextFile.close()</span><br><span class="line">    DecryptTextFile.close()</span><br><span class="line">    <span class="keyword">with</span> open(PLAIN_TEXT_FILE, <span class="string">'r'</span>) <span class="keyword">as</span> pf:</span><br><span class="line">        data = pf.read()</span><br><span class="line">        print(<span class="string">"明文为："</span>)</span><br><span class="line">        print(data)</span><br><span class="line">    <span class="keyword">with</span> open(CIPHER_TEXT_FILE, <span class="string">'r'</span>) <span class="keyword">as</span> cf:</span><br><span class="line">        data = cf.read()</span><br><span class="line">        print(<span class="string">"加密结果为："</span>)</span><br><span class="line">        print(data)</span><br><span class="line">    <span class="keyword">with</span> open(DECRYPT_TEXT_FILE, <span class="string">'r'</span>) <span class="keyword">as</span> df:</span><br><span class="line">        data = df.read()</span><br><span class="line">        print(<span class="string">"解密结果为："</span>)</span><br><span class="line">        print(data)</span><br></pre></td></tr></table></figure><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>本次DES算法实践有点崎岖，主要问题在于对整个算法的熟悉以及一些细节的问题处理如ascii字符和01互换，以及在置换过程中出现的溢出问题。debug相对比较困难，因为函数的输出结果经过各种置换后，已经很难分辨是真是假，哪一步出错，只有对算法流程足够熟悉才可以顺利的完成这个实验！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、-DES算法原理概述&quot;&gt;&lt;a href=&quot;#一、-DES算法原理概述&quot; class=&quot;headerlink&quot; title=&quot;一、 DES算法原理概述&quot;&gt;&lt;/a&gt;一、 DES算法原理概述&lt;/h2&gt;&lt;h3 id=&quot;预备知识&quot;&gt;&lt;a href=&quot;#预备知识&quot; cla
      
    
    </summary>
    
    
      <category term="信息安全" scheme="https://joshuaqyh.github.io/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
      <category term="加密技术" scheme="https://joshuaqyh.github.io/tags/%E5%8A%A0%E5%AF%86%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>基于时间的概率推理</title>
    <link href="https://joshuaqyh.github.io/2018/11/26/ch15%20%E6%97%B6%E9%97%B4%E4%B8%8A%E7%9A%84%E6%A6%82%E7%8E%87%E6%8E%A8%E7%90%86/"/>
    <id>https://joshuaqyh.github.io/2018/11/26/ch15 时间上的概率推理/</id>
    <published>2018-11-26T14:44:12.876Z</published>
    <updated>2018-12-03T16:10:30.116Z</updated>
    
    <content type="html"><![CDATA[<h1 id="马尔可夫过程"><a href="#马尔可夫过程" class="headerlink" title="马尔可夫过程"></a>马尔可夫过程</h1><p>当前状态依赖于前一个状态，单阶的马尔可夫链；</p><p>当前状态依赖于前n个状态，n阶的马尔可夫链；</p><p><strong>传感器模型</strong></p><p>传感器马尔可夫假设： $$P(E_t | X_{0:t}, E_{0:t-1}) = P(E_t | X_t)$$</p><p>等式右边就是我们的传感器模型。 有$X_t$ 就可感应得到$E_t$。</p><p>物理含义就是<strong>当前的证据只与当前状态有关，即便给定了过去所有状态和证据。</strong></p><p><strong>状态转移模型</strong></p><p>$$P(X_i | X_{i-1}) = P(X_t | X_{0:t-1})$$  </p><p>物理含义就是<strong>给定前一个状态，计算当前状态的概率相当于给定所有状态时计算当前状态的概率</strong> 。给定前一个状态和给定过去所有状态的结果是一样的。</p><p>有了上述两个模型之后，加上初始状态模型$P(X_0)$, 我们就可以确定<strong>所有变量上完整的联合概率分布</strong>，从而确定其他类型的概率分布。 公式如下：</p><p>$$P(X_{0:t}, E_{1:t}) = P(X_0) \prod_{i=1}^tP(X_i | X_{i-1})P(E_i | X_i)$$</p><h2 id="形式化基本推理任务"><a href="#形式化基本推理任务" class="headerlink" title="形式化基本推理任务"></a>形式化基本推理任务</h2><ul><li>滤波。计算信念状态。给定当前所有证据，计算当前状态的后验概率分布。</li><li>预测。给定当前所有证据，计算未来状态的后验分布。</li><li>平滑。给定当前所有证据，计算过去某一状态的后验概率。</li><li>最可能的解释。给定观察序列，找到最可能生成这些观察结果的状态序列。</li><li>学习。从观察中学习，推理哪些确实会发生转移，估计。期望最大化算法。EM算法。</li></ul><h2 id="滤波过程"><a href="#滤波过程" class="headerlink" title="滤波过程"></a>滤波过程</h2><p>根据当前时刻已知的所有证据变量，计算当前状态的后验概率分布。</p><p>假设存在函数f使得 $P(X_{t+1} | e_{1:t+1}) = f(e_{t+1}, P(X_t | e_{1:t}))$,其物理含义就是已知t时刻的滤波结果$P(X_t | e_{1:t}) $和t+1时刻的证据$e_{t+1}$ ，可以计算下一个时刻t+1的滤波结果$P(X_t | e_{1:t}) $。该过程称为递归估计。</p><p>公式计算过程为：</p><p>$P(X_{t+1} | e_{1: t+1}) = P(X_{t + 1} | e_{1: t}, e_{t+1})$                          // 分解证据</p><p>​              $= \alpha P(e_{t+1} | X_{t+1}, e_{1:t})P(X_{t+1} | e_{1:t})$  // 使用贝叶斯规则</p><p>​                      $= \alpha P(e_{t+1} | X_{t+1}) P(X_{t+1} | e_{1:t})$            // 根据传感器马尔科夫假设</p><p>​            $=\alpha P(e_{t+1} | X_{t+1}) \sum_{x_t} P(X_{t+1}| x_t, e_{1:t})P(x_t | e_{1:t})$  // 分解为求和式</p><p>​            $= \alpha P(e_{t+1} | X_{t+1}) \sum_{x_t} P(X_{t+1} | x_t)P(x_t | e_{1:t})$       // <strong>马尔可夫假设</strong></p><p>上述的求和表达式中，第一个因子来自转移模型，第二个因子来自当前状态分布。由此得到了<strong>递归公式</strong> 。我们可以认为滤波估计$P(e_t | X_t)$ 是沿着序列从1到t的<strong>前向”消息”</strong>：$f_{1:t}$ ，在每一时刻发生转移时得到修正，并根据每一新的观察进行更新，该过程表达为 $f_{1:t+1} = \alpha Forward(f_{1:t}, e_{t+1})$ $Forward$函数实现了马尔可夫假设中的递归过程。</p><h2 id="平滑过程"><a href="#平滑过程" class="headerlink" title="平滑过程"></a>平滑过程</h2><p>给定现在已知的证据，计算过去某一状态的后验分布。</p><p>$$ 对于  0 \le k &lt; t\, 计算P(X_k | e_{1:t})$$ ，计算过程是:</p><p>$P(X_k | e_{1:t})  = P (X_k | e_{1: k}, e_{k+1:t})$                        //  分解证据 </p><p>​             $= \alpha P(X_k | e_{1:k})P(e_{k+1:t}| X_k, e_{1:k})  $ // 使用贝叶斯规则</p><p>​            $  = \alpha P(X_k | e_{1:k}) P (e_{k+1:t} | X_k)$          // 使用条件独立性</p><p>​            $ = \alpha f_{1:k} × b_{k+1:t}$</p><p> 结果代表 $\alpha *$ 前向消息 点乘 后向消息。</p><p>前向消息计算方法是通过从1到k的前向滤波过程，而后向消息的计算需要从时刻t到k+1进行反向递归。</p><p>$P(e_{k+1:t} | X_k) = \sum_{x_{k+1}} P(e_{k+1:t} | X_k, x_{k+1})P(X_{k+1} | X_k)$</p><p>​            $ = \sum_{x_{k+1}} P (e_{k+1:t} | x_{k+1}) P (x_{k+1} | X_k)$</p><p>​            $ = \sum_{x_{k+1}}P(e_{k+1} | x_{k+1})P(e_{k+2:t} | x_{k+1})P(x_{k+1} | X_k)$</p><h2 id="隐马尔可夫模型HMM"><a href="#隐马尔可夫模型HMM" class="headerlink" title="隐马尔可夫模型HMM"></a>隐马尔可夫模型HMM</h2><h2 id="卡尔曼滤波器"><a href="#卡尔曼滤波器" class="headerlink" title="卡尔曼滤波器"></a>卡尔曼滤波器</h2><p>使用观测到的离散量来估计连续变量的规律，使用隐马尔可夫模型来建模。</p><p>使用合适的条件概率密度来表示转移模型和传感器模型；</p><p>使用线性高斯分布，意味着下一状态$X_{t+1}$必须是当前状态$X_t$ 的线性函数，并加上一个高斯噪声$\sigma$。</p><p>$$X_{t+1} = \alpha X_t + \sigma$$</p><p>提炼为线性高斯转移模型为：</p><p>$$P(X_{t+ \gamma} = x_{t+\gamma}|X_t = x_t, X’_t = x’_t) = N (x_t + x’<em>t \gamma, \sigma^2)(x</em>{t+\gamma})$$</p><h2 id="动态贝叶斯网络DBN"><a href="#动态贝叶斯网络DBN" class="headerlink" title="动态贝叶斯网络DBN"></a>动态贝叶斯网络DBN</h2><p>每一个隐马尔可夫模型都可以表示为只有一个状态变量和一个证据变量的动态贝叶斯网络。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;马尔可夫过程&quot;&gt;&lt;a href=&quot;#马尔可夫过程&quot; class=&quot;headerlink&quot; title=&quot;马尔可夫过程&quot;&gt;&lt;/a&gt;马尔可夫过程&lt;/h1&gt;&lt;p&gt;当前状态依赖于前一个状态，单阶的马尔可夫链；&lt;/p&gt;
&lt;p&gt;当前状态依赖于前n个状态，n阶的马尔可夫链；&lt;/
      
    
    </summary>
    
    
      <category term="人工智能" scheme="https://joshuaqyh.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
      <category term="马尔可夫场" scheme="https://joshuaqyh.github.io/tags/%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>贝叶斯网络基础知识</title>
    <link href="https://joshuaqyh.github.io/2018/11/26/ch%2013%E4%B8%8D%E7%A1%AE%E5%AE%9A%E6%80%A7%E7%9A%84%E9%87%8F%E5%8C%96/"/>
    <id>https://joshuaqyh.github.io/2018/11/26/ch 13不确定性的量化/</id>
    <published>2018-11-26T12:01:22.786Z</published>
    <updated>2018-11-28T07:13:44.223Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-概率分布"><a href="#1-概率分布" class="headerlink" title="1. 概率分布"></a>1. 概率分布</h1><ul><li><p>先验概率等于无条件概率 $P(A)$</p></li><li><p>后验概率等于条件概率 $P(A|B)​$ </p></li><li><p>联合概率分布是由$A ,B$不同取值得到的一个$P(A,B )$概率分布。</p></li><li><p>完全联合分布中的<strong>边缘概率</strong>，是指某一随机变量成立的无条件概率，根据联合分布概率表累加计算可以得到。求得边缘概率的过程称为<strong>边缘化或者是求和消元化</strong>。</p><p>$P(A) = \sum_{z∈Z}P(A, z)$  求和消元化的联合分布表示</p><p>$P(A) = \sum_zP(A|z)P(z)$  根据乘法法则$P(A,z) = P(A | z) P(z)$ 可以求得求和消元化的条件概率分布。该规则也称条件化。</p></li><li><p>归一化常数 $\alpha$: $P(A |B) = \alpha P(AB)$。将$\alpha$替代$1 / P(B)$ 。</p></li><li><p>$P(X|e) = \alpha P(X ,e) = \alpha \sum_yP(X,e,y)$ 。</p></li></ul><h1 id="2-独立性"><a href="#2-独立性" class="headerlink" title="2. 独立性"></a>2. 独立性</h1><p>存在独立性，可进行概率分解降低模型的复杂度。</p><p>！条件独立的含义：事件A，B，C, 若在A概率未知的情况下，AB不独立，如果A概率已知，那么AB就存在条件独立的关系。</p><p>独立性的一个表现就是 $P(A | B) = P (A)$ ，当B与A无互相独立互不影响的时候。</p><p>其他表示: $ P(AB ) = P(A)P(B)$</p><h1 id="3-贝叶斯"><a href="#3-贝叶斯" class="headerlink" title="3. 贝叶斯"></a>3. 贝叶斯</h1><p>$P(Y|X)P(X) = P(X|Y)P(Y) = P(XY)$</p><p>从概率来看到原因的概率分布。</p><p>$ P(Y | X) = \frac{P(X | Y)P(Y)}{P(X)}$</p><p>如果某人是好人(概率为$P(Y)$),  某人偷东西的事件概率为($X$) ，如果发生了A偷东西$P(Y|X)$，那么A是好人的概率$P(Y | X)$。</p><p>放在实例中来观察贝叶斯公式的简单应用。在医疗诊断中，如果医生知道某一疾病发生某些症状的概率，那么可以利用贝叶斯公式估计得知当病人发生某症状时，推测病人发生某病的概率。</p><p>贝叶斯公式其实是反映了原因和结果之间的概率关系。</p><p>$ P(Cause | Effect) = \frac{P(Effect | Cause)P(Cause)}{P(Effect)}= \alpha P(Effect | Cause)P(Cause)$</p><p> 其中的 $P(Cause) P (Effect)$  二者都属于先验概率, $\alpha$ 是让  $P(Effect | Cause)$归一化的常数。</p><ul><li>朴素贝叶斯</li></ul><p>$P(Cause, Effect_1, Effect_2, Effect_3….Effect_n) = P(Cause) \prod_n P(Effect_i | Cause)$</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-概率分布&quot;&gt;&lt;a href=&quot;#1-概率分布&quot; class=&quot;headerlink&quot; title=&quot;1. 概率分布&quot;&gt;&lt;/a&gt;1. 概率分布&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;先验概率等于无条件概率 $P(A)$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;后验概率等于条
      
    
    </summary>
    
    
      <category term="人工智能" scheme="https://joshuaqyh.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
      <category term="贝叶斯网络" scheme="https://joshuaqyh.github.io/tags/%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>markdown 数学公式表示大集合</title>
    <link href="https://joshuaqyh.github.io/2018/10/22/markdown-%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E8%A1%A8%E7%A4%BA%E5%A4%A7%E9%9B%86%E5%90%88/"/>
    <id>https://joshuaqyh.github.io/2018/10/22/markdown-数学公式表示大集合/</id>
    <published>2018-10-22T05:47:02.506Z</published>
    <updated>2018-10-22T05:47:02.773Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MarkDown-插入数学公式实验大集合"><a href="#MarkDown-插入数学公式实验大集合" class="headerlink" title="MarkDown 插入数学公式实验大集合"></a>MarkDown 插入数学公式实验大集合</h1><h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h2><blockquote><p>最近在学习一些机器学习相关的知识，想把自己学习的东西通过 MD 的形式在线记录下来，但是之前一直没有开始行动，因为里面的公式什么的感觉实在是麻烦。于是今天打算花点时间了解一下<a href="https://link.juejin.im/?target=http%3A%2F%2Fblog.csdn.net%2Fxiahouzuoxin%2Farticle%2Fdetails%2F26478179" target="_blank" rel="noopener"><code>如何在 markdown 中插入数学公式</code></a>，发现其实很简单，大概花一个小时左右就能知道如何编写了。</p></blockquote><h2 id="1-基础认识"><a href="#1-基础认识" class="headerlink" title="1. 基础认识"></a>1. 基础认识</h2><blockquote><p>笔者认为所谓插入数学公式其实就是引入一种规则，然后通过<code>模板？</code>渲染成公式，不知道这个理解对不对，不对望指正。其实你以前可能就看到过有的博客本该出现公式的时候不显示，点击后会链接到一个 new tab 然后显示一张公式的图片，有时却出现一大堆的代码。这里就是通过这段代码解析成公式然后显示的。</p></blockquote><p>这里我们选取 MathJax 引擎。 引入脚本，把下面代码插入 MD 文件里面，如果你怕这份在线文件源别人访问不到的话，可以把这个下下来自己做一个源，这样比较稳定缺点是要自己手动更新源。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default&quot;&gt;&lt;/script&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>好了到这里就可以插入公式了，如果你懂 LaTeX 的话那看一两个例子就知道了，不懂也没关系，自己写一写代码就知道了，可以找一个可以预览 MD 的工具一直尝试。</p><h3 id="1-1-插入方式"><a href="#1-1-插入方式" class="headerlink" title="1.1 插入方式"></a>1.1 插入方式</h3><blockquote><p>这里分两种，一种是行间插入，另一种是另取一行</p></blockquote><h4 id="1-1-1-行间插入"><a href="#1-1-1-行间插入" class="headerlink" title="1.1.1 行间插入"></a>1.1.1 行间插入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\\(a + b\\)</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>这里是行间插入公式 a + b : (a + b)，特点就是通过<code>(</code> 和 <code>)</code> 包含公式，然后为了模板引擎能够区分该 <code>(</code> 不是普通文本的 <code>(</code> 而是公式的 <code>(</code>，通过 <code>\\</code> 转义一下。这样应该就很好理解这个语法构成了。注意这里方式不唯一，这是笔者喜欢的方式，其他的使用方式自行搜索。下面的介绍同样是这样。</p><p>PS: 这里掘金使用的是 <code>$a + b$</code> : <figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://juejin.im/equation?tex=a%20%2B%20b" alt="a + b" title="">                </div>                <div class="image-caption">a + b</div>            </figure>，如果对您的阅读产生印象，请看最后说明，这里就不做一一更改了。谢谢。</p><h4 id="1-1-2-另取一行"><a href="#1-1-2-另取一行" class="headerlink" title="1.1.2 另取一行"></a>1.1.2 另取一行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$$a + b$$</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>这里是另取一行</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://juejin.im/equation?tex=a%20%2B%20b" alt="a + b" title="">                </div>                <div class="image-caption">a + b</div>            </figure><p>特点就是通过<code>$$</code>包含公式。</p><p>笔者认为第二种方式更好，以下没看 JS 源码纯属猜测：行间的需要考虑到当前行的行高并对公式进行处理，而另取一行就更简单一些，可能解析起来更快。最最最最最最主要是看起来漂亮 ^_^ 不太要考虑空间不够换行。</p><h3 id="1-2-基本类型的插入"><a href="#1-2-基本类型的插入" class="headerlink" title="1.2 基本类型的插入"></a>1.2 基本类型的插入</h3><blockquote><p>这里对 <a href="https://link.juejin.im/?target=http%3A%2F%2Fwww.cnblogs.com%2Fhoukai%2Fp%2F3399646.html" target="_blank" rel="noopener">@houkai ：LATEX数学公式基本语法</a> 的思路稍加修改，然后进行介绍。</p></blockquote><h4 id="1-2-1-上、下标"><a href="#1-2-1-上、下标" class="headerlink" title="1.2.1 上、下标"></a>1.2.1 上、下标</h4><p>先看结果再总结语法吧。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$$x_1$$</span><br><span class="line"></span><br><span class="line">$$x_1^2$$</span><br><span class="line"></span><br><span class="line">$$x^2_1$$</span><br><span class="line"></span><br><span class="line">$$x_&#123;22&#125;^&#123;(n)&#125;$$</span><br><span class="line"></span><br><span class="line">$$&#123;&#125;^*x^*$$</span><br><span class="line"></span><br><span class="line">$$x_&#123;balabala&#125;^&#123;bala&#125;$$</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://juejin.im/equation?tex=x_1" alt="x_1" title="">                </div>                <div class="image-caption">x_1</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://juejin.im/equation?tex=x_1%5E2" alt="x_1^2" title="">                </div>                <div class="image-caption">x_1^2</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://juejin.im/equation?tex=x%5E2_1" alt="x^2_1" title="">                </div>                <div class="image-caption">x^2_1</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://juejin.im/equation?tex=x_%7B22%7D%5E%7B(n)%7D" alt="x_{22}^{(n)}" title="">                </div>                <div class="image-caption">x_{22}^{(n)}</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://juejin.im/equation?tex=%7B%7D%5E*x%5E*" alt="{}^*x^*" title="">                </div>                <div class="image-caption">{}^*x^*</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://juejin.im/equation?tex=x_%7Bbalabala%7D%5E%7Bbala%7D" alt="x_{balabala}^{bala}" title="">                </div>                <div class="image-caption">x_{balabala}^{bala}</div>            </figure><p>可以看到 <code>x</code> 元素的上标通过 <code>^</code> 符号后接的内容体现，下表通过 <code>_</code> 符号后接的内容体现，多于一位是要加 <code>{}</code> 包裹的。 笔者习惯先下标后上标的写法，和我的书写习惯一致：<code>x_{balabala}^{bala}</code>，不管你使用哪一种风格，最好自己注意统一，不要混用。</p><h4 id="1-2-2-分式"><a href="#1-2-2-分式" class="headerlink" title="1.2.2 分式"></a>1.2.2 分式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$$\frac&#123;x+y&#125;&#123;2&#125;$$</span><br><span class="line"></span><br><span class="line">$$\frac&#123;1&#125;&#123;1+\frac&#123;1&#125;&#123;2&#125;&#125;$$</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://juejin.im/equation?tex=%5Cfrac%7Bx%2By%7D%7B2%7D" alt="frac{x+y}{2}" title="">                </div>                <div class="image-caption">frac{x+y}{2}</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://juejin.im/equation?tex=%5Cfrac%7B1%7D%7B1%2B%5Cfrac%7B1%7D%7B2%7D%7D" alt="frac{1}{1+frac{1}{2}}" title="">                </div>                <div class="image-caption">frac{1}{1+frac{1}{2}}</div>            </figure><p>这里就出现了一个 <code>frac{}{}</code> 函数的东西，同样，为了区分这是函数不是几个字母，通过 <code>\frac</code>转义，于是 <code>frac</code> 被解析成函数，然后第一个 <code>{}</code> 里面的被解析成分子，第二个 <code>{}</code> 被解析成分母。这里可以试试分数的行间解析<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://juejin.im/equation?tex=%5Cfrac%7B1%7D%7B1%2B%5Cfrac%7B1%7D%7B2%7D%7D" alt="frac{1}{1+frac{1}{2}}" title="">                </div>                <div class="image-caption">frac{1}{1+frac{1}{2}}</div>            </figure>。我要看行间填充效果我要看行间填充效果我要看行间填充效果我要看行间填充效果我要看行间填充效果我要看行间填充效果我要看行间填充效果我要看行间填充效果我要看行间填充效果我要看行间填充效果我要看行间填充效果我要看行间填充效果。</p><h4 id="1-2-3-根式"><a href="#1-2-3-根式" class="headerlink" title="1.2.3 根式"></a>1.2.3 根式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$$\sqrt&#123;2&#125;&lt;\sqrt[3]&#123;3&#125;$$</span><br><span class="line"></span><br><span class="line">$$\sqrt&#123;1+\sqrt[p]&#123;1+a^2&#125;&#125;$$</span><br><span class="line"></span><br><span class="line">$$\sqrt&#123;1+\sqrt[^p\!]&#123;1+a^2&#125;&#125;$$</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://juejin.im/equation?tex=%5Csqrt%7B2%7D%3C%5Csqrt%5B3%5D%7B3%7D" alt="sqrt{2}<sqrt[3]{3}" title="">                </div>                <div class="image-caption">sqrt{2}<sqrt[3]{3}< div="">            </sqrt[3]{3}<></div></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://juejin.im/equation?tex=%5Csqrt%7B1%2B%5Csqrt%5Bp%5D%7B1%2Ba%5E2%7D%7D" alt="sqrt{1+sqrt[p]{1+a^2}}" title="">                </div>                <div class="image-caption">sqrt{1+sqrt[p]{1+a^2}}</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://juejin.im/equation?tex=%5Csqrt%7B1%2B%5Csqrt%5B%5Ep%5D%7B1%2Ba%5E2%7D%7D" alt="sqrt{1+sqrt[^p]{1+a^2}}" title="">                </div>                <div class="image-caption">sqrt{1+sqrt[^p]{1+a^2}}</div>            </figure><p>读到这里你已经了解了函数的概念，那么这历久很简单了，语法就是 <code>sqrt[]{}</code> 。<code>[]</code> 中代表是几次根式，<code>{}</code> 代表根号下的表达式。第二和第三个的区别在于为了美观微调位置 ^_^。</p><h4 id="1-2-4-求和、积分"><a href="#1-2-4-求和、积分" class="headerlink" title="1.2.4 求和、积分"></a>1.2.4 求和、积分</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$$\sum_&#123;k=1&#125;^&#123;n&#125;\frac&#123;1&#125;&#123;k&#125;$$</span><br><span class="line"></span><br><span class="line">$\sum_&#123;k=1&#125;^n\frac&#123;1&#125;&#123;k&#125;$</span><br><span class="line"></span><br><span class="line">$$\int_a^b f(x)dx$$</span><br><span class="line"></span><br><span class="line">$\int_a^b f(x)dx$</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://juejin.im/equation?tex=%5Csum_%7Bk%3D1%7D%5E%7Bn%7D%5Cfrac%7B1%7D%7Bk%7D" alt="sum_{k=1}^{n}frac{1}{k}" title="">                </div>                <div class="image-caption">sum_{k=1}^{n}frac{1}{k}</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://juejin.im/equation?tex=%5Csum_%7Bk%3D1%7D%5En%5Cfrac%7B1%7D%7Bk%7D" alt="sum_{k=1}^nfrac{1}{k}" title="">                </div>                <div class="image-caption">sum_{k=1}^nfrac{1}{k}</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://juejin.im/equation?tex=%5Cint_%7Ba%7D%5Eb%20f(x)dx" alt="int_{a}^b f(x)dx" title="">                </div>                <div class="image-caption">int_{a}^b f(x)dx</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://juejin.im/equation?tex=%5Cint_a%5Eb%20f(x)dx" alt="int_a^b f(x)dx" title="">                </div>                <div class="image-caption">int_a^b f(x)dx</div>            </figure><p>这里很容易看出求和函数表达式 <code>sum_{起点}^{终点}表达式</code>，积分函数表达式 <code>int_下限^上限 被积函数d被积量</code>。还有一个有趣的是行间的公式都被压缩了。</p><h4 id="1-2-5-空格"><a href="#1-2-5-空格" class="headerlink" title="1.2.5 空格"></a>1.2.5 空格</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">紧贴 $a\!b$</span><br><span class="line">没有空格 $ab$</span><br><span class="line">小空格 a\,b</span><br><span class="line">中等空格 a\;b</span><br><span class="line">大空格 a\ b</span><br><span class="line">quad空格 $a\quad b$</span><br><span class="line">两个quad空格 $a\qquad b$</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://juejin.im/equation?tex=a%5C!b" alt="a!b" title="">                </div>                <div class="image-caption">a!b</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://juejin.im/equation?tex=ab" alt="ab" title="">                </div>                <div class="image-caption">ab</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://juejin.im/equation?tex=a%5C%2Cb" alt="a,b" title="">                </div>                <div class="image-caption">a,b</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://juejin.im/equation?tex=a%5C%3Bb" alt="a;b" title="">                </div>                <div class="image-caption">a;b</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://juejin.im/equation?tex=a%5C%20b" alt="a b" title="">                </div>                <div class="image-caption">a b</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://juejin.im/equation?tex=a%5Cquad%20b" alt="aquad b" title="">                </div>                <div class="image-caption">aquad b</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://juejin.im/equation?tex=a%5Cqquad%20b" alt="aqquad b" title="">                </div>                <div class="image-caption">aqquad b</div>            </figure><p>这个直接看上面的文字，介绍很清楚，主要指微调距离，使得公式更加漂亮。请比较下面的积分公式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$$\int_a^b f(x)\mathrm&#123;d&#125;x$$</span><br><span class="line"></span><br><span class="line">$$\int_a^b f(x)\,\mathrm&#123;d&#125;x$$</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://juejin.im/equation?tex=%5Cint_a%5Eb%20f(x)%5Cmathrm%7Bd%7Dx" alt="int_a^b f(x)mathrm{d}x" title="">                </div>                <div class="image-caption">int_a^b f(x)mathrm{d}x</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://juejin.im/equation?tex=%5Cint_a%5Eb%20f(x)%5C%2C%5Cmathrm%7Bd%7Dx" alt="int_a^b f(x),mathrm{d}x" title="">                </div>                <div class="image-caption">int_a^b f(x),mathrm{d}x</div>            </figure><h4 id="1-2-6-公式界定符"><a href="#1-2-6-公式界定符" class="headerlink" title="1.2.6 公式界定符"></a>1.2.6 公式界定符</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">\\( ( \\)</span><br><span class="line">\\( ) \\)</span><br><span class="line">\\( [ \\)</span><br><span class="line">\\( ] \\)</span><br><span class="line">\\( \\&#123; \\)</span><br><span class="line">\\( \\&#125; \\)</span><br><span class="line">\\( | \\)</span><br><span class="line">\\( \\| \\)</span><br><span class="line"></span><br><span class="line">掘金：</span><br><span class="line">$ ( $</span><br><span class="line">$ ) $</span><br><span class="line">$ [ $</span><br><span class="line">$ ] $</span><br><span class="line">$ \&#123; $</span><br><span class="line">$ \&#125; $</span><br><span class="line">$ | $</span><br><span class="line">$ \| $</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>主要符号有 <figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://juejin.im/equation?tex=%5C%7C" alt="(](https://juejin.im/equation?tex=() ![)](https://juejin.im/equation?tex=)) ![[](https://juejin.im/equation?tex=%5B) ![]](https://juejin.im/equation?tex=%5D) ![{](https://juejin.im/equation?tex=%5C%7B) ![}](https://juejin.im/equation?tex=%5C%7D) ![|](https://juejin.im/equation?tex=%7C) ![|" title="">                </div>                <div class="image-caption">(](https://juejin.im/equation?tex=() ![)](https://juejin.im/equation?tex=)) ![[](https://juejin.im/equation?tex=%5B) ![]](https://juejin.im/equation?tex=%5D) ![{](https://juejin.im/equation?tex=%5C%7B) ![}](https://juejin.im/equation?tex=%5C%7D) ![|](https://juejin.im/equation?tex=%7C) ![|</div>            </figure> 那么如何使用呢？ 通过 <code>\left</code> 和 <code>\right</code> 后面跟界定符来对同时进行界定。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$$\left(\sum_&#123;k=\frac&#123;1&#125;&#123;2&#125;&#125;^&#123;N^2&#125;\frac&#123;1&#125;&#123;k&#125;\right)$$</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://juejin.im/equation?tex=%5Cleft(%5Csum_%7Bk%3D%5Cfrac%7B1%7D%7B2%7D%7D%5E%7BN%5E2%7D%5Cfrac%7B1%7D%7Bk%7D%5Cright)" alt="left(sum_{k=frac{1}{2}}^{N^2}frac{1}{k}ight)" title="">                </div>                <div class="image-caption">left(sum_{k=frac{1}{2}}^{N^2}frac{1}{k}ight)</div>            </figure><h4 id="1-2-7-矩阵"><a href="#1-2-7-矩阵" class="headerlink" title="1.2.7 矩阵"></a>1.2.7 矩阵</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$$\begin&#123;matrix&#125;1 &amp; 2\\\\3 &amp;4\end&#123;matrix&#125;$$</span><br><span class="line"></span><br><span class="line">$$\begin&#123;pmatrix&#125;1 &amp; 2\\\\3 &amp;4\end&#123;pmatrix&#125;$$</span><br><span class="line"></span><br><span class="line">$$\begin&#123;bmatrix&#125;1 &amp; 2\\\\3 &amp;4\end&#123;bmatrix&#125;$$</span><br><span class="line"></span><br><span class="line">$$\begin&#123;Bmatrix&#125;1 &amp; 2\\\\3 &amp;4\end&#123;Bmatrix&#125;$$</span><br><span class="line"></span><br><span class="line">$$\begin&#123;vmatrix&#125;1 &amp; 2\\\\3 &amp;4\end&#123;vmatrix&#125;$$</span><br><span class="line"></span><br><span class="line">$$\left|\begin&#123;matrix&#125;1 &amp; 2\\\\3 &amp;4\end&#123;matrix&#125;\right|$$</span><br><span class="line"></span><br><span class="line">$$\begin&#123;Vmatrix&#125;1 &amp; 2\\\\3 &amp;4\end&#123;Vmatrix&#125;$$</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://juejin.im/equation?tex=%5Cbegin%7Bmatrix%7D1%20%26%202%5C%5C%5C%5C3%20%264%5Cend%7Bmatrix%7D" alt="begin{matrix}1 & 2\\3 &4end{matrix}" title="">                </div>                <div class="image-caption">begin{matrix}1 & 2\\3 &4end{matrix}</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://juejin.im/equation?tex=%5Cbegin%7Bpmatrix%7D1%20%26%202%5C%5C%5C%5C3%20%264%5Cend%7Bpmatrix%7D" alt="begin{pmatrix}1 & 2\\3 &4end{pmatrix}" title="">                </div>                <div class="image-caption">begin{pmatrix}1 & 2\\3 &4end{pmatrix}</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://juejin.im/equation?tex=%5Cbegin%7Bbmatrix%7D1%20%26%202%5C%5C%5C%5C3%20%264%5Cend%7Bbmatrix%7D" alt="begin{bmatrix}1 & 2\\3 &4end{bmatrix}" title="">                </div>                <div class="image-caption">begin{bmatrix}1 & 2\\3 &4end{bmatrix}</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://juejin.im/equation?tex=%5Cbegin%7BBmatrix%7D1%20%26%202%5C%5C%5C%5C3%20%264%5Cend%7BBmatrix%7D" alt="begin{Bmatrix}1 & 2\\3 &4end{Bmatrix}" title="">                </div>                <div class="image-caption">begin{Bmatrix}1 & 2\\3 &4end{Bmatrix}</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://juejin.im/equation?tex=%5Cbegin%7Bvmatrix%7D1%20%26%202%5C%5C%5C%5C3%20%264%5Cend%7Bvmatrix%7D" alt="begin{vmatrix}1 & 2\\3 &4end{vmatrix}" title="">                </div>                <div class="image-caption">begin{vmatrix}1 & 2\\3 &4end{vmatrix}</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://juejin.im/equation?tex=%5Cleft%7C%5Cbegin%7Bmatrix%7D1%20%26%202%5C%5C%5C%5C3%20%264%5Cend%7Bmatrix%7D%5Cright%7C" alt="left|begin{matrix}1 & 2\\3 &4end{matrix}ight|" title="">                </div>                <div class="image-caption">left|begin{matrix}1 & 2\\3 &4end{matrix}ight|</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://juejin.im/equation?tex=%5Cbegin%7BVmatrix%7D1%20%26%202%5C%5C%5C%5C3%20%264%5Cend%7BVmatrix%7D" alt="begin{Vmatrix}1 & 2\\3 &4end{Vmatrix}" title="">                </div>                <div class="image-caption">begin{Vmatrix}1 & 2\\3 &4end{Vmatrix}</div>            </figure><p>类似于 left right，这里是 begin 和 end。而且里面有具体的矩阵语法，<code>&amp;</code> 区分行间元素，<code>\\\\</code>代表换行。可以理解为 HTML 的标签之类的。</p><h4 id="1-2-8-排版数组"><a href="#1-2-8-排版数组" class="headerlink" title="1.2.8 排版数组"></a>1.2.8 排版数组</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">\mathbf&#123;X&#125; =</span><br><span class="line">\left( \begin&#123;array&#125;&#123;ccc&#125;</span><br><span class="line">x\_&#123;11&#125; &amp; x\_&#123;12&#125; &amp; \ldots \\\\</span><br><span class="line">x\_&#123;21&#125; &amp; x\_&#123;22&#125; &amp; \ldots \\\\</span><br><span class="line">\vdots &amp; \vdots &amp; \ddots</span><br><span class="line">\end&#123;array&#125; \right)</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://juejin.im/equation?tex=%5Cmathbf%7BX%7D%20%3D%0A%5Cleft(%20%5Cbegin%7Barray%7D%7Bccc%7D%0Ax%5C_%7B11%7D%20%26%20x%5C_%7B12%7D%20%26%20%5Cldots%20%5C%5C%5C%5C%0Ax%5C_%7B21%7D%20%26%20x%5C_%7B22%7D%20%26%20%5Cldots%20%5C%5C%5C%5C%0A%5Cvdots%20%26%20%5Cvdots%20%26%20%5Cddots%0A%5Cend%7Barray%7D%20%5Cright)" alt="mathbf{X} =left( begin{array}{ccc}x_{11} & x_{12} & ldots \\x_{21} & x_{22} & ldots \\vdots & vdots & ddotsend{array} ight)" title="">                </div>                <div class="image-caption">mathbf{X} =left( begin{array}{ccc}x_{11} & x_{12} & ldots \\x_{21} & x_{22} & ldots \\vdots & vdots & ddotsend{array} ight)</div>            </figure><h2 id="2-常用公式举例"><a href="#2-常用公式举例" class="headerlink" title="2. 常用公式举例"></a>2. 常用公式举例</h2><blockquote><p>持续更新……</p></blockquote><h3 id="2-1-多行公式"><a href="#2-1-多行公式" class="headerlink" title="2.1 多行公式"></a>2.1 多行公式</h3><blockquote><p>主要是各种方程的表达</p></blockquote><h4 id="2-1-1-长公式"><a href="#2-1-1-长公式" class="headerlink" title="2.1.1 长公式"></a>2.1.1 长公式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin&#123;multline&#125;</span><br><span class="line">x = a+b+c+&#123;&#125; \\\\</span><br><span class="line">d+e+f+g</span><br><span class="line">\end&#123;multline&#125;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">\begin&#123;aligned&#125;</span><br><span class="line">x =&#123;&#125;&amp; a+b+c+&#123;&#125; \\\\</span><br><span class="line">&amp;d+e+f+g</span><br><span class="line">\end&#123;aligned&#125;</span><br><span class="line">$$</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>不对齐</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://juejin.im/equation?tex=%5Cleft%7C%20%5Cbegin%7Bmultline%7D%0Ax%20%3D%20a%2Bb%2Bc%2B%7B%7D%20%5C%5C%5C%5C%0Ad%2Be%2Bf%2Bg%0A%5Cend%7Bmultline%7D%20%5Cright%7C" alt="left| begin{multline}x = a+b+c+{} \\d+e+f+gend{multline} ight|" title="">                </div>                <div class="image-caption">left| begin{multline}x = a+b+c+{} \\d+e+f+gend{multline} ight|</div>            </figure><p>对齐</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://juejin.im/equation?tex=%5Cleft%7C%20%5Cbegin%7Baligned%7D%0Ax%20%3D%7B%7D%26%20a%2Bb%2Bc%2B%7B%7D%20%5C%5C%5C%5C%0A%26d%2Be%2Bf%2Bg%0A%5Cend%7Baligned%7D%20%5Cright%7C" alt="left| begin{aligned}x ={}& a+b+c+{} \\&d+e+f+gend{aligned} ight|" title="">                </div>                <div class="image-caption">left| begin{aligned}x ={}& a+b+c+{} \\&d+e+f+gend{aligned} ight|</div>            </figure><h4 id="2-1-2-公式组"><a href="#2-1-2-公式组" class="headerlink" title="2.1.2 公式组"></a>2.1.2 公式组</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin&#123;gather&#125;</span><br><span class="line">a = b+c+d \\\\</span><br><span class="line">x = y+z</span><br><span class="line">\end&#123;gather&#125;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">\begin&#123;align&#125;</span><br><span class="line">a &amp;= b+c+d \\\\</span><br><span class="line">x &amp;= y+z</span><br><span class="line">\end&#123;align&#125;</span><br><span class="line">$$</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://juejin.im/equation?tex=%5Cbegin%7Bgather%7D%0Aa%20%3D%20b%2Bc%2Bd%20%5C%5C%5C%5C%0Ax%20%3D%20y%2Bz%0A%5Cend%7Bgather%7D" alt="begin{gather}a = b+c+d \\x = y+zend{gather}" title="">                </div>                <div class="image-caption">begin{gather}a = b+c+d \\x = y+zend{gather}</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://juejin.im/equation?tex=%5Cbegin%7Balign%7D%0Aa%20%26%3D%20b%2Bc%2Bd%20%5C%5C%5C%5C%0Ax%20%26%3D%20y%2Bz%0A%5Cend%7Balign%7D" alt="begin{align}a &= b+c+d \\x &= y+zend{align}" title="">                </div>                <div class="image-caption">begin{align}a &= b+c+d \\x &= y+zend{align}</div>            </figure><h4 id="2-1-3-分段函数"><a href="#2-1-3-分段函数" class="headerlink" title="2.1.3 分段函数"></a>2.1.3 分段函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">y=\begin&#123;cases&#125;</span><br><span class="line">-x,\quad x\leq 0 \\\\</span><br><span class="line">x,\quad x&gt;0</span><br><span class="line">\end&#123;cases&#125;</span><br><span class="line">$$</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://juejin.im/equation?tex=y%3D%5Cbegin%7Bcases%7D%0A-x%2C%5Cquad%20x%5Cleq%200%20%5C%5C%5C%5C%0Ax%2C%5Cquad%20x%3E0%0A%5Cend%7Bcases%7D" alt="y=begin{cases}-x,quad xleq 0 \\x,quad x>0end{cases}" title="">                </div>                <div class="image-caption">y=begin{cases}-x,quad xleq 0 \\x,quad x>0end{cases}</div>            </figure><p>里面用到了 (\leq) 符号，下一章会介绍常用数学符号。</p><h3 id="2-2-数组的其他使用"><a href="#2-2-数组的其他使用" class="headerlink" title="2.2 数组的其他使用"></a>2.2 数组的其他使用</h3><h4 id="2-2-1-划线"><a href="#2-2-1-划线" class="headerlink" title="2.2.1 划线"></a>2.2.1 划线</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\left(\begin&#123;array&#125;&#123;|c|c|&#125;</span><br><span class="line">1 &amp; 2 \\\\</span><br><span class="line">\\hline</span><br><span class="line">3 &amp; 4</span><br><span class="line">\end&#123;array&#125;\right)</span><br><span class="line">$$</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://juejin.im/equation?tex=%5Cleft(%20%5Cbegin%7Barray%7D%7B%7Cc%7Cc%7C%7D%0A1%20%26%20%5Cldots%20%5C%5C%5C%5C%0A%5Chline%0A%5Cvdots%20%26%20%5Cddots%20%0A%5Cend%7Barray%7D%20%5Cright)" alt="left( begin{array}{|c|c|}1 & ldots \\hlinevdots & ddots end{array} ight)" title="">                </div>                <div class="image-caption">left( begin{array}{|c|c|}1 & ldots \\hlinevdots & ddots end{array} ight)</div>            </figure><h4 id="2-2-2-制表"><a href="#2-2-2-制表" class="headerlink" title="2.2.2 制表"></a>2.2.2 制表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin&#123;array&#125;&#123;|c|c|&#125;</span><br><span class="line">\hline</span><br><span class="line">&#123;1111111111&#125; &amp; 2 \\\\</span><br><span class="line">\hline</span><br><span class="line">3 &amp; 4 \\\\</span><br><span class="line">\hline</span><br><span class="line">\end&#123;array&#125;</span><br><span class="line">$$</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://juejin.im/equation?tex=%5Cbegin%7Barray%7D%7B%7Cc%7Cc%7C%7D%0A%5Chline%0A%7B1111111111%7D%20%26%202%20%5C%5C%5C%5C%0A%5Chline%0A%7Bbalabala%7D%20%26%20%E4%BD%A0%E5%A5%BD%E5%95%8A%20%5C%5C%5C%5C%0A%5Chline%0A%5Cend%7Barray%7D" alt="begin{array}{|c|c|}hline{1111111111} & 2 \\hline{balabala} & 你好啊 \\hlineend{array}" title="">                </div>                <div class="image-caption">begin{array}{|c|c|}hline{1111111111} & 2 \\hline{balabala} & 你好啊 \\hlineend{array}</div>            </figure><p>可以看到，其实其他很多东西都可以很灵活的表达出来。碰到其他有趣的我会继续写出来的。</p><h2 id="3-常用数学符号"><a href="#3-常用数学符号" class="headerlink" title="3. 常用数学符号"></a>3. 常用数学符号</h2><blockquote><p>这里提供一个<a href="https://link.juejin.im/?target=http%3A%2F%2Ffiles.cnblogs.com%2Fhoukai%2FLATEX%25E6%2595%25B0%25E5%25AD%25A6%25E7%25AC%25A6%25E5%258F%25B7%25E8%25A1%25A8.rar" target="_blank" rel="noopener">文档下载</a>，如果上面的链接失效，也可以到我的 <a href="https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fmk43%2FBlogResource%2Fblob%2Fmaster%2FLaTex%2FLATEX%25E6%2595%25B0%25E5%25AD%25A6%25E7%25AC%25A6%25E5%258F%25B7%25E8%25A1%25A8.pdf" target="_blank" rel="noopener">GitHub 下载 pdf 版</a>。下面举几个例子。</p></blockquote><h3 id="3-1-希腊字母"><a href="#3-1-希腊字母" class="headerlink" title="3.1 希腊字母"></a>3.1 希腊字母</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin&#123;array&#125;&#123;|c|c|c|c|c|c|c|c|&#125;</span><br><span class="line">\hline</span><br><span class="line">&#123;\alpha&#125; &amp; &#123;\backslash alpha&#125; &amp; &#123;\theta&#125; &amp; &#123;\backslash theta&#125; &amp; &#123;o&#125; &amp; &#123;o&#125; &amp; &#123;\upsilon&#125; &amp; &#123;\backslash upsilon&#125; \\\\</span><br><span class="line">\hline</span><br><span class="line">&#123;\beta&#125; &amp; &#123;\backslash beta&#125; &amp; &#123;\vartheta&#125; &amp; &#123;\backslash vartheta&#125; &amp; &#123;\pi&#125; &amp; &#123;\backslash pi&#125; &amp; &#123;\phi&#125; &amp; &#123;\backslash phi&#125; \\\\</span><br><span class="line">\hline</span><br><span class="line">&#123;\gamma&#125; &amp; &#123;\backslash gamma&#125; &amp; &#123;\iota&#125; &amp; &#123;\backslash iota&#125; &amp; &#123;\varpi&#125; &amp; &#123;\backslash varpi&#125; &amp; &#123;\varphi&#125; &amp; &#123;\backslash varphi&#125; \\\\</span><br><span class="line">\hline</span><br><span class="line">&#123;\delta&#125; &amp; &#123;\backslash delta&#125; &amp; &#123;\kappa&#125; &amp; &#123;\backslash kappa&#125; &amp; &#123;\rho&#125; &amp; &#123;\backslash rho&#125; &amp; &#123;\chi&#125; &amp; &#123;\backslash chi&#125; \\\\</span><br><span class="line">\hline</span><br><span class="line">&#123;\epsilon&#125; &amp; &#123;\backslash epsilon&#125; &amp; &#123;\lambda&#125; &amp; &#123;\backslash lambda&#125; &amp; &#123;\varrho&#125; &amp; &#123;\backslash varrho&#125; &amp; &#123;\psi&#125; &amp; &#123;\backslash psi&#125; \\\\</span><br><span class="line">\hline</span><br><span class="line">&#123;\varepsilon&#125; &amp; &#123;\backslash varepsilon&#125; &amp; &#123;\mu&#125; &amp; &#123;\backslash mu&#125; &amp; &#123;\sigma&#125; &amp; &#123;\backslash sigma&#125; &amp; &#123;\omega&#125; &amp; &#123;\backslash omega&#125; \\\\</span><br><span class="line">\hline</span><br><span class="line">&#123;\zeta&#125; &amp; &#123;\backslash zeta&#125; &amp; &#123;\nu&#125; &amp; &#123;\backslash nu&#125; &amp; &#123;\varsigma&#125; &amp; &#123;\backslash varsigma&#125; &amp; &#123;&#125; &amp; &#123;&#125; \\\\</span><br><span class="line">\hline</span><br><span class="line">&#123;\eta&#125; &amp; &#123;\backslash eta&#125; &amp; &#123;\xi&#125; &amp; &#123;\backslash xi&#125; &amp; &#123;\tau&#125; &amp; &#123;\backslash tau&#125; &amp; &#123;&#125; &amp; &#123;&#125; \\\\</span><br><span class="line">\hline</span><br><span class="line">&#123;\Gamma&#125; &amp; &#123;\backslash Gamma&#125; &amp; &#123;\Lambda&#125; &amp; &#123;\backslash Lambda&#125; &amp; &#123;\Sigma&#125; &amp; &#123;\backslash Sigma&#125; &amp; &#123;\Psi&#125; &amp; &#123;\backslash Psi&#125; \\\\</span><br><span class="line">\hline</span><br><span class="line">&#123;\Delta&#125; &amp; &#123;\backslash Delta&#125; &amp; &#123;\Xi&#125; &amp; &#123;\backslash Xi&#125; &amp; &#123;\Upsilon&#125; &amp; &#123;\backslash Upsilon&#125; &amp; &#123;\Omega&#125; &amp; &#123;\backslash Omega&#125; \\\\</span><br><span class="line">\hline</span><br><span class="line">&#123;\Omega&#125; &amp; &#123;\backslash Omega&#125; &amp; &#123;\Pi&#125; &amp; &#123;\backslash Pi&#125; &amp; &#123;\Phi&#125; &amp; &#123;\backslash Phi&#125; &amp; &#123;&#125; &amp; &#123;&#125; \\\\</span><br><span class="line">\hline</span><br><span class="line">\end&#123;array&#125;</span><br><span class="line">$$</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://juejin.im/equation?tex=%5Cbegin%7Barray%7D%7B%7Cc%7Cc%7Cc%7Cc%7Cc%7Cc%7Cc%7Cc%7C%7D%0A%5Chline%0A%7B%5Calpha%7D%20%26%20%7B%5Cbackslash%20alpha%7D%20%26%20%7B%5Ctheta%7D%20%26%20%7B%5Cbackslash%20theta%7D%20%26%20%7Bo%7D%20%26%20%7Bo%7D%20%26%20%7B%5Cupsilon%7D%20%26%20%7B%5Cbackslash%20upsilon%7D%20%5C%5C%5C%5C%0A%5Chline%0A%7B%5Cbeta%7D%20%26%20%7B%5Cbackslash%20beta%7D%20%26%20%7B%5Cvartheta%7D%20%26%20%7B%5Cbackslash%20vartheta%7D%20%26%20%7B%5Cpi%7D%20%26%20%7B%5Cbackslash%20pi%7D%20%26%20%7B%5Cphi%7D%20%26%20%7B%5Cbackslash%20phi%7D%20%5C%5C%5C%5C%0A%5Chline%0A%7B%5Cgamma%7D%20%26%20%7B%5Cbackslash%20gamma%7D%20%26%20%7B%5Ciota%7D%20%26%20%7B%5Cbackslash%20iota%7D%20%26%20%7B%5Cvarpi%7D%20%26%20%7B%5Cbackslash%20varpi%7D%20%26%20%7B%5Cvarphi%7D%20%26%20%7B%5Cbackslash%20varphi%7D%20%5C%5C%5C%5C%0A%5Chline%0A%7B%5Cdelta%7D%20%26%20%7B%5Cbackslash%20delta%7D%20%26%20%7B%5Ckappa%7D%20%26%20%7B%5Cbackslash%20kappa%7D%20%26%20%7B%5Crho%7D%20%26%20%7B%5Cbackslash%20rho%7D%20%26%20%7B%5Cchi%7D%20%26%20%7B%5Cbackslash%20chi%7D%20%5C%5C%5C%5C%0A%5Chline%0A%7B%5Cepsilon%7D%20%26%20%7B%5Cbackslash%20epsilon%7D%20%26%20%7B%5Clambda%7D%20%26%20%7B%5Cbackslash%20lambda%7D%20%26%20%7B%5Cvarrho%7D%20%26%20%7B%5Cbackslash%20varrho%7D%20%26%20%7B%5Cpsi%7D%20%26%20%7B%5Cbackslash%20psi%7D%20%5C%5C%5C%5C%0A%5Chline%0A%7B%5Cvarepsilon%7D%20%26%20%7B%5Cbackslash%20varepsilon%7D%20%26%20%7B%5Cmu%7D%20%26%20%7B%5Cbackslash%20mu%7D%20%26%20%7B%5Csigma%7D%20%26%20%7B%5Cbackslash%20sigma%7D%20%26%20%7B%5Comega%7D%20%26%20%7B%5Cbackslash%20omega%7D%20%5C%5C%5C%5C%0A%5Chline%0A%7B%5Czeta%7D%20%26%20%7B%5Cbackslash%20zeta%7D%20%26%20%7B%5Cnu%7D%20%26%20%7B%5Cbackslash%20nu%7D%20%26%20%7B%5Cvarsigma%7D%20%26%20%7B%5Cbackslash%20varsigma%7D%20%26%20%7B%7D%20%26%20%7B%7D%20%5C%5C%5C%5C%0A%5Chline%0A%7B%5Ceta%7D%20%26%20%7B%5Cbackslash%20eta%7D%20%26%20%7B%5Cxi%7D%20%26%20%7B%5Cbackslash%20xi%7D%20%26%20%7B%5Ctau%7D%20%26%20%7B%5Cbackslash%20tau%7D%20%26%20%7B%7D%20%26%20%7B%7D%20%5C%5C%5C%5C%0A%5Chline%0A%7B%5CGamma%7D%20%26%20%7B%5Cbackslash%20Gamma%7D%20%26%20%7B%5CLambda%7D%20%26%20%7B%5Cbackslash%20Lambda%7D%20%26%20%7B%5CSigma%7D%20%26%20%7B%5Cbackslash%20Sigma%7D%20%26%20%7B%5CPsi%7D%20%26%20%7B%5Cbackslash%20Psi%7D%20%5C%5C%5C%5C%0A%5Chline%0A%7B%5CDelta%7D%20%26%20%7B%5Cbackslash%20Delta%7D%20%26%20%7B%5CXi%7D%20%26%20%7B%5Cbackslash%20Xi%7D%20%26%20%7B%5CUpsilon%7D%20%26%20%7B%5Cbackslash%20Upsilon%7D%20%26%20%7B%5COmega%7D%20%26%20%7B%5Cbackslash%20Omega%7D%20%5C%5C%5C%5C%0A%5Chline%0A%7B%5COmega%7D%20%26%20%7B%5Cbackslash%20Omega%7D%20%26%20%7B%5CPi%7D%20%26%20%7B%5Cbackslash%20Pi%7D%20%26%20%7B%5CPhi%7D%20%26%20%7B%5Cbackslash%20Phi%7D%20%26%20%7B%7D%20%26%20%7B%7D%20%5C%5C%5C%5C%0A%5Chline%0A%5Cend%7Barray%7D" alt="begin{array}{|c|c|c|c|c|c|c|c|}hline{alpha} & {backslash alpha} & {heta} & {backslash theta} & {o} & {o} & {upsilon} & {backslash upsilon} \\hline{beta} & {backslash beta} & {vartheta} & {backslash vartheta} & {pi} & {backslash pi} & {phi} & {backslash phi} \\hline{gamma} & {backslash gamma} & {iota} & {backslash iota} & {varpi} & {backslash varpi} & {varphi} & {backslash varphi} \\hline{delta} & {backslash delta} & {kappa} & {backslash kappa} & {ho} & {backslash rho} & {chi} & {backslash chi} \\hline{epsilon} & {backslash epsilon} & {lambda} & {backslash lambda} & {varrho} & {backslash varrho} & {psi} & {backslash psi} \\hline{varepsilon} & {backslash varepsilon} & {mu} & {backslash mu} & {sigma} & {backslash sigma} & {omega} & {backslash omega} \\hline{zeta} & {backslash zeta} & {u} & {backslash nu} & {varsigma} & {backslash varsigma} & {} & {} \\hline{eta} & {backslash eta} & {xi} & {backslash xi} & {au} & {backslash tau} & {} & {} \\hline{Gamma} & {backslash Gamma} & {Lambda} & {backslash Lambda} & {Sigma} & {backslash Sigma} & {Psi} & {backslash Psi} \\hline{Delta} & {backslash Delta} & {Xi} & {backslash Xi} & {Upsilon} & {backslash Upsilon} & {Omega} & {backslash Omega} \\hline{Omega} & {backslash Omega} & {Pi} & {backslash Pi} & {Phi} & {backslash Phi} & {} & {} \\hlineend{array}" title="">                </div>                <div class="image-caption">begin{array}{|c|c|c|c|c|c|c|c|}hline{alpha} & {backslash alpha} & {heta} & {backslash theta} & {o} & {o} & {upsilon} & {backslash upsilon} \\hline{beta} & {backslash beta} & {vartheta} & {backslash vartheta} & {pi} & {backslash pi} & {phi} & {backslash phi} \\hline{gamma} & {backslash gamma} & {iota} & {backslash iota} & {varpi} & {backslash varpi} & {varphi} & {backslash varphi} \\hline{delta} & {backslash delta} & {kappa} & {backslash kappa} & {ho} & {backslash rho} & {chi} & {backslash chi} \\hline{epsilon} & {backslash epsilon} & {lambda} & {backslash lambda} & {varrho} & {backslash varrho} & {psi} & {backslash psi} \\hline{varepsilon} & {backslash varepsilon} & {mu} & {backslash mu} & {sigma} & {backslash sigma} & {omega} & {backslash omega} \\hline{zeta} & {backslash zeta} & {u} & {backslash nu} & {varsigma} & {backslash varsigma} & {} & {} \\hline{eta} & {backslash eta} & {xi} & {backslash xi} & {au} & {backslash tau} & {} & {} \\hline{Gamma} & {backslash Gamma} & {Lambda} & {backslash Lambda} & {Sigma} & {backslash Sigma} & {Psi} & {backslash Psi} \\hline{Delta} & {backslash Delta} & {Xi} & {backslash Xi} & {Upsilon} & {backslash Upsilon} & {Omega} & {backslash Omega} \\hline{Omega} & {backslash Omega} & {Pi} & {backslash Pi} & {Phi} & {backslash Phi} & {} & {} \\hlineend{array}</div>            </figure><p>写太累了😂😂😂。。。其他的详见 <a href="https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fmk43%2FBlogResource%2Fblob%2Fmaster%2FLaTex%2FLATEX%25E6%2595%25B0%25E5%25AD%25A6%25E7%25AC%25A6%25E5%258F%25B7%25E8%25A1%25A8.pdf" target="_blank" rel="noopener">PDF</a>。</p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><blockquote><p>通过这样梳理一下基本的公式都能插入了，而且也会如何查资料。对于自己日后学习 LaTeX 写论文有很大帮助。以下建议带有很强的主观性，仅供参考。</p></blockquote><ul><li>公式一律使用另取一行，并且上下都空一行</li><li>一个公式一个语句，不要写在一个 <code>$$***$$</code> 里，保证<code>独立性</code>，一个公式错误不影响另一个公式。</li><li>风格统一，不要混用。比如上下标的写法：<code>x_{balabala}^{bala}</code></li><li>行间字母可以使用 <code>\\(a\\)</code> 代替 <code>a</code> ，养成自己的写作风格。</li></ul><p>最后：我的 <a href="https://link.juejin.im/?target=http%3A%2F%2Ffitzeng.org%2F" target="_blank" rel="noopener">Blog</a> 和 <a href="https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fmk43" target="_blank" rel="noopener">GitHub</a>，感谢阅读。</p><h2 id="5-参考资料"><a href="#5-参考资料" class="headerlink" title="5. 参考资料"></a>5. 参考资料</h2><blockquote><p>十分感谢以下作者的无私分享。</p></blockquote><ol><li><a href="https://link.juejin.im/?target=http%3A%2F%2Fblog.csdn.net%2Fxiahouzuoxin%2Farticle%2Fdetails%2F26478179" target="_blank" rel="noopener">Markdown中插入数学公式的方法</a></li><li><a href="https://link.juejin.im/?target=http%3A%2F%2Fwww.cnblogs.com%2Fhoukai%2Fp%2F3399646.html" target="_blank" rel="noopener">LATEX数学公式基本语法</a></li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fliam0205.me%2F2014%2F09%2F08%2Flatex-introduction%2F" target="_blank" rel="noopener">一份其实很短的 LaTeX 入门文档</a></li></ol><p>说明：掘金好像有些转义不出来，如果想看效果可以<a href="https://link.juejin.im/?target=http%3A%2F%2Ffitzeng.org%2F2018%2F01%2F23%2FLaTexFormula%2F" target="_blank" rel="noopener">参考这篇</a>自己多试试。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MarkDown-插入数学公式实验大集合&quot;&gt;&lt;a href=&quot;#MarkDown-插入数学公式实验大集合&quot; class=&quot;headerlink&quot; title=&quot;MarkDown 插入数学公式实验大集合&quot;&gt;&lt;/a&gt;MarkDown 插入数学公式实验大集合&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
      <category term="markdown" scheme="https://joshuaqyh.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>区块链挑战，应用和发展</title>
    <link href="https://joshuaqyh.github.io/2018/10/21/%E5%88%9D%E6%8E%A2%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E6%8C%91%E6%88%98%EF%BC%8C%E5%BA%94%E7%94%A8%E5%92%8C%E5%8F%91%E5%B1%95/"/>
    <id>https://joshuaqyh.github.io/2018/10/21/初探区块链的挑战，应用和发展/</id>
    <published>2018-10-21T01:57:20.688Z</published>
    <updated>2018-10-21T01:58:23.389Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、-引言"><a href="#一、-引言" class="headerlink" title="一、 引言"></a>一、 引言</h3><p>​    区块链技术被认为是继互联网、人工智能以后又一大颠覆式的技术创新，其内在的发展潜力被无数人所追求。以区块链技术为原理的比特币等加密数字货币的兴起，让区块链技术得以走向公众的视线。提及区块链，我们往往会联想到其特性，分布式，可溯源，去中心化，不可篡改，安全匿名，公开透明等等。区块链凭借这些前所未有的技术优势获得了政府，学术界，企业们的青睐和高度的重视。近年来，无论是科技巨头还是中小的初创公司，都在积极的布局着区块链，关于区块链的的技术创新和模式创新不断涌现。但对于区块链这一新型事物，各行各业都处在摸石头过河的阶段，探索着区块链有效的应用场景。</p><p>​    关于如何看待区块链，公众的看法不一。有人一直唱衰，称其为泡沫；有人坚持信念，在区块链的浪潮中砥砺前行，期待区块链价值的焕发，试图成为社会变革的先驱者。区块链发展的主流观点是：区块链将是一种实现信息互联网到价值互联网转变的跨越式技术，一定程度上能够节约生产成本，提高生产效率，并有望成为未来的核心基础设施，推动社会方方面面的变革和进步，包括金融，经济贸易，社会管理，公共服务等等。区块链创造性地去除了许多系统应用的约束，为很多想法的实现提供了新的可能。以比特币为代表的加密数字货币，改变了传统的金融业交易模式；火热的以太坊智能合约，结合日渐发达的物联网，让我们看到了智能合约型社会在未来的可能。</p><p>​    从技术的角度来看，区块链就是一个结合P2P协议和加密技术分布式的公共账本，网络上的每一个节点都有可能在账本上添加记录，但决定记账权的方法是通过多种的共识算法如PoW, PoS来实现的。记账就是把数据打包成一个区块添加到一条最长的区块链上，该区块上的数据可追溯可验证。区块链的分布式存储决定了其去中心化，公开透明，信息共享；基于安全的哈希算法和共识算法，使其具备了不可篡改的特性；非对称加密技术让参与主体安全匿名，隐私得到保护；而时间戳技术让区块链上的数据可追溯可审核。</p><p>​    从社会科学的角度来看，区块链就是一个通过算法来制造信任和定义信用的机器，在任何需要信任的领域，都有区块链的用武之地。我们知道，在中心化的结构体系中，各方参与者只需要服从中心确立好的共识即可，共识的达成将是十分高效的，而对于分布式，各自取其益的情况下，达成共识则非常难。共识机制的建立，使去中心化的区块链记账系统成为了现实。总的来说，区块链创造了一个数字化的，有效地传输价值的信用系统。</p><p>​    区块链技术将有助于实现软件定义的社会系统，是下一代云计算的雏形，有望像互联网一般彻底重塑人类活动形态，并实现从目前的信息互联网向价值互联网的转变。目前整体发展态势虽没有17年比特币大火时那样的激进，围绕币市的各种业务正感受着区块链“泡沫”破灭的寒冬，以往那种投机主义者的空气币，割韭菜的喧嚣正逐渐退去，区块链的真正发展和价值落地才刚刚开始，泡沫破灭的过程恰似一个适者生存，劣者淘汰的过程，只有经过时间和现实情况检验过的优秀项目才能存活下来。</p><p>​    依托成熟的云计算技术体系，业界也出现了“区块链即服务（BaaS）”的平台，主要提供了联盟链及公有链这2种服务，包括IBM的Bluemix，微软的Bletchley，腾讯的TBaaS；与此同时，我国在《“十三五”国家信息化规划》中把区块链作为一项重点前沿的技术，明确提出需加强区块链等新技术的创新，试验和应用，以实现抢占新一代信息技术主导权。目前，我国区块链技术持续创新，区块链产业初步形成，开始在供应链金融、征信、产品溯源、版权交易、数字身份、电子证据等领域快速应用，有望推动我国经济体系实现技术变革，组织变革和效率变革，为构建现代化经济体系作出重要贡献。</p><h3 id="二、区块链面临的挑战"><a href="#二、区块链面临的挑战" class="headerlink" title="二、区块链面临的挑战"></a>二、区块链面临的挑战</h3><p>​    开放，共享，去中心化是互联网的重要精神，而区块链则高度契合了这一精神。从时间跨度上看，区块链的诞生时间比较晚，具有极大的发展潜力和空间，而相关的行业发展经验和学术研究仍是不足的，更是决定了区块链技术在今后的发展中仍然还会面临极大的挑战。本文主要总结了以下几个较为明显和迫切的挑战：</p><ol><li><p>技术层面仍有不足之处<br>1.1安全性问题</p><p>​    我们知道在比特币的共识过程中，如果汇聚了超过51%的算力时，就有可能达成篡改区块链的数据。我们通常所说的区块链的数据不可篡改其实是相对而言的，因为共识过程需要消耗大量的算力，当篡改成本远远大于实际成本时，可以近似看作不可篡改，但这一威胁的存在并不能忽视，更为安全有效的共识机制有待更深入的研究和设计。</p><p>​    随着量子计算等新型计算技术的发展，区块链的密码学保护可能会变得越来越脆弱，非对称的加密技术有可能在今后得到破解，所以对加密技术的研究的进程仍要跟上，不能止步于前。</p><p>​    而区块链中的隐私匿名保护特性其实也存在着被追踪的可能性，有学者也提供了一种根据比特币交易事务进行时追踪用户IP地址的情况。随着各类反匿名身份甄别技术的发展, 加上区块链上的数据公开透明，实现部分重点目标的定位和标识也存在可能。如何加强匿名保护的技术，也是当前区块链研究的热点方向。</p><p>1.2效率问题</p><p>​    区块链的效率问题一直为人诟病，甚至有人宣称区块链技术存在天然瓶颈。交易效率慢，如比特币区块链每秒仅能处理7笔交易，这极大限制了区块链在商业世界的应用。还有有一种说法就是区块链实际就是一个造价昂贵的缓慢数据库，与其花大价钱来打造分布式的区块链数据库不如精心去维护好集中式的数据库。而且当数据区块越来越大的时候，因为分布式存储的原因，区块链数据将会变的臃肿庞大。</p><p>​    不过短时间内效率低并不是阻碍区块链的重要原因，对于共识机制效率如何改善相信会有好的进展。从另一个角度来讲，效率低也是安全的一种保证。可能我们在安全和效率之间需要一个良好的折衷方案吧。</p></li><li><p>监管问题</p><p>​    提及到监管问题，首先想到区块链的去中心化，接着是匿名性。去中心化意味着不受中心的掌控，匿名性意味着难以追踪参与者。从负面效果来看，去中心化是不受控制，放任自由，为所欲为；匿名则意味着包庇，躲避正义的追踪。</p><p>​    举个例子，一开始比特币流通的环境是在暗网，交易双方信息保密，只关注交易事务本身不关注交易双方。比特币的匿名性跟暗网的隐匿性有天然的契合度，利用比特币在暗网交易，走私，贩毒，洗钱等等难以追查，成了犯罪分子的天堂。</p><p>​    利用区块链来进行洗钱的途径也是存在的，尤其不能忽视发行代币的风险，要时刻警惕空气币，ICO的陷阱，防止其破坏金融市场的稳定，减少无良资本家割韭菜的局面。在监管层面必须做到对虚拟货币的发行，控制，管理，甚至禁止。在区块链发展的同时，相应的法律法规和政策也要跟上脚步。国家在发展布局区块链的时候，干预力度和引导的力度要如何拿捏才能更好地发挥区块链的社会价值呢，这是个值得挖掘的问题。</p></li><li><p>趋中心化问题</p><p>​    区块链自从走入公众视野就以去中心化的特点引起无数人的兴趣和追捧，这得益于分布式的共识机制，所谓人人都有记账权，人人都享有一份公共一致的账本，人人都有对账本上写入的记录的监督权。但是现有的共识机制，依旧有中心化的趋势，真正的去中心化可能渐渐消失。</p><p>​    以比特币的PoW共识机制为例，挖矿的矿工如果集中到一起，形成一个足够大的矿池，获得记账权的概率就更大，去中心化可能会演变成中心化，记账权掌握在少数人手里。PoW就是比拼谁的算力大，谁的算力越大获得的比特币奖励就越多，这个过程跟买彩票一样，越有钱的人买的彩票越多，中奖几率越大，而事实是越有钱的人会购买算力更大性能更优的矿机，挖到比特币的可能性更多发生在这些挖矿专业户手中。比特币的奖励集中到某些一小部分人的手上，比特币价格居高不下，财富就越是汇聚到这些人的手上。相似地，基于PoS的共识机制也会出现相同的问题，那些持有币数量越大，币龄越高的人越有可能获得记账权。这近乎是一种马太效应！弱中心化和重回中心化的威胁不容小觑！</p><p>​    或许完全去中心化的共识机制只是一个乌托邦式的幻想，就像人们曾经热衷于追求永动机一般，但这并不意味着人们要停止对区块链的探索，更为安全有效的共识机制仍要很长的一段时间去检验其有效性和正确性，去中心化未必能完美准确地达成，但近似地有效地达成去中心化的特性，将无疑带给社会一次前所未有的变革。</p></li></ol><h3 id="三、-区块链的多元化应用"><a href="#三、-区块链的多元化应用" class="headerlink" title="三、 区块链的多元化应用"></a>三、 区块链的多元化应用</h3><p>​    区块链行业的应用非常多元，但实际落地条件可能还需要多次实践和配套基础设施的建立和完善。各国政府对待区块链的态度和政策也从很大程度上左右着区块链的发展方向和未来，区块链未来会是在哪些行业发光发彩。而在当前，各类与行业特点相结合的区块链项目如雨后春笋般涌现，预示着整个区块链产业的潜力。与“互联网+”类似，本文主要讨论几个当前较为大众所热议以及具有较为清晰发展前景的应用，以供了解。</p><ol><li><p>金融</p><p>​    金融领域是与科技界联系较为紧密的领域，许多技术的创新都能很快被金融领域所嗅探到，并且得到很好的应用，所以在金融业也出现了“金融科技（FinTech）”等理念。诚然，金融领域几乎是天然与区块链系统契合的，金融领域的许多痛点仿佛在区块链的技术支撑下找到了良好的解决方案。传统金融的中心化，交易繁琐复杂，安全性有限都是亟需解决的痛点，“区块链+”</p><p>1.1 数字货币</p><p>​    最具代表性的数字货币当属比特币，同时也是目前世界影响最为广泛的一个应用。比特币可以安全方便地将数字资产转移给另外一个人，得以于这些特性，比特币很快就在交易相关的行业发展。比特币是一个工具，系统无法限制人们使用它的方式，比如一个较为灰色的例子，暗网上的“丝绸之路”网站就通过比特币定价并且进行交易，随后被美国FBI查封并且收缴了26000比特币，虽然数字货币存在被不法分子不正当利用的情形，但我们依旧能看到数字货币在市场上流通实验的成功实践。</p><p>​    不过数字货币去中心化的特点依旧对许多国家的货币机制产生了威胁，常常被认为是金融不稳定的因素。如何看待ICO，如何加强数字货币的监督管控，是每个国家都要面对和思考的问题。目前数字货币还没有在全世界的国家之间达成共识，如何制定有效的法律法规来引导数字货币的发展，数字币作为一个新生儿，仍然不断接收着世人的拷问。</p><p>1.2 供应链金融</p><p>​    供应链金融是银行将核心企业和上下游企业联系在一起提供灵活运用的金融产品和服务的一种融资模式。供应链金融参与方主要包括：核心企业，中小企业，金融机构和第三方支持服务。核心企业通常对上下游的供应商、经销商在定价、账期等方面要求苛刻，供应链中的中小企业常出现资金紧张、周转困难等情况，导致供应链效率大幅降低甚至停止运转。因此，供应链金融产业面临的核心问题是中小企业融资难，融资贵，成本高，周转效率低。供应链金融平台、核心企业系统交易本身的真实性难以验证，导致资金端风控成本居高不下。</p><p>​    区块链分布式记账以及共识机制，恰好建立了一套可信的信用体系，在数据验证和追溯上提供了有力的技术支撑，贯穿了金融供应链上下游的各方的信用。运用区块链技术，可以将核心企业的信用数字化，写入智能合约，依托智能合约来防范金融风险，使信用在供应链上有效传导，降低合作成本，提高生产效率。还可以使用智能合约来实现对供应链资金的拆分和流转，提高资金的周转效率，为中小企业解决融资难，融资贵的问题。</p><p>1.3 贸易金融</p><p>​    区块链就是一个用共识算法建立起来的具备信用的公共账本，开放共享的特性在贸易金融领域也有一番用武之地。传统银行之间存在着信息不对称以及交流不畅，信用鉴定繁琐的痛点，银行之间的业务报文的传递还大多依靠着国际组织Swift，EDI等等。利用区块链来建立银行之间的业务报文收发联盟的问题，简化业务流程，着手打造自己基于区块链系统的贸易金融平台，也就是通常讲的联盟链，已经成为一种新的发展思路。</p><p>​    往更开阔的角度来思考其应用，区块链多方可参与的特点有利于连接一切利益相关者，如区块链相关企业，政府部门一起来构建一个更完善，更自动化，更具信用价值的贸易金融生态。</p><p>1.4财务管理</p><p>​    区块链可审查，可追溯，不可篡改的特性也在财务管理方面有着出色的表现。在交易清算方面，区块链让多方共享一套可信互相认可的公共账本体系，所有的交易清算可实时的记录在区块链账本上，不可篡改，可追溯，大大提高了对账的准确率和效率。搭载智能合约之后，还能实现自动化的交易清结算，减少对账人员的成本和差错率。在审计方面，区块链能提高对企业财务信息的监督水平，虚假交易和账目造假难度大大提升。另外，通过区块链网络的实时性以及可审核性，审计效率也能大大提升，节约人力成本。而且区块链还能显著降低审计数据被攻击的风险，分布式的存储让审计数据的保护变得稳定可靠。</p><p>除了上述四点，区块链和金融场景的结合还有诸多的可能，电子信用凭证，跨境汇款查询应用，风险管理，企业改革等等，在未来将会有炫目的表现。</p></li><li><p>物联网</p><p>​    如今的物联网实现物物通信的方式是经由中心化的云服务器，该模式存在的弊端是当接入设备大幅增加时，服务器面临的负载将会越重，而在未来，上亿级的设备互联是必然的。到了那时云服务将会带来巨额成本，这是物联网发展的一个绊脚石。而且传统物联网数据容易受到攻击，具有诸多信息安全风险问题。区块链+物联网则通过多个节点参与验证，将全网达成交易的数据记录在分布式账本之中，取代中央服务器的作用，同时也能依赖区块链的非对称加密技术，共识机制，分布式存储降低数据丢失的风险。</p><p>​    在物联网中的电子商务行业，通过智能合约的方式实现交易的自动化，提供可靠性。去中心化的机制也能去除第三方的接入，让交易更为直接，有效率。</p><p>​    此外，物联网时代中的个人隐私安全更需要高度重视，人机交互，物物互联极大提高了暴露个人隐私数据的危险。利用非对称加密技术来对用户信息进行加密是一种有效的办法。</p><p>​    物流方面，结合智能硬件，区块链的可追溯性，实时性安全性也能得到充分发挥。在未来进一步发展的物联网社会，区块链将能不一样的智能体验。</p></li><li><p>医疗健康</p><p>​    区块链+医疗也是一个热门的场景。电子医疗数据的处理是当今区块链研究的一大热点，人们致力于如何将医疗数据安全共享。区块链作为一种多方维护，分布式存储，安全加密的记账技术，在解决医疗行业患者敏感信息共享与保护方面将会是一个很好的创新。借助区块链，我们可以搭建一个医疗信息区块链平台，实现多方数据共享，满足获取患者电子病历等历史数据，并将共享数据用于AI建模，图像检索，健康咨询等等。</p></li><li><p>社会公共服务和基础设施</p><p>​    新一代的社会公共服务，以及新型的基础设施建设，将会是当前区块链行业极为重要的机会，但这一发展道路还很漫长，公共服务和基础设施都需要发展到一定规模才能提供良好的服务。当前区块链发展仍在早期阶段，价值互联网的时代虽然呼之欲出，但实际普及的时间点还很难说。而加大基础设施的建设，提供更多的社会公共服务将会加大这一进程的步伐。</p><p>​    例如在产权登记版权注册方面，利用区块链技术来保障个体或集体的权益不受侵犯。在教育行业，将区块链和学生征信管理，升学就业，学术，资质证明等方面相结合，对教育就业的健康发展具有重要价值。在节约能源方面，区块链也有独特的创新之处，现有专家学者也建议通过发行能源币的方式来鼓励可再生资源的使用。</p><p>总体来说，区块链在很多行业和领域都能有独特的创造性应用，只要是和价值挂钩的信息以及需要建立可靠信用流通性强的场景，都和区块链有天然的亲和性，可以结合在一起发展除新的方式来满足不同行业的需求。我们必须明确，在多元的场景下，多元的区块链实现是有必要的，价值互联网的构建离不开多元场景需求的驱动。</p></li></ol><h3 id="四、-区块链的未来发展方向和趋势"><a href="#四、-区块链的未来发展方向和趋势" class="headerlink" title="四、 区块链的未来发展方向和趋势"></a>四、 区块链的未来发展方向和趋势</h3><p>​    区块链领域已经成为行业创新创业的热土，技术的不断攻坚和创新，将在社会层面上带来一场变革。本文将从技术层面和社会应用层面来简述对区块链未来的理解和看法。技术和社会层面是相互作用的两条发展主线，技术的创新开拓了社会应用的场景和空间，社会应用遇到的痛点和发展需求又是技术创新的一大动力。</p><ol><li><p>技术层面</p><p>1.1 自身技术的迭代更新</p><p>区块链自身的机制仍有不足之处，如共识机制，效率问题，加密技术等等，都等待着专家学者，各行各业的技术人员进行优化改进。结合未来多样化的场景，区块链自身也存在着变革和重构的可能。在未来，单一的公有链，或者联盟链，私有链可能不能满足价值更为多元的传递。为方面数字资产在不同区块链之间的转移，开发安全有效的侧链技术，也是一个研究的热点。而且在加大区块链系统的吞吐量，提高效率方面，高性能的系统方案如分片技术，多通道技术仍在不断探索中。此外，随着区块链技术的发展，谋求一个统一的技术标准对整体发展局面和速度有着极大的作用，如同互联网发展初期基于TCP/IP等传输协议带给互联网信息通信的影响一样。当拟定一个权威标准之后，区块链产业才能有条不紊地前进。</p><p>1.2 与其他技术的融合创新</p><p>跳开自身技术的”瓶颈“，区块链技术和其他高新技术仍存在这融合创新的可能。在大数据方面，可以结合区块链来提升大数据管理和大数据分析的可靠性，分布式存储非对称加密技术提供数据安全和保障，而时间戳技术和不可篡改可以帮助准确的大数据分析，实现精准营销。在人工智能方面，智能硬件搭配智能合约将重塑契约模式，让智能合约更智能，加速价值互联网的到来，实现虚拟价值和实体价值的进一步转化。</p></li><li><p>社会经济层面</p><p>2.1 经济上实现”弯道超车“，打造”可信数字化“实体经济</p><p>区块链作为价值互联网的基础，引领着世界新一轮的技术创新和产业变革。由区块链引发的技术创新和模式创新与实体经济紧密深度的融合在一起，推动社会实体经济的发展，改变产业运作方式，简化业务流程，减少人力物力的同时提高生产效率。从底层架构的区块链到细分场景的应用，从国家战略到企业实践，区块链的应用逐渐从金融领域辐射出去，带动着其他行业的发展和改革。区块链对生产关系的改造力，降低了传统过程中因为信息不对称，信用不可靠而早就的资源浪费。在实体经济中，基于算法搭建的无第三方介入的信用机制更是将数字化提升到一个新的层面，即”可信数字化“，极大地加速了实体经济中资金的流通，为经济上实现”弯道超车“提供了新的动力。</p><p>2.2 完善去中心化基础设施，奠定社会信任基石</p><p>去中心化的技术优势使得未来基于区块链理念的各类去中心化应用，去中心化自治组织，去中心化自治公司，甚至去中心化社会成为可能。不断完善的去中心化基础设施，逐步构建起来的社会信用体系，将为智能社会进一步赋能。就现状而言，智能合约会是未来一个重要的去中心化基础设施，预计之恶能合约会从自动化向智能化方向演变。而现阶段的智能合约本质逻辑是”IF-THEN“类型的条件响应规则，迈向更为智能的”WHAT-IF“推演过程。社会信任体系将从第三方中心的监督机制，转向由共识算法定义的信用体系。避开人性的贪婪，将数据资产交付给理性的机器合约，或许是行之有效的一种方向。</p><p>2.3 区块链驱动的平行社会</p><p>有关学者认为，区块链将引领世界从物理+网络的CPS实际世界走向精神层面的人工世界，形成物理+网络+人工的人-机-物一体化的三元耦合系统，称为社会物理信息系统CPSS。基于CPSS的平行社会已有了雏形，其核心本质特征是虚实互动与平行演化。而区块链就是实现CPSS平行社会的基础架构之一，为分布式社会系统和人工智能系统，物联网系统，提供了行之有效的去中心化数据结构，交互机制和计算范式，为实现平行社会奠定了坚实的数据基础和信用基础。智能合约的可编程性驱动着平行社会的进展，搭载物联网中的智能硬件，将虚拟空间和现实物理世界联通在一起，通过可靠有效的人物交互和智能识别，实现社会管理和社会模式的优化。</p><p>​</p></li></ol><p>区块链的浪潮已经到来，由虚向实，更多区块链项目正在落地，进一步的数字化生活逐渐有了雏形。积极拥抱区块链，把握区块链发展态势，于个人，于企业，于国家，目前看，都是一个正确但要付出很大的努力去摸索的选择。</p><blockquote><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1] 袁勇, 王飞跃. 区块链技术发展现状与展望. 自动化学报, 2016, 42(4): 481-494</p><p>[2] Zibin Zheng, Shaoan Xie, Hong-Ning Dai,Xiangping Chen,Huaimin Wang.Blockchain Challenges and Opportunities: A Survey. Int. J. Web and Grid Services</p><p>[3]袁勇,周涛, 周傲英,段永朝, 王飞跃.区块链技术: 从数据智能到知识自动化.自动化学报,2017,43(9):1485-1490</p><p>[4] 2018 年中国区块链产业白皮书 [Online], available:<a href="http://www.miit.gov.cn/n1146290/n1146402/n1146445/c6180238/part/6180297.pdf" target="_blank" rel="noopener">http://www.miit.gov.cn/n1146290/n1146402/n1146445/c6180238/part/6180297.pdf</a>, 2018-05-20.</p><p>[5]黄俊飞,刘杰. 区块链技术研究综述.  北京邮电大学学报,2018,41(2):1-8</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、-引言&quot;&gt;&lt;a href=&quot;#一、-引言&quot; class=&quot;headerlink&quot; title=&quot;一、 引言&quot;&gt;&lt;/a&gt;一、 引言&lt;/h3&gt;&lt;p&gt;​    区块链技术被认为是继互联网、人工智能以后又一大颠覆式的技术创新，其内在的发展潜力被无数人所追求。以区块链技
      
    
    </summary>
    
    
      <category term="区块链" scheme="https://joshuaqyh.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>机器学习（一）--概念理解</title>
    <link href="https://joshuaqyh.github.io/2018/08/15/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89--%E6%A6%82%E5%BF%B5%E7%90%86%E8%A7%A3/"/>
    <id>https://joshuaqyh.github.io/2018/08/15/机器学习（一）--概念理解/</id>
    <published>2018-08-14T16:07:06.722Z</published>
    <updated>2018-08-15T03:32:49.053Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>笔记基于《机器学习》周志华一书所作的整理。</p></blockquote><blockquote><p>机器学习是什么，如何理解机器学习？</p></blockquote><p>人在认知事物的时候，必须经过一定的经验积累和认识，然后做出相应合理的决策。也就是说人在某一领域上经验的积累会提高人对事物的处理和反应能力。类比到机器学习中，机器学习正是这样一门学科，致力于如何通过计算的手段，利用所谓的经验来让系统具有一定的功能或者改善自己的性能，比如计算机视觉让计算机有“看物体”的能力，并使视觉能力不断增强，自然语言处理让计算机有“翻译，对话”能力，大量的模拟和计算使机器更“懂人话”。</p><p>在计算机系统中，“经验” 通常以“数据”的方式存在。机器学习所要研究的主要内容就是，关于在计算机上从数据中产生一个模型的算法，即“学习算法”。基于提供的经验和数据我们对系统进行提炼和优化模型，当系统接收到相应输入时，根据已有的经验去进行响应，做出符合“智能”定义的行为。机器学习，主要是数据+算法。通常情况下，数据的采集和处理显得更为重要，一般来说数据集越大，学习能力越强，但也意味着更长的训练时间和修正优化时间。</p><blockquote><p>机器学习需要的数据基础</p></blockquote><p>要进行机器学习，先要有数据。比如判定西瓜的好坏，需要先给出许多西瓜的数据例子：（色泽=青绿，根蒂=硬挺 … )[]，（色泽=白色，根蒂=蜷缩）[ ]等等，这些数据记录的集合称为<strong>数据集</strong>，每一条记录都是<strong>样本</strong>或者<strong>示例</strong>，每一条记录里有对象的<strong>属性或特征。</strong> 属性张开的空间称为<strong>属性空间</strong>，样本张开的空间称为<strong>样本空间</strong> 。在数学上，我们使用线性代数中的向量来表示物体的空间，空间的维度由我们数据记录中的属性个数决定，比如西瓜有色泽，根蒂，响声三个属性，那么我们以这三个属性张开的空间就可以表示所有的西瓜，每一个西瓜都能在这个空间中找到自己的坐标位置。由于空间中的每一个点对应一个坐标向量，因此我们也把一个示例称为一个<strong>特征向量</strong>。</p><p>一般地，令D = {x1， x2..， Xm } 表示包含m 个示例的数据集，每个<br>示例由d 个属性描述(例如上面的西瓜数据使用了3 个属性)，则每个示例<br>Xi = (Xi1; Xi2; . . . ; Xid) 是d 维样本空间X 中的一个向量， Xi ε X ， 其中Xij 是xi在第j 个属性上的取值(例如上述第3 个西瓜在第2 个属性上的值是”硬<br>挺” ), d 称为样本xi的”维数” (dimensionality)。</p><blockquote><p>机器学习的过程</p></blockquote><p>从数据中学的模型的过程称为“学习”或者“训练”。整个过程通过执行某些算法来完成（我们将了解到十大算法CNN，RNN），训练过程 中使用的数据称为<strong>“训练数据”</strong>， 每一个样本称为<strong>“训练样本”</strong>，训练样本的集合称为<strong>“训练集”</strong>。 学得模型对应了关于数据的某种潜在规律，亦称<strong>假设（后续会根据数据的训练做不断地修正）</strong>, 机器学习本身就是一个不断逼近事实真相的过程。</p><p><strong>模型有时被称为“学习器”，可看作学习算法在给定数据和参数空间上的实例化</strong></p><blockquote><p>机器学习所能完成的事和划分</p></blockquote><ul><li><p>预测</p><p>要建立一个可预测的模型，我们需要获得训练样本的结果信息，通常称为标记。一个样本具有标记时可成为<strong>样例</strong>。 标记集合也成为<strong>标记空间或者输出空间</strong>。比如要判断西瓜的好坏时，我们除了给出西瓜色泽，敲声等属性时，还要给出在这些属性下瓜的好坏，即赋予每一个样本标记 。根据预测对象的不同时，我们定义了不同的学习任务。</p><ul><li>分类：当预测的对象是离散值（例如好瓜，坏瓜），此类学习任务称为分类。</li><li>回归：当预测的对象是连续值（例如西瓜的成熟度），此类学习任务称为回归。</li></ul><p>当预测的类别只有两个时，称为“二分类”任务，涉及多个时，称为“多分类”任务。</p><p>一般地，预测任务是希望通过对训练集{(X1’ Y1) , (X2 , Y2) ,…, (Xm, Ym)} 进行学习，建立一个从输入空间X 到输出空间y 的映射f: X 叶y. 对二分类任务，通常令Y = {-1 ，+1} 或{0 ， l};  对多分类任务， IYI &gt;2; 对回归任务， Y= R，R为实数集.</p></li></ul><p>学得模型之后，使用其进行预测的过程称为“测试”。被预测的样本称为测试样本“。也就是说学习的过程是建立一个准确率更高的关于输入到输入的映射关系。</p><ul><li><p>训练数据处理：聚类clustering</p><p>将训练集中的西瓜分成若干组，每一组称为一个簇，这些自动形成的簇可以对应一些潜在的概念划分，比如西瓜中按照色泽划分为”深色瓜“和”浅色瓜“。 这样有助于我们了解数据内在的规律，更为深入地分析数据建立基础。<strong>但是在聚类学习中，我们事先并不知道西瓜是根据哪些属性特征来划分为簇的，在学习过程中使用的训练样本通常不拥有标记信息。</strong></p><p>​</p></li></ul><p>根据训练样本是否拥有标记信息，学习任务大致可以划分为两类：<strong>监督学习</strong>和<strong>无监督学习</strong>。没有标记的当然是无监督学习，这意味着在无监督学习中没有标准答案给机器，只能依靠机器分析内部的数据特征来做响应的判断，而有标记的学习，则可以理解为在得到标准答案后，机器的一次次自我修正，以期下次遇到相似的问题时，能得到和标准答案更为接近的答案。显然，分类和回归属于监督学习，聚类属于无监督学习。</p><p><strong>泛化：</strong> 机器学习不仅在已有的训练样本上表现出高准确率，在新的未尝试过的样本上也能体现较高的准确率。显然强泛化的模型，更适用于整个样本空间，虽然样只是空间中一个很小的采样。 </p><blockquote><p>假设空间：由对象所可能存在的不同属性值所张成的空间</p></blockquote><ul><li>归纳： 从特殊到一般的“泛化”过程，而从“样例”中学习显然是一个归纳的过程，所以也称为“归纳学习”。<ul><li>狭义归纳：要求从训练数据集中获得概念，所以也称<strong>概念学习</strong>或者<strong>概念形成</strong>。 概念学习中最简单的就是布尔概念学习，即让机器判断对或错，黑或白，类似预测中的二分类学习。</li></ul></li><li>演绎：从一般到特殊的“特化”过程，从基础原理推演到具体的情况。在数学公理系统中，基于公理和推理推导出与之相恰的定理。</li></ul><p>模拟搜索西瓜问题的假设空间有多种做法，例如<strong>从顶向下，从一般到特殊，从底向上，从特殊到一般</strong>。 搜索过程遇到和训练集的“正确答案”不一致时，需要删除或者调整参数使之逼近真相。</p><p>在现实问题中，存在着很大的假设空间。但学习过程是基于有限的样本训练集来进行的，可能有多个假设和训练集一致。即存在一个与训练集一致的假设集合，称为“版本空间”。不同训练集对应不同的版本空间，版本空间属于假设空间的一部分。</p><blockquote><p>归纳偏好</p></blockquote><p>版本空间的问题：如果有三个与训练集一致的假设，但在不同模型的情况下，面临新的样本，却会产生不同的输出判断。也就是说不同的模型具有不同的偏好，对某种类型的假设的偏好。</p><p><strong>在训练集之外的样本误差的计算方法</strong> P8~9</p><p>总误差和实际学习算法无关，任意两个学习算法的总误差相同。 也就是说学习算法所具有的不同训练集外误差的期望性相同。这就是“没有免费午餐定理” NFL。定理的前提：我们希望学习的真实目标函数f均匀分布，实际并非如此。该定理揭示的是，脱离具体问题，空泛谈“什么学习算法”更好是毫无意义的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;笔记基于《机器学习》周志华一书所作的整理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;机器学习是什么，如何理解机器学习？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;人在认知事物的时候，必须经过一定的经验积累和认识，然后做出
      
    
    </summary>
    
    
      <category term="机器学习" scheme="https://joshuaqyh.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>神经网络模型入门--前向和反向传播Python代码实现</title>
    <link href="https://joshuaqyh.github.io/2018/07/30/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-%E5%89%8D%E5%90%91%E5%92%8C%E6%96%B9%E5%90%91%E4%BC%A0%E6%92%AD/"/>
    <id>https://joshuaqyh.github.io/2018/07/30/神经网络-前向和方向传播/</id>
    <published>2018-07-30T05:58:03.051Z</published>
    <updated>2018-11-28T07:15:44.871Z</updated>
    
    <content type="html"><![CDATA[<p>Just show the code.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">神经网络模型简介：</span></span><br><span class="line"><span class="string">单层神经元（感知机）：</span></span><br><span class="line"><span class="string">1. 输入向量Wi： 多个同维向量，其中包括多个输入节点和标注为+1的偏置节点</span></span><br><span class="line"><span class="string">2. 输入权值j1： 每个输入向量（除去偏置节点）在输入神经元时都需要乘上一个相应的权值</span></span><br><span class="line"><span class="string">3. 输入值 ΣWiji + b：   为每个输入节点乘上相应的权值然后求和再加上偏置节点</span></span><br><span class="line"><span class="string">4. 激活函数： 通常使用sigmoid函数，作为激活函数，有单极性和双极性之分</span></span><br><span class="line"><span class="string">5. 输出值：   激活函数的返回值，为神经元网络的输出或者为下一个神经元的输入</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">多层神经元模型：</span></span><br><span class="line"><span class="string">为单层神经元的级联，每一层的结构包括多个神经元，接受上一层神经元的输入</span></span><br><span class="line"><span class="string">产生下一神经元的输出，不同层的神经元之间有相应的权值。</span></span><br><span class="line"><span class="string">* 层次结构：输入层+隐藏层+输出层</span></span><br><span class="line"><span class="string">1. 输入层：包含多个输入节点和一个标注为+1的偏置节点，偏置节点不接受输入。</span></span><br><span class="line"><span class="string">2. 隐藏层：为多个神经元级联而成，每一层数目与输入层数目一致</span></span><br><span class="line"><span class="string">3. 输出层：只有一个神经元结构，最后一层的隐藏层的作为输出层的输入，输出整个神经网络的结果</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">前向传播与后向（反向）传播</span></span><br><span class="line"><span class="string">--- 前向传播对应预测（分类），后向传播对应训练</span></span><br><span class="line"><span class="string">* 前向传播：就是给定模型参数即输入层的输入和偏置节点，逐一计算各层的输出值，直到最后输出神经网络的结果</span></span><br><span class="line"><span class="string">* 后向传播：</span></span><br><span class="line"><span class="string"> """</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单极性激活函数，优点连续可导</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid1</span><span class="params">(x)</span>:</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">:sigmoid单极性函数 1/(1+e^-x)</span></span><br><span class="line"><span class="string">:param: x， 函数自变量</span></span><br><span class="line"><span class="string">:return: sigmoid函数值</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1.0</span>/(<span class="number">1.0</span> + math.exp(-x))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单极性激活函数的导数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dsigmoid1</span><span class="params">(y)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">:sigmoid 单极性函数的导数</span></span><br><span class="line"><span class="string">:param  y 函数自变量:</span></span><br><span class="line"><span class="string">:return 函数 运算结果</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">return</span> y*(<span class="number">1</span>-y)</span><br><span class="line"></span><br><span class="line"><span class="comment">#双极性激活函数 </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid2</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">：sigmoid双极性函数 tanh （z）</span></span><br><span class="line"><span class="string">: param x,函数自变量 </span></span><br><span class="line"><span class="string">: return 函数因变量</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">return</span> math.tanh(x)</span><br><span class="line"></span><br><span class="line"><span class="comment">#双性极性激活函数的导数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dsigmoid2</span><span class="params">(y)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">: sigmoid双极性函数的导数</span></span><br><span class="line"><span class="string">：param x,函数自变量</span></span><br><span class="line"><span class="string">：return 函数因变量</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1.0</span> - y ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 神经网络前向传播实现方法</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">前向传播算法，神经网络的输出值即预测值可作为后向传播误差的计算</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">runNN</span><span class="params">(self, inputs)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">：前向传播进行分类</span></span><br><span class="line"><span class="string">：param: inputs-输入参数</span></span><br><span class="line"><span class="string">：return: 所属类别</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 输入的数目必须为每一层规定节点数-1，除去偏置节点，不接受输入</span></span><br><span class="line"><span class="keyword">if</span> len(inputs) != self.ni - <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"incorrect number of inputs"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将输入向量映射到神经元的输入节点值</span></span><br><span class="line"><span class="comment"># ai - 输入层</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(self.ni - <span class="number">1</span>):</span><br><span class="line">self.ai[i] = inputs[i]</span><br><span class="line"></span><br><span class="line"><span class="comment">#输入层到隐藏层，隐藏层的运算</span></span><br><span class="line"><span class="comment"># ah - 隐藏层的输出值</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(self.nh):</span><br><span class="line">sum = <span class="number">0.0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(self.ni):</span><br><span class="line">    sum += (self.ai[i] * self.wi[i][j]) <span class="comment"># wi为输入层到隐藏层的权值 权值求和 </span></span><br><span class="line">self.ah[j] = sigmoid(sum)  <span class="comment">#输入激活函数，产生下一神经元的输入</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#隐藏层到输出层，输出层运算</span></span><br><span class="line"><span class="comment"># ao - 最终输出结果</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(self.no):</span><br><span class="line">sum = <span class="number">0.0</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(self.nh):</span><br><span class="line">    sum += (self.ah[j] * self.wo[j][k]) <span class="comment"># wo为隐藏层到输出层的权值</span></span><br><span class="line">self.ao[k] = sigmoid(sum) </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> self.ao</span><br><span class="line"></span><br><span class="line"> <span class="string">"""</span></span><br><span class="line"><span class="string">后向传播</span></span><br><span class="line"><span class="string">指的是在训练的时候，根据最终输出的误差（预测值-目标值的平方和/2）</span></span><br><span class="line"><span class="string"> 来调整倒数第二层、倒数第三层……第一层的参数的过程。</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">主要有三种调整</span></span><br><span class="line"><span class="string">1. 输出层权值的调整</span></span><br><span class="line"><span class="string">2. 隐藏层权值的调整</span></span><br><span class="line"><span class="string">3. 偏置节点的调整</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">算法步骤</span></span><br><span class="line"><span class="string">1. 随机初始化参数（指权值和偏置节点），对输入利用前向传播计算输出</span></span><br><span class="line"><span class="string">2. 对输出和隐藏节点进行调整，计算delta。公式比较难写。。</span></span><br><span class="line"><span class="string">3. 计算梯度可定义学习率影响训练速度，并更新权值参数偏置参数。</span></span><br><span class="line"><span class="string"> """</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">backPropagate</span><span class="params">(self, targets, N, M)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        后向传播算法</span></span><br><span class="line"><span class="string">        :param targets: 实例的类别 </span></span><br><span class="line"><span class="string">        :param N: 本次学习率</span></span><br><span class="line"><span class="string">        :param M: 上次学习率</span></span><br><span class="line"><span class="string">        :return: 最终的误差平方和的一半</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># http://www.youtube.com/watch?v=aVId8KMsdUU&amp;feature=BFa&amp;list=LLldMCkmXl4j9_v0HeKdNcRA</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 计算输出层 deltas</span></span><br><span class="line">        <span class="comment"># dE/dw[j][k] = (t[k] - ao[k]) * s'( SUM( w[j][k]*ah[j] ) ) * ah[j]</span></span><br><span class="line">        output_deltas = [<span class="number">0.0</span>] * self.no</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(self.no):</span><br><span class="line">            error = targets[k] - self.ao[k]</span><br><span class="line">            output_deltas[k] = error * dsigmoid(self.ao[k])</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 更新输出层权值</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(self.nh):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(self.no):</span><br><span class="line">                <span class="comment"># output_deltas[k] * self.ah[j] 才是 dError/dweight[j][k]</span></span><br><span class="line">                change = output_deltas[k] * self.ah[j]</span><br><span class="line">                self.wo[j][k] += N * change + M * self.co[j][k]</span><br><span class="line">                self.co[j][k] = change</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 计算隐藏层 deltas</span></span><br><span class="line">        hidden_deltas = [<span class="number">0.0</span>] * self.nh</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(self.nh):</span><br><span class="line">            error = <span class="number">0.0</span></span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(self.no):</span><br><span class="line">                error += output_deltas[k] * self.wo[j][k]</span><br><span class="line">            hidden_deltas[j] = error * dsigmoid(self.ah[j])</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 更新输入层权值</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.ni):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(self.nh):</span><br><span class="line">                change = hidden_deltas[j] * self.ai[i]</span><br><span class="line">                <span class="comment"># print 'activation',self.ai[i],'synapse',i,j,'change',change</span></span><br><span class="line">                self.wi[i][j] += N * change + M * self.ci[i][j]</span><br><span class="line">                self.ci[i][j] = change</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 计算误差平方和</span></span><br><span class="line">        <span class="comment"># 1/2 是为了好看，**2 是平方</span></span><br><span class="line">        error = <span class="number">0.0</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(len(targets)):</span><br><span class="line">            error = <span class="number">0.5</span> * (targets[k] - self.ao[k]) ** <span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> error</span><br></pre></td></tr></table></figure><p> 来源来自大牛 <a href="http://www.hankcs.com/ml/back-propagation-neural-network.html" target="_blank" rel="noopener">http://www.hankcs.com/ml/back-propagation-neural-network.html</a>  thx！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Just show the code.&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l
      
    
    </summary>
    
    
      <category term="人工智能" scheme="https://joshuaqyh.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
      <category term="神经网络" scheme="https://joshuaqyh.github.io/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
      <category term="python" scheme="https://joshuaqyh.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>认识经济学原理</title>
    <link href="https://joshuaqyh.github.io/2018/07/27/%E8%AE%A4%E8%AF%86%E7%BB%8F%E6%B5%8E%E5%AD%A6%E5%8E%9F%E7%90%86/"/>
    <id>https://joshuaqyh.github.io/2018/07/27/认识经济学原理/</id>
    <published>2018-07-27T15:28:32.813Z</published>
    <updated>2018-11-28T07:16:14.810Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://wallpapers.wallhaven.cc/wallpapers/full/wallhaven-643020.jpg" alt=""></p><h1 id="经济学学习"><a href="#经济学学习" class="headerlink" title="经济学学习"></a>经济学学习</h1><p>##十大曼昆经济学原理</p><p>###原理一：人们面临交替关系</p><p>典型的交替关系就是 “大炮和黄油”的交替，花更多钱在大炮研发上就注定了减少黄油生产的投入。</p><p>这其中 涉及到一个资源配置做出决策的问题。</p><p>认识到人们面临交替关系本身并没有告诉我们，人们将会或应该作出什么决策。一<br>个学生不应该仅仅由于要增加用于学习经济学的时间而放弃心理学的学习。社会不应该<br>仅仅由于环境控制降低了我们的物质生活水平而不再保护环境。也不应该仅仅由于帮助<br>穷人扭曲了工作激励而忽视了他们。然而，认识到生活中的交替关系是重要的，因为人<br>们只有了解他们可以得到的选择，才能作出良好的决策。</p><h3 id="原理二：某种东西的成本是为了得到它而放弃的东西"><a href="#原理二：某种东西的成本是为了得到它而放弃的东西" class="headerlink" title="原理二：某种东西的成本是为了得到它而放弃的东西"></a>原理二：某种东西的成本是为了得到它而放弃的东西</h3><p>许多行为选择的成本有时不是那么明显，收益也分为长期和短期，时间成本 ，金钱成本，人力成本都是需要考量的。</p><h3 id="原理三：-理性人考虑边际量"><a href="#原理三：-理性人考虑边际量" class="headerlink" title="原理三： 理性人考虑边际量"></a>原理三： 理性人考虑边际量</h3><p>做决策考虑行为所花的额外成本和额外收益，通过比较这种边际收益和边际成本来，评价比较合理。</p><h3 id="原理四：人们会对激励做出反应"><a href="#原理四：人们会对激励做出反应" class="headerlink" title="原理四：人们会对激励做出反应"></a>原理四：人们会对激励做出反应</h3><p>激励在决定行为中的中心作用是重要的。激励在贸易中可能体现为商品的成本或者收益。</p><hr><p><em>列出并简要解释个人作出决策的四个原理</em></p><hr><h3 id="原理五：-贸易能使每个人状况更好"><a href="#原理五：-贸易能使每个人状况更好" class="headerlink" title="原理五： 贸易能使每个人状况更好"></a>原理五： 贸易能使每个人状况更好</h3><p>贸易竞争能使国家和个人在相互交易的过程中收益。国与国之间的贸易未必就是像体育比赛一样一方赢，一方输，事实恰好相反，两国之间贸易可以使每个国家状况更好。</p><h3 id="原理六：市场通常是组织经济活动的一种好方法"><a href="#原理六：市场通常是组织经济活动的一种好方法" class="headerlink" title="原理六：市场通常是组织经济活动的一种好方法"></a>原理六：市场通常是组织经济活动的一种好方法</h3><p>经济学家亚当·斯密（Adam Smith）在他 1776 年的著作《国富论》中提出了全部<br>经济学中最有名的观察结果：家庭和企业在市场上相互交易，他们仿佛被一只“看不见<br>的手”所指引，引起了合意的市场结果。本书的目的之一就是要解释这只看不见的手如<br>何施展它的魔力。当你学习经济学时，你将会知道，价格就是看不见的手用来指引经济<br>活动的工具。价格既反映了一种物品的社会价值，也反映了生产该物品的社会成本</p><p>关于看不见的手在指引经济活动中的技巧有一个重要推论：当政府阻止价格根据供<br>求自发地调整时，它就限制了看不见的手协调组成经济的千百万家庭和企业的能力。这<br>个推论解释了为什么税收对资源配置有不利的影响：税收扭曲了价格，从而扭曲了家庭<br>和企业的决策。这个推论还解释了租金控制这类直接控制价格的政策所引起的更大伤<br>害。而且，这个推论也解释了共产主义的失败。在共产主义国家中，价格不是在市场上<br>决定的，而是由中央计划者指定。这些计划者缺乏那种在价格对市场力量自由地作出反<br>应时反映在价格中的信息。中央计划者之所以失败，是因为它们在管理经济时把市场上<br>那只看不见的手缚起来了。</p><p>###原理七：政府有时可以改善市场结果</p><p>政府干预经济的原因：促进效率和促进平等。政策的目标不是做大经济蛋糕二十改变蛋糕的分割。</p><p>​    看不见的手通常会使市场有效地配置资源。但是，由于各种原因，有时看不见的手<br>不起作用。经济学家用市场失灵这个词来指市场本身不能有效配置资源的情况。<br>市场失灵的一个可能原因是外部性。外部性是一个人的行动对旁观者福利的影响。<br>污染是一个典型的例子。如果一家化工厂并不承担它排放烟尘的全部成本，它就会大量<br>排放。在这种情况下，政府就可以通过环境保护来增加经济福利。<br>    市场失灵的另一个可能原因是市场势力。市场势力是指一个人（或一小群人）不适<br>当地影响市场价格的能力。例如，假设镇里的每个人都需要水，但只有一口井。这口井<br>的所有者对水的销售就有市场势力——在这种情况下，它是一个垄断者。这口井的所有<br>者并不受残酷竞争的限制，而正常情况下看不见的手正是以这种竞争来制约个人的私<br>利。你将会知道，在这种情况下，规定垄断者收取的价格有可能提高经济效率。</p><hr><p><em>列出并简要解释关于经济相互交易的三个原理</em></p><hr><h3 id="原理八：-一国的生活水平取决于它生产物品与劳务的能力"><a href="#原理八：-一国的生活水平取决于它生产物品与劳务的能力" class="headerlink" title="原理八： 一国的生活水平取决于它生产物品与劳务的能力"></a>原理八： 一国的生活水平取决于它生产物品与劳务的能力</h3><p>​    用什么来解释各国和不同时期中生活水平的巨大差别呢？答案之简单出人意料之<br>外。几乎所有生活水平的变动都可以归因于各国生产率的差别——这就是一个工人一小<br>时所生产的物品与劳务量的差别。在那些每单位时间工人能生产大量物品与劳务的国<br>家，大多数人享有高生活水平；在那些工人生产率低的国家，大多数人必须忍受贫困的<br>生活。同样，一国的生产率增长率决定了平均收入增长率。</p><p>​    生产率和生活水平之间的基本关系是简单的，但它的意义是深远的。如果生产率是<br>生活水平的首要决定因素，那么，其他解释的重要性就应该是次要的。例如，有人想把<br>上个世纪美国工人生活水平的提高归功于工会或最低工资法。但美国工人的真正英雄行<br>为是他们提高了生产率。另一个例子是，一些评论家声称，美国近年来收入增长放慢是<br>由于日本和其他国家日益激烈的竞争。但真正的敌人不是来自国外的竞争，而是美国生<br>产率增长的放慢。</p><p>​    生产率与生活水平之间的关系对公共政策也有深远的含义。在考虑任何一项政策如<br>何影响生活水平时，关键问题是政策如何影响我们生产物品与劳务的能力。为了提高生<br>活水平，决策者需要通过让工人受到良好的教育，拥有生产物品与劳务需要的工具，以<br>及得到获取最好技术的机会。</p><h3 id="原理九：-当政府发行了过多的货币之后，物价上涨"><a href="#原理九：-当政府发行了过多的货币之后，物价上涨" class="headerlink" title="原理九： 当政府发行了过多的货币之后，物价上涨"></a>原理九： 当政府发行了过多的货币之后，物价上涨</h3><p>货币发行量超量，会导致通货膨胀</p><h3 id="原理十：社会面临通货膨胀与失业之间的短期交替关系"><a href="#原理十：社会面临通货膨胀与失业之间的短期交替关系" class="headerlink" title="原理十：社会面临通货膨胀与失业之间的短期交替关系"></a>原理十：社会面临通货膨胀与失业之间的短期交替关系</h3><p>交替关系称为菲利普斯曲线。</p><p>由于价格是粘性的，各种政府政策都具有不同于长期效应的短期效应。例如，当政<br>府减少货币量时，它就减少了人们支出的数量。较低的支出与居高不下的价格结合在一<br>起就减少了企业销售的物品与劳务量。销售量减少又引起企业解雇工人。因此，对价格<br>的变动作出完全的调整之前，货币量减少就暂时增加了失业。</p><hr><p><em>列出并简要解释描述整体经济如何运行的三个原理。</em></p><hr><p>币值稳定–交换的媒介</p><p>币值不稳定–投机的工具</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://wallpapers.wallhaven.cc/wallpapers/full/wallhaven-643020.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;经济学学习&quot;&gt;&lt;a href=&quot;#经济学学习&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="经济学" scheme="https://joshuaqyh.github.io/tags/%E7%BB%8F%E6%B5%8E%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>湫嘤记-壹</title>
    <link href="https://joshuaqyh.github.io/2018/07/27/%E6%B9%AB%E5%98%A4%E8%AE%B0-%E5%A3%B9/"/>
    <id>https://joshuaqyh.github.io/2018/07/27/湫嘤记-壹/</id>
    <published>2018-07-27T15:28:32.802Z</published>
    <updated>2018-07-27T15:33:40.467Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>“我意识到在这个地球上，除了你，没有人能够远程控制我的感情。”</p><p>​                                ——记生命中一段绵长的奇迹。</p></blockquote><p><img src="http://p8ekwajjb.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20180519114654.jpg" alt=""></p><p>一开始并不是想要讲一个宏大而浪漫的故事。没得讲，也不敢想。那天的白衣和相机，那天的短暂相遇，成了我最意想不到的一场奇迹。</p><h1 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h1><p>十二月份的广州已经有些寒意，凉风把天一点一点吹高，很高，高到目光都不知道多久才能到达流云之上。</p><p>匆匆忙忙出门的路人A，对这次任务并没有一丝的兴趣。高中母校的校庆将至，每个人都要拍一段对母校的祝福。跟摄影师师兄约好的时间，就是今天了。</p><p>要在陌生人面前，对着他手中的相机镜头，挤出商业性微笑，说出一串感性的祝福语吗？开什么玩笑啊……难为情。社交恐惧症，真的很难为情。</p><p>万一是个很猥琐的师兄怎么办？万一很不好说话怎么办？就算不差，也实在是太抗拒陌生人了。路人A无奈地想着。</p><p>啊，他来了。</p><p>“你是XX吗？我就是师兄XXX。”</p><p>什么？师兄……原来是这样子的吗？</p><p>路人A不太记得接下来说了些什么。唯一记忆犹新的，是那个将所有的焦虑和压抑都扫到流云之上去的微笑。</p><p>是光，冬日里不被云朵遮蔽的阳光，照在瞌睡的猫咪身上，绒毛的轮廓是一圈柔光如万千新生命跃动。</p><p>是歌，舒缓得如细水轻盈环绕，又是一股上扬的力量把你托起，升到可以离开所有世俗冷漠的高度。</p><p>路人A一直在小小的世界里搜集的，那种不经意间撞击心灵的感动，不经意间绚烂开放的美，似乎又落脚了。</p><p>没有架子，没有距离感，一直都那么清爽地咧嘴笑着，弯着湖水般的明亮双眼看着A，给她看相机里的画面。</p><p>不值一提的个人片段拍摄结束，故事按理来说到这里也结束了。</p><p>某一天朋友B在吃饭时向路人A提起，“XXX师兄真的是个超级温柔的人啊，从来不发脾气，什么都乐意帮忙，又那么有能力，你不知道，我们这次的策划啊，师兄他……”</p><p>路人A不知道策划的事。她只知道，这大概就是那一类自己很向往但是从来不可能成为的人吧。一直站在中心，那么耀眼，给所有的人善意，到处奉献自己的温柔，向暖，造暖。</p><p>她是个人主义者，不喜集群，闭门造车，琴棋书画只为取悦自己，纷繁复杂能不理则一概不理，从来高傲，却又自卑，无心也无力维持巨大的社交网络，不够有趣便拒之门外，融入世界需要莫大努力，打开心门需要莫大缘分。</p><p>可能是孤独，也有人说是独特。一个人流浪久了，自己也不知道是什么了。但是路人A，也是向暖的，也是想要有变化的，也是想靠近光的。</p><h1 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h1><p>路人A咬咬牙，主动在微信上找了师兄。字字斟酌，反反复复，写学术论文般修改底稿，删除，空格，删除，空格，终于回车。</p><p>“师兄真的很厉害呢。“</p><p>“我想我没办法成为集体喜欢的那种人，但是我真的很欣赏师兄。”</p><p>师兄并没有因为生分而怠于回复，而是真诚地聊了很久，像阔别的旧友。每字每句的温度，恰如哥哥轻拍肩的安心感，暖流注入了A的心房。</p><p>“被集体喜欢很难，而且也未必就是真的喜欢……个人或者集体主义都好，都是中性词。”</p><p>她并没有被冷漠对待，A的心里有小小的欢喜，受宠若惊。</p><p>转念一想，欢喜什么？也许，所谓地暖，就是这样的吧。他生性使然，我怎可自作多情。</p><p>12月份也就这么悠悠晃过去了。没有其他值得提的故事。</p><p>但师兄在A的心中不经意撒下了几叶茶叶，不知不觉已被如获至宝地泡了一壶普洱，愈发醇厚，愈发袭人，空水共氤氲，只是，不敢细细品。</p><p>但A想要把这份勇敢继续下去。从小到大，A的行动力一直不强，很多事情都在安排好了的轨道上，只要往前走，不出意外就能得到。但A知道，十八岁以后，这种安稳已经消失了，从今往后的路不再属于被动前进的人。情感，也是如此。</p><p>1月1日，心血来潮的A在跨年的零点送出了一张小小的明信片。</p><p>“师兄，隐约觉得在师兄身上看到了我缺失的东西——那种冬日阳光般的温柔和热情，愿意付出自己，从不吝啬自己的微笑。愿你继续用那份细腻和温柔治愈世界，时光也一定会眷顾可爱的你……”</p><p>他说，哇，好喜欢！谢谢你。你也要继续简单快乐下去呀。</p><p>他还说，XX，你短头发很温雅的呢。</p><p>被夸了！</p><p>屏幕那边的A在捂嘴笑。温雅……是这样吗？就算是商业性夸奖，也是饮饱喝足的幸福了。</p><p>但是，这个时期的A清楚——或者说，在强迫自己用底线思维去说服自己搞清楚，她并不是真的喜欢上了师兄，她只是向暖，仅此而已，而也足够。应当知足，因为贪婪的悬崖一跃下即万劫不复。 </p><p>也许跨年夜的小小感恩是某种契机吧，一月份的路人A和她阳光一样的师兄开始慢慢变熟，慢慢发现这样那样的共同点，慢慢酝酿这样那样的话题。</p><p>A依然很谨慎，她不会每天都去叨扰师兄，她小心翼翼地选择着合适的时间、合适的频率、合适的话题，像雏鸟的羽毛，时不时轻挠师兄某根神经。</p><h1 id="三、"><a href="#三、" class="headerlink" title="三、"></a>三、</h1><p>有一天，A偶然听到了一首歌，如空谷幽兰，却又仿佛能最深入人心中的每个见不到阳光的缝隙和角落，如天鹅绒的触感紧紧包围，所有的不安都暂时消失在悠悠回荡的歌声中，天地和胸膛，融为一体。如果有翅膀，此时的蓝天，一定最适合飞翔……</p><p>A马上想到的，是分享给师兄。A突然想到那句话：</p><p>“那天我在街上看到一棵形状奇怪的榕树，第一反应竟是拍下来给你看。那时候我就知道，我大事不好了……”</p><p>这一刻她似乎明白了这种感觉。</p><p>A写了一段小小的乐评，连同歌曲一起发给了师兄。</p><p>22点50分，没有反应。</p><p>23点，没有反应。</p><p>23点30分，没有反应。</p><p>0点，    没有反应。</p><p>1点，    ……</p><p>A控制不住自己每过几分钟就看一眼手机，但终究是失望。她把头埋在枕头里，一遍又一遍地提醒自己该冷静一点了。也许只是一阵风吧，吹过了便过，他的好，只是一种逢场的应变，一种高超的社交技巧，一种对任何人都适用的套路，他是一个善于交际的人，给每个人阳光，可是管不了你绚烂不绚烂。</p><p>其实A还是不愿意相信的。师兄不是这样的人。就在两种想法的打架中，她终于撑不住，睡着了。</p><p>第二天醒来第一件事仍是抓起手机打开微信。</p><p>她看到了师兄回复的消息！一条，两条，三条，四条……很多，很长，很用心。</p><p>“细听这首歌，仿似一个歌者在悬崖上低吟浅唱，下视平野，远眺海洋，天空和海洋汇聚成地平线，歌声悠悠的回荡在天地间，还有绕耳的回响……淡淡的孤独与忧伤，却给人从中站起来的力量……”</p><p>原来一直都熬夜的师兄，刚好在那天养生了一回，早早入睡。A的消息，师兄是凌晨醒来才看到的。事情就是这么巧合。</p><p>师兄的那段文字，跟A的感受完美契合，甚至，A想不到更好的语言去表达出来的部分，师兄表达出来了。能够去感知虚无缥缈的东西，并用文字去表达出来的人，是拥有一颗诗意的心的，是有情怀有温度的人，A始终这么相信着。她再次确信了，师兄的内心，有星辰大海，值得她去探索。</p><p>就这么一来二去，A朦胧地感觉到，她和师兄，站在某一座吊桥的两端，相望着对方，想跨出一步，却因为不清楚绳的承重而担忧，是否会因彼此走近而使桥断裂，跌入深渊。</p><p>可是A很快就明白，脚底下的并不是深谷。</p><h1 id="四、"><a href="#四、" class="headerlink" title="四、"></a>四、</h1><p>某一天，朋友C说，你怎么好像变温柔了。</p><p>是的，她不再那么棱角分明，不再那么冷若冰山，偶尔微笑，偶尔体贴，会去想环路上的猫咪是否有个可以安稳睡觉的家，会去想雨夜执勤的保安身上会不会太单薄，家里是否牵挂……难道这种改变毫无理由？她才突然悟到，自己好像被感染了。</p><p>水愈发接近沸腾，躁动的气泡随心跳的频率不断上升，茶香再也无处可逃，飘进了彼此的心里。</p><blockquote><p>然后，他说，你以后就不用再拿我当师兄了，就叫我的名字就好了。</p><p>然后，他说，能和你倾心交流真的很开心，我认识的人太多，但这样的人真的不多。</p><p>然后，他说，晚上走环路的时候如果一个人害怕，也可以叫上我的。</p><p>然后，他说，明天一起复习吗？</p></blockquote><p>那天晚上，A到凌晨三点半才入睡。翻来覆去的，都是一个月前师兄那模糊的身影。再次见面，他会不会对我印象减分？我长得足够好看吗？我的谈吐足够大方吗？我有很多话题跟他讲吗？不断地在心里一遍遍打草稿，想流程，仿佛迎接一场重要的面试。</p><p>令A怎么也没有想到的是，接下来的两天，她几乎都和师兄待在一起。</p><p>也许，如果第一次见面那天晚上，A没有跟师兄说：“今天真的很开心，谢谢你”，师兄也就不会说“明天还继续吗？”，故事可能也就没有接下来的进展了。</p><p>等到很后来才知道，必然，是心的互相吸引；偶然，是彼此一个小小的表示主动的动作，必然和偶然的叠加，便是难以置信的天时地利人和。</p><p>再然后，在人烟稀少的环路，在微风轻拂的中心湖，在碧绿的草地上，在有阳光的树林里，两个人天南地北地聊着，漫无目的，只顾相互接近。彼此的人设一次又一次地崩塌、修缮、重建，越来越真实，越来越完整。</p><p>他们见面越来越频繁。而路人A的心里已经发生了翻天覆地的变化。但A还是不敢多想，她怕自己的细腻和敏感会给自己招来祸事——自作多情，终归破灭。</p><blockquote><p>你很耀眼 你很充实 像一阵风 似乎可以吹动所有的安分和不安分</p><p>但我不知道你会不会眷顾曾经经过的草地</p><p>你的世界像一副完整的拼图 那我应该从哪里进去 </p></blockquote><p>她强行关闭自己少女情窦初开的窗户，若无其事地继续相处。她仍坚守着她的底线思维，奢望太多是要吃亏的，即使感受到了某种电波，也不能得意忘形。</p><p>这样做朋友也非常幸福不是吗？</p><p><strong>果然，低潮来了。</strong></p><p>考试周，整整四天彼此都没有联系。四天，四天里他也许一刻都没有想起过A的事吧。果然还是普通的朋友吧？想得起来了就联系，想不起来就淡如水。A很难过。</p><p>倒数第二天，考完试出来，疲累的A一个人听着歌在内环上慢悠悠地走着，看着轻云追着夕阳跑，看着粉色的云块被红色的云块吞噬，紫色的云块和黄色的云块缠绵。</p><p>好想跟他说话。好想好想。不怕丢脸了，不想矜持了，不怕造成困扰了。久旱何时逢甘霖。</p><p>A终于忍不住拿出手机。聊了那么一两句，A还在码着字，师兄突然说：“先这样吧，我同学催我去打游戏了……”</p><p>A默默把字一个一个删掉，默默地继续走。那天，A不知道怎么的迷迷糊糊走上了外环，在太阳落山之后迷路了，长长的环路逐渐融化在漆黑夜色中，她无奈地打开导航，在狂风中骑车，骑了很久很久，慌乱之中总算赶回了学校。</p><p>晚上，A因为白天的事有点失落，而最后一天又是两门最艰难的专业课，万分疲劳的A扔掉厚重的课本，插上耳机，开始宣泄自己的情感。手指在键盘上飞舞，诗行像疾速前行的火车一样，呼啸着穿过自己的内心。她疯狂地把自己的感情全都宣泄在这密密麻麻的文字里，只怕手速赶不上思维的激流，只怕语言传达不了内心的狂热。</p><p>手机屏幕猝不及防地亮了。是那熟悉的头像。茫茫海雾中航行的船只看到了信号塔的灯光。</p><p>“在复习吗？要不要出来走走？”看一看时刻，十一点半。</p><p>A叫了一声，差点从床上掉下来。她飞快地冲出去，所有的烦乱在这短短的信息里烟消云散。</p><p>“深夜的环路，雾气朦胧的恍若仙境，好棒啊。”</p><p>“呃，什么雾……这是丁达尔效应。”</p><p>“哇，你能不能诗意一点？现在这个氛围，一定要这么理性嘛？诶，工科男的思维啊……”A已经可以放肆一点地打趣了。</p><p>然后文艺到骨子里的文科生A和理性至上的工科生在凌晨寒冷的环路上傻笑了起来。</p><p>回想这几天的事，A突然有点谴责自己。我是不是对师兄太不信任了？事到如今，似乎没有必要再因为一些小事而去怀疑师兄的真诚，没必要不断地去拷问这段朦胧的感情。</p><p>水深火热的考试周终于过去，A第一次主动约了师兄走环路。</p><p>A想杀一个措手不及。“我问你一个问题。你会不会烦我呀？”</p><p>“为什么突然这么说啊？你突然这样，弄得我好不知所措。”</p><p>“如果我频繁地找你会打扰到你，那你可以直接说的……我不想过分地影响你的生活。”</p><p>“我，我不烦你啊……我这个人的性格，不会轻易觉得别人烦的。”<br>这句话让A倒吸一口凉气，她觉得师兄的回答烂透了。A直接就说了，原来你不烦我，是因为你性格的原因，而不是因为我的某些特质或者吸引你的地方啊？</p><p>“不，不是这样的……哎呀，怎么说，我……我感觉我最近像个智障了。不知道怎么表达，可是，可是我真的没有烦你啊！”</p><p>看到师兄慌乱的样子，A窃喜。她相信的，她相信师兄没有觉得她困扰。但是，她就是想逗一逗师兄。</p><p>“你的回答让我伤心了。”</p><p>“你的提问也让我伤心了。”</p><p>“为什么？”</p><p>“居然问我有没有烦你，我肯定伤心啊。”</p><p>哦？似乎师兄的情商，其实一点都不低。</p><h1 id="五、"><a href="#五、" class="headerlink" title="五、"></a>五、</h1><p>次日，师兄约了A一起去看电影。</p><p>从学校到巨幕影院，有将近一个小时的遥远路程。可是A却觉得这简直是一种馈赠，与他一起走，即使是走在永无止境的潘洛斯阶梯，也没有问题。</p><p>晚风清凉，A突然说：“你唱歌给我听好不好？”</p><p>羞涩了一下之后，师兄唱了很多。唱了少女的祈祷，唱了童话镇，唱了怯。</p><blockquote><p>“祈求天地放过一双恋人，怕发生的永远别发生。从来没顺利遇上好景降临，如何能重拾信心……”</p></blockquote><p>A若有所思。</p><p>每次过红绿灯的时候，其实A都在观察师兄的侧脸。这侧脸真的很好看，长长的睫毛，高挺的鼻梁，还有那如水的目光，融化了春天的雪，深藏了如烟的柳絮。</p><p>聊着聊着，他们聊到了有点沉重的话题。A在社团里一直有些自卑，不起眼又被孤立，如今走到退社的境地。A垂下了头，难为情地苦笑。</p><p>一直盯着地面的A，突然感受到一个温暖的手掌，轻轻地拍了拍自己的后脑勺，轻得像羽毛掉落，掉落在A的内心，然后，烟火盛放。</p><p>“不要自卑啦，你很好的，我只希望你好好的呀……”</p><p>A假装镇定自若，心如止水，继续说着什么话，但大脑里早已不知道自己在说什么。</p><p>看电影的过程中，师兄一直把头侧向A的这一边。只要A扶一下眼镜或吸一下鼻子，师兄就警觉地看过来。A抽泣了，他都知道。他会温柔地拍一拍A的额头，用温柔得像哄婴儿的声音说“没事没事，没事哈……”</p><p>看的是印度电影《神秘巨星》。电影中尹希娅的小男友，可爱又浪漫、情商极高的钦腾，一举一动都触动情窦初开少女的心弦。对比了一下有些木讷、不解风情的师兄，A凑近他，悄声说了一句“你看人家，情商多高。学习一下？”</p><p>“啊……怎么办……呜……”师兄一副慌忙又委屈的模样，让A忍俊不禁。</p><p>看完电影的A，感动得怎么也止不住眼泪。“现在不要看我，我妆都花了。”“花了也非常好看。”</p><p>她心里在想着，如果此刻如此脆弱的我，可以得到师兄一个拥抱，哪怕片刻永恒……</p><p>回去的路上，A的腿很酸痛。她开玩笑般地说，师兄可以背我吗？</p><p>“可以啊！上来吧。”</p><p>“不不不……不用了。”A还是没有勇气接受。</p><p>但是A也有自己的小心机。她有意无意地就提起自己走不动了，她多希望，师兄能够扶着她走路。她想要接触，想要接触师兄温暖的手，想要感受到那熟悉的温度，想要靠在他结实的肩膀上看着疏星点点。</p><p>结果并没有。也许师兄也在小心翼翼地着棋吧，生怕下错一步，便不复从前。</p><p>一路无言，只有脚步声和影子，在路灯下演着默剧，揉碎夜的寒冷。</p><p>“你，现在在想什么呀？”师兄打破沉默。</p><p>完了，被将一军了。向来善于表达、自诩情商高的A突然舌头打结，捉摸不透这句话的意味，也想不到很好的回答。</p><p>“那，那你在想什么？”</p><p>“你猜。”</p><p>“我不猜。”</p><p>就这样，两个人各怀心事地继续走着，走回了各自的宿舍。</p><p>A不想要再静默下去，她把考试周的时候写的诗送给了师兄，希望迟钝的他能够在字里行间领会到哪怕一丝期许。</p><blockquote><p>“我习惯了沉默 习惯了自己的高傲 习惯了比孤独更深一层的独特</p><p>习惯了窝在自己的舒适地带 也习惯了冷漠和稀零</p><p>也许我很不起眼 但也希望有人能够注意到我</p><p>我其实也不甘只是这样 也想有改变 想跟着你一起成长 想要被你所带动 所感染 </p><p>也想向你尽可能展示我的光怪陆离 想让你感到至少是不无聊的</p><p>在兵荒马乱的世界 唱一首有点奇怪的歌 至少是让人值得注意的</p><p>很难喜欢君子之交淡如水这句话  只是对淡去的感情无法挽回的一种无奈叹惜</p><p>改变不了的事情 万用的道理去解释 解脱自己或者自我麻痹</p><p>如果可以像浪花一样热烈 像喷泉一样灵动 为什么要选择淡如水 </p><p>这样想的我很自私 我知道 每个人都有自己的生活</p><p>但是</p><p>如果可以用一点点的自私去换一点点的改变 </p><p>用一点点的改变去一点点走进别人的生活</p><p>一点点地让自己变得美好 </p><p>一点点地为别人变得美好而献出自己微弱的光</p><p>该如何感动得泪湿眼眶</p><p>我像橡皮糖很黏 因为无法自我消化 所以渴望别人帮忙咀嚼我的情怀 快乐和烦恼</p><p>我总是无法独立 千头万绪像蒲公英一样飞舞 去寻找值得落下的地方</p><p>去看看——别人的房前屋后 别人的花开花落 </p><p>别人那些在凌晨降临的软肋和在清晨复苏的坚定 那些写在眼里的信念和藏在心里的叹息</p><p>别人那些孤独 冷了深夜铁青的窗沿</p><p>别人那些温柔 爬上老家瓦顶的月光</p><p>我喜欢仰望有趣的灵魂中深藏的星辰大海 拥抱春暖花开</p><p>而你碰巧就在这里 </p><p>那就让相同的彼此懂得 不同的便互相成就</p><p>我希望的</p><p>能有心照不宣 像足迹融化在雪地里 也有口口声声 是光点斑驳了夏季</p><p>顺着一架很长很长的梯子 从今天爬到明天 后天 坐在未来的屋顶</p><p>一起看湛蓝的天空如何变成金色的夕阳 泼墨的流云如何变成厚涂的油画</p><p>编织一个很长很长的故事 也从今天写到明天 后天 写在未来的结尾</p><p>金色的夕阳又唤醒了金色的朝阳 一轮又一轮 </p><p>但我们永远年轻”</p></blockquote><p>但是师兄似乎并不解其中味，他说，诗意的灵魂不拘一格。</p><p>A想要的不是赞赏呀。</p><h1 id="六、"><a href="#六、" class="headerlink" title="六、"></a>六、</h1><p>接下来就是寒假了。A独自坐车回家，师兄还要留在学校几天。</p><p>见不到面的第一天，A有点骚动。深夜，A还是不愿意道晚安。“去睡吧，醒来再聊呀。”</p><p>一个小小的约定，给了A对明天的十足期待。睡吧，一早醒来，说不定还会有思念已久的粿汁可以吃。</p><p>见不到面的第二天，一早醒来，没有早餐。也没有师兄的消息。中午，没有动静。下午，没有动静。晚上，没有动静。</p><p>23点，仍然没有动静。</p><p>A无精打采地趴在床上，发了一个“你不要我了”的表情。</p><p>他很快就回复了。“没有呀！”他说今天很忙。</p><p>那就原谅你吧。</p><p>“抗日神剧好雷啊。为什么有枪不用，用刀……还有好多病句，什么几十位烈士壮烈牺牲……”</p><p>“哎，你看这个就该隐藏智商。它的市场瞄准的又不是我们。你呀，智商该上线的时候不上线，在这时候就上线……”</p><p>A继续聊。突然间，一个巨大方块唐突地跳了出来，密密麻麻的文字霸占了屏幕。</p><blockquote><p>“有好多话没有说呢，无法准确传达我自己，从何说起呢，试着说一下。</p></blockquote><p>总觉得和你有了默契，你是明白我的，我的快乐与忧虑也很想翻译成言语与你分享，除去忧伤，带给你一束光。</p><p>我一开始答应和你走在一起不是因为我要和你在一起，而是你能明白我……</p><p>我特别享受能与你走在夜道中，晚风拂过脸庞，你我倾谈。你伤心需要陪伴的时候，有时说不出来安慰的话，我心头总是一顿软绵绵的无力感，我描述不出那种具体的感觉，但我还是知道的——那叫做喜欢。”</p><p>A的提醒，让师兄“智商终于上线了”</p><p>这就是传说中的……告白吗？</p><blockquote><p>“有好多话没有说呢，无法准确传达我自己，从何说起呢，试着说一下。</p><p>总觉得和你有了默契，你是明白我的，我的快乐与忧虑也很想翻译成言语与你分享，除去忧伤，带给你一束光。</p><p>我一开始答应和你走在一起不是因为我要和你在一起，而是你能明白我……</p><p>我特别享受能与你走在夜道中，晚风拂过脸庞，你我倾谈。你伤心需要陪伴的时候，有时说不出来安慰的话，我心头总是一顿软绵绵的无力感，我描述不出那种具体的感觉，但我还是知道的——那叫做喜欢。”</p></blockquote><p>A还没反应过来，还没意识到这意味着什么，眼泪就先下来了。</p><p>泪水一片一片模糊视线，一个一个的方块字却越来越清晰，仿佛复刻进心里，默念便能倒背如流。</p><p>她不知道，其实在她按捺不住去找师兄聊的这段时间里，师兄已经在开始准备，开始酝酿，开始勇敢地迈出一步。</p><p>“ 我想说，我在2017的尾巴突然变得很幸运……就像我给你的诗写的，你碰巧就在这里，我就那么幸运遇到了你。</p><p>我想要的，有人能跟我一起看夕阳和朝霞。我也愿意去仰望他的天空，他的孤独和快乐。</p><p>跟你一起的日子，我希望内环有八万里。”</p><p>“怪我，在你走的前一天晚上没牵起你的手。让你一个人坐车回去，我很不自在。”</p><p>“那这个锅，你可要好好背着。”</p><p>“下次见面，我就要抱抱你……”</p><p>路人A终于可以卸掉她路人的外衣，就像尹希娅卸掉自己黑色的罩袍。她终于可以说，她不再是路人A，不再是他世界里微不足道的路人，不再是孤独地站在世界边缘的流浪诗人，她是嘤嘤，世界上独一无二的嘤嘤。</p><p>他也不再是触不可及的完美师兄，他也有脆弱的一面， 傻气的一面，浪漫的一面，可爱的一面，他是奕浩，世界上独一无二的奕浩。</p><h1 id="七、"><a href="#七、" class="headerlink" title="七、"></a>七、</h1><p>某天晚上，嘤嘤和奕浩在打电话。</p><p>他说，“我就想这样子跟你浪费时光，什么也不做，跟你说话。”</p><p>她说，“浪费这个词不是很好，改一下。”</p><p>怎么改？</p><p>……想了很久。</p><p>嘤嘤在奕浩的电脑上敲下了：孕育时光。</p><p>然后嘤嘤又想了想，继续敲下了：奕起变老。</p><p>然后奕浩移动光标，在最前面敲下了：颖你而在。</p><p>因你而在，孕育时光，一起变老。</p><p>颖你而在，孕育时光，奕起变老。</p><p>嘤嘤又想起了约会时的对话：</p><blockquote><p> 我们就这样到处走，没有目的地，哪里都是过程。终点就是你，终点就是我。</p></blockquote><p><strong>我们的故事才刚刚开始，并且永远不会结束。</strong> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;“我意识到在这个地球上，除了你，没有人能够远程控制我的感情。”&lt;/p&gt;
&lt;p&gt;​                                ——记生命中一段绵长的奇迹。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http:/
      
    
    </summary>
    
    
      <category term="love" scheme="https://joshuaqyh.github.io/tags/love/"/>
    
  </entry>
  
  <entry>
    <title>内存管理--操作系统第七章</title>
    <link href="https://joshuaqyh.github.io/2018/07/27/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86--%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%B8%83%E7%AB%A0/"/>
    <id>https://joshuaqyh.github.io/2018/07/27/内存管理--操作系统第七章/</id>
    <published>2018-07-27T15:28:32.788Z</published>
    <updated>2018-07-27T15:33:04.109Z</updated>
    
    <content type="html"><![CDATA[<h3 id="指令和数据绑定到内存地址的条件"><a href="#指令和数据绑定到内存地址的条件" class="headerlink" title="指令和数据绑定到内存地址的条件"></a>指令和数据绑定到内存地址的条件</h3><ul><li>编译时— 若知道进程在内存里的驻留地址，直接生成 绝对代码</li><li>加载时— 若不知道进程的驻留地址，那么生成可重定位代码</li><li>执行时— 如果进程需要进行内存段之间的移动，那么需要延迟到执行时才进行</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://p8ekwajjb.bkt.clouddn.com/1527035732685.png" alt="52703573268" title="">                </div>                <div class="image-caption">52703573268</div>            </figure><h3 id="逻辑地址空间和物理地址空间"><a href="#逻辑地址空间和物理地址空间" class="headerlink" title="逻辑地址空间和物理地址空间"></a>逻辑地址空间和物理地址空间</h3><p>CPU 所生成的地址通常称为逻辑地址( logical address) ，而内存单元所看到的地址(I!IJ<br>加载到内存地址寄存器(memory-address register) 中的地址)通常称为物理地址(physical<br>address) 。</p><p>编译和加载时的地址绑定方法生成相同的逻辑地址和物理地址。但是， 执行时的地址<br>绑定方案导致不同的逻辑地址和物理地址。对于这种情况， 通常称逻辑地址为虚拟地址<br>(virtual address)。在本书中， 对逻辑地址和虚拟地址不作区分。由程序所生成的所有逻辑<br>地址的集合称为逻辑地址空间(logical address space), 与这些逻辑地址相对应的所有物理<br>地址的集合称为物理地址空间(physical address space)。因此， 对千执行时地址绑定方案，<br>逻辑地址空间与物理地址空间是不同的。<br>运行时从虚拟地址到物理地址的映射是由被称为内存管理单元(memory-management<br>unit, MMU)的硬件设备来完成的。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://p8ekwajjb.bkt.clouddn.com/1527036351509.png" alt="52703635150" title="">                </div>                <div class="image-caption">52703635150</div>            </figure><h3 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h3><p>动态链接的概念与动态加载相似。只是这里不是将加载延迟到运行时，而<br>是将链接延迟到运行时</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://p8ekwajjb.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20180523090208.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="动态加载"><a href="#动态加载" class="headerlink" title="动态加载"></a>动态加载</h3><p>迄今为止所讨论的是一个进程的整个程序和数据必须处于物理内存中，以便执行。因<br>此进程的大小受物理内存大小的限制。为了获得更好的内存空间使用率，可以使用动态加<br>载(dynamic loading) 。采用动态加载时，一个子程序只有在调用时才被加载。所有子程序<br>都以可重定位的形式保存在磁盘上。主程序装入内存并执行。当一个子程序需要调用另一<br>个子程序时，调用子程序首先检查另一个子程序是否己加载。如果没有，可重定位的链接<br>程序将用来加载所需要的子程序，并更新程序的地址表以反映这→变化。接着，控制传递<br>给新加载的子程序。<br>动态加载的优点是不用的子程序决不会被加载。如果大多数代码需要用来处理异常情<br>况，如错误处理，那么这种方法特别有用。对于这种情况，虽然总体上程序比较大，但是<br>所使用的部分(即加载的部分)可能小很多。<br>动态加载不需要操作系统提供特别的支持。利用这种方法来设计程序主要是用户的责<br>任。不过，操作系统可以帮助程序员，如提供子程序库以实现动态加载。</p><h3 id="交换"><a href="#交换" class="headerlink" title="交换"></a>交换</h3><p>进程需要在内存中以便执行。不过，进程可以暂时从内存中交换(swap) 到备份存储<br>(backing store) 上，当需要再次执行时再调回到内存中。（例子：轮转法CPU调度）</p><p>如何进程换出roll out进程换入 roll in，操作系统较少采用。</p><h3 id="连续内存分配"><a href="#连续内存分配" class="headerlink" title="连续内存分配"></a>连续内存分配</h3><p>内存通常分为两个区域:一个用于驻留操作系统，另一个用于用户进程。操作系统可<br>以位于低内存，也可位于高内存。影响这一决定的主要因素是中断向量的位置。由于中断<br>向量通常位于低内存，因此程序员通常将操作系统也放在低内存。在本书中，只讨论操作<br>系统位于低内存的情况。真他情况的讨论类似。<br>通常需要将多个进程同时放在内存中，因此需要考虑如何为输入队列中需要调入内存<br>的进程分配内存空间。采用连续内存分配( contiguous memo可allocation) 时，每个进程位<br>于一个连续的内存区域。</p><h4 id="内存映射与保护问题"><a href="#内存映射与保护问题" class="headerlink" title="内存映射与保护问题"></a>内存映射与保护问题</h4><p>通过采用重定位寄存器(已在8.1.3 小节讨论)和界限地址寄存器(己在8. 1.1小节讨论)，可以实现这种保护。重定位寄存器含有最小的物理地址值;界限地址寄存器含有逻辑地址的范围值(例如，重定位=100040 ，界限=74600) 。有了重定位寄存器和界限地址寄存器，每个逻辑地址必须小于界限地址寄存器。MMU 动’;ti:ltfp将逻辑地址加上重定位寄存器的值后映射成物理地址。映射后的物理地址再送交内存单元</p><h4 id="内存分配方法"><a href="#内存分配方法" class="headerlink" title="内存分配方法"></a>内存分配方法</h4><p>最为简单的内存分配方法之一就是将内存分为多个固定大小的分区(partition) 。每个分区只能容纳一个进程。因此，多道程序的程度会受分区数所限制。如果使用这种多分区方法(multiple-partition method) ，当一个分区空闲时，可以从输入队列中选择一个进程，以调入到空闲分区。当进程终止时，其分区可以被其他进程所使用。<br>这种方法最初为IBM 08/360 操作系统(称为MFT) 所使用，现在已不再使用。下面所描<br>述的方法是固定分区方案的推广(称为MV凹，它主要用于批处理环境。这里所描述的许<br>多思想也可用于采用纯分段内存管理的分时操作系统。</p><p>在可变分区(variable-partition) 方案里，操作系统有一个表，用于记录哪些内存可用<br>和哪些内存已被占用。-开始，所有内存都可用于用户进程，因此可以作为一大块可用内<br>存，称为孔(hole) 。当有新进程需要内存时，为该进程查找足够大的孔。如果找到，可以<br>从该孔为该进程分配所需的内存，孔内未分配的内存可以下次再用。<br>随着进程进入系统，它们将被加入到输入队列。操作系统根据所有进程的内存需要和<br>现有可用内存情况来决定哪些进程可分配内存。当进程分配到空间时，它就装入内存，并<br>开始竞争CPU 。当进程终It时，它将释放内存，该内存可以被操作系统分配给输入队列中<br>的其他进程。<br>在任意时候，再→组可用孔(块)大小列表和输入队列。操作系统根据调度算法来对<br>输入队列进行排序。内存不断地分配给进程，直到下-个进程的内存需求不能满足为止，<br>这时没有足够大的可用孔来装入进程。操作系统可以等到有足够大的空间，或者往下扫描<br>输入队列以确定是否有其他内存需求较小的进程可以被满足。<br>通常，→组不同大小的孔分散在内存中。当新进程需要内存时，系统为该进程查找足<br>够大的孔。如果孔太大，那么就分为两块:一块分配给新进程，另一块还回到孔集合。当<br>进程终止时，它将释放其内存，该内存将还给孔集合。如果新孔与其他孔相邻，那么将这<br>些孔合并成大孔。这时，系统可以检查是否杳进程在等待内存~间，新合井的内存空间是<br>否满足等待进程。<br>这种方法是通用动态存储分配问题的二种情况(根据一组空闲孔来分配大小为n 的请<br>求)。这个问题有许多解决方法。从-组可用孔中选择-个空闲孔的最为常用方法有首次适<br>应( first岳1)、最佳适应(best-fiO 、最差适应(worst-fit) 。<br>·首次适应:分配第一小足够大的孔。查找可以从头开始，也可以从<strong>上次首次适应结束时开始</strong>(避开碎片）。一旦找到足够大的空闲孔，就可以停止。<br>·最佳适应:分配最小的足够大的孔。必须查找整个列表，除非列表按大小排序。这<br>种方法可以产生最小剩余孔。<br>·最差适应:分配最大孔。同样，必须查找整个列表，除非列表按大小排序。这种<br>方法可以产生最大剩余孔，该孔可能比最佳适应方法产生的较小剩余孔更为有用。<br>模拟结果显示首次适应和最佳适应方法在执行时间和利用空间方面都好于最差适应<br>方法。首次适应和最佳适应方法在利用空间方面难分伯仲，但是首次适应方法要更快些。</p><h3 id="碎片"><a href="#碎片" class="headerlink" title="碎片"></a>碎片</h3><p>首次适应方法和最佳适应方法算法都有外部碎片问题(external 企agmentation) 0 随着<br>进程装入和移出内存，空闲内存空间被分为小片段。当所有总的可用内存之和可以满足请<br>求，但并不连续时，这就出现了外部碎片问题，该问题可能很严重。在最坏情况下，每两<br>个进程之间就有空闲块(或浪费〉。如果这些内存是一整块，那么就可以再运行多个进程。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;指令和数据绑定到内存地址的条件&quot;&gt;&lt;a href=&quot;#指令和数据绑定到内存地址的条件&quot; class=&quot;headerlink&quot; title=&quot;指令和数据绑定到内存地址的条件&quot;&gt;&lt;/a&gt;指令和数据绑定到内存地址的条件&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;编译时— 若知道进程在内
      
    
    </summary>
    
    
      <category term="操作系统" scheme="https://joshuaqyh.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>流水线技术简介</title>
    <link href="https://joshuaqyh.github.io/2018/07/27/%E6%B5%81%E6%B0%B4%E7%BA%BF%E6%8A%80%E6%9C%AF%E7%AE%80%E4%BB%8B/"/>
    <id>https://joshuaqyh.github.io/2018/07/27/流水线技术简介/</id>
    <published>2018-07-27T15:28:32.768Z</published>
    <updated>2018-12-03T03:39:22.670Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="流水线技术"><a href="#流水线技术" class="headerlink" title="流水线技术"></a>流水线技术</h2><h3 id="流水线基础概念"><a href="#流水线基础概念" class="headerlink" title="流水线基础概念"></a>流水线基础概念</h3><p>​    • 指令的执行过程是，对每一条指令做取指令，分析指令，执行指令。</p><p>​    • 取指–移码–执行–访存–写回</p><p>​    • 流水执行是，取指令时间上一条指令的执行阶段，执行指令阶段可能是下一条指令的取指令阶段。</p><p>​    • 抽象概念：把一个重复过程分为若干个子过程，每个子部件由专门的部件实现。多个处理过程在时间上错开错开，依次通过各个部件。</p><p>​    • 流水的段：每个子过程。</p><p>​    • 流水的深度：子过程的个数。例如： 入-取指令-指令译码-执行-存结果-出–》浮点加法：入-求阶差-对阶-尾数相加-规格化-出</p><p>​    • 流水时间是每一个段时间的总和，需要注意的是通过一个段的时间最长的段为流水线设计的瓶颈。流水线中各段的时间应尽可能相等，否则将引起流水线堵塞、断流。时间长的段将成为流水线的瓶颈</p><p>​    • 时空图：从时间和空间两个方面来描述指令流水执行</p><p>​    • 流水线的性能指标–吞吐率。即单位时间内完成任务的数量或者输出结果的数       量。</p><p>​    </p><p>​    </p><h3 id="相关"><a href="#相关" class="headerlink" title="相关"></a>相关</h3><p>​    • 数据相关</p><p>​    • 名相关</p><p>​        ○ 输出相关–写写操作</p><p>​        ○ 反相关–先读后写，读的名和写的名一致</p><p>​    • 控制相关</p><p>​    </p><p>​    每条指令访问读写的寄存器称为名</p><p>​    输出相关–写写操作，两条指令的</p><p>​    反相关—先读后写，读的名和写的名一致</p><p>​    换名技术</p><p>​    </p><h3 id="流水线冒险（冲突）"><a href="#流水线冒险（冲突）" class="headerlink" title="流水线冒险（冲突）"></a>流水线冒险（冲突）</h3><p>​    1. 结构冒险–硬件不支持多条指令在同一时间周期执行–重复，细分部件</p><p>​    2. 数据冒险–一条指令需要等待另外一条指令完成而造成流水线暂停。（所以设计的段的时候时间应尽量保持一致–前推旁路–写后读冲突–在写入i之前，j先读取，会造成读取错误。</p><p>​    为避免数据等待的问题，在每个段之间设计了一个缓冲寄存器（也叫锁存器）</p><p>​    3.控制冒险 （分支冒险）–决策依赖于另外一条指令的结果，但其他指令正在执行当中。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;流水线技术&quot;&gt;&lt;a href=&quot;#流水线技术&quot; class=&quot;headerlink&quot; title=&quot;流水线技术&quot;&gt;&lt;/a&gt;流水线技术&lt;/h2&gt;&lt;h3 id=&quot;流水线基础概念&quot;&gt;&lt;a href=&quot;#流水线基础概念&quot; class=&quot;heade
      
    
    </summary>
    
    
      <category term="计组理论" scheme="https://joshuaqyh.github.io/tags/%E8%AE%A1%E7%BB%84%E7%90%86%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>回调函数</title>
    <link href="https://joshuaqyh.github.io/2018/07/27/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/"/>
    <id>https://joshuaqyh.github.io/2018/07/27/回调函数/</id>
    <published>2018-07-27T15:28:32.756Z</published>
    <updated>2018-11-28T07:15:12.332Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是回调函数"><a href="#什么是回调函数" class="headerlink" title="什么是回调函数"></a>什么是回调函数</h4><p>In computer programming, a callback is a piece of executable code that is passed as an argument to other code, which is expected to call back (execute) the argument at some convenient time［引自 维基百科 callback］</p><p>回调函数是一段可执行的代码段，它作为一个参数传递给其他的代码，其作用是在需要的时候方便调用这段（回调函数）代码。</p><p>在JavaScript中函数也是对象的一种，同样对象可以作为参数传递给函数，因此函数也可以作为参数传递给另外一个函数，这个作为参数的函数就是回调函数。</p><p>回调函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function add(num1, num2, callback)&#123;</span><br><span class="line">var sum = num1 + num2;</span><br><span class="line">callback(sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function print(num)&#123;</span><br><span class="line">console.log(num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add(1, 2, print);//=&gt;3</span><br></pre></td></tr></table></figure><p>匿名回调函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function add(num1, num2, callback)&#123;</span><br><span class="line">var sum = num1 + num2;</span><br><span class="line">callback(sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add(1, 2, function(sum)&#123;</span><br><span class="line">console.log(sum);//=&gt;3</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>jQuery中大量的使用了回调函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#btn&quot;).click(function() &#123;</span><br><span class="line">  alert(&quot;button clicked&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="回调函数有哪些特点"><a href="#回调函数有哪些特点" class="headerlink" title="回调函数有哪些特点"></a>回调函数有哪些特点</h4><p><strong>不会立刻执行</strong></p><p>回调函数作为参数传递给一个函数的时候，传递的只是函数的定义并不会立即执行。和普通的函数一样，回调函数在函调用函数数中也要通过<code>()</code>运算符调用才会执行。</p><p><strong>是个闭包</strong></p><p>回调函数是一个闭包，也就是说它能访问到其外层定义的变量。</p><p>你再github的用户名和刚才新建的仓库 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;什么是回调函数&quot;&gt;&lt;a href=&quot;#什么是回调函数&quot; class=&quot;headerlink&quot; title=&quot;什么是回调函数&quot;&gt;&lt;/a&gt;什么是回调函数&lt;/h4&gt;&lt;p&gt;In computer programming, a callback is a piece of 
      
    
    </summary>
    
    
      <category term="js" scheme="https://joshuaqyh.github.io/tags/js/"/>
    
      <category term="cocos2d.x" scheme="https://joshuaqyh.github.io/tags/cocos2d-x/"/>
    
  </entry>
  
  <entry>
    <title>关系数据库设计理论简介</title>
    <link href="https://joshuaqyh.github.io/2018/07/27/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E7%90%86%E8%AE%BA/"/>
    <id>https://joshuaqyh.github.io/2018/07/27/关系数据库设计理论/</id>
    <published>2018-07-27T15:28:32.735Z</published>
    <updated>2018-07-27T15:32:16.784Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="函数依赖"><a href="#函数依赖" class="headerlink" title="函数依赖"></a>函数依赖</h3><ul><li>X→Y，表示Y依赖于X；</li><li>X→Y，且Y→X不成立，Y→Z，则X→Z，表示Z传递依赖于X。</li></ul><h4 id="函数依赖性质"><a href="#函数依赖性质" class="headerlink" title="函数依赖性质"></a>函数依赖性质</h4><ul><li>自反性</li><li>传递性</li><li>增广性  A → C 可以推出 AB → BC</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="C:\Users\ADMINI~1\AppData\Local\Temp\1526869989262.png" alt="52686998926" title="">                </div>                <div class="image-caption">52686998926</div>            </figure><h4 id="函数依赖的种类"><a href="#函数依赖的种类" class="headerlink" title="函数依赖的种类"></a>函数依赖的种类</h4><p>（<strong>完全函数依赖</strong>：在关系模式R（u）中，X,Y是U的子集，Y函数依赖于X 并且 Y非函数依赖于X的子集，则称Y完全函数依赖于X。X  f &gt;Y）—&gt; Y依赖于X,但未必都依赖X的子集。</p><p>（<strong>部分函数依赖</strong>：在关系模式R（u）中，X,Y是U的子集，Y函数依赖于X 并且 Y函数依赖于X的子集）</p><p>（<strong>函数依赖</strong>：某个属性集决定另一个属性集时，例如学生学号属性集Sno决定学生姓名属性集Sname，称Sname函数依赖于Sname ）</p><p>（<strong>平凡函数依赖</strong>：Y函数依赖于X,并且Y包含于X，例如（Sno）-&gt;(Sno)、（Sno、Sname）-&gt;（Sno））</p><p>（<strong>非平凡函数依赖</strong>：Y函数依赖于X,并且Y不包含于X,例如(Sno,Sname）-&gt;（Ssex））</p><h3 id="键"><a href="#键" class="headerlink" title="键"></a>键</h3><p>候选键： 能够唯一表示一个元组，且不含多属性<br>超键： 是指能够唯一表示一个元组的属性集<br>主属性：表示候选键中的属性<br>非主属性：不包含在主键中的属性</p><p><strong>判断主键的方法</strong> ：若属性集为{ A , B, C}，A+ = ABC。 则A为主键。（属性闭包判断法） </p><h3 id="范式-Normal-Forms"><a href="#范式-Normal-Forms" class="headerlink" title="范式 Normal Forms"></a>范式 Normal Forms</h3><p>（1）第一范式1NF：关系中的所以属性值都是不可分割的原子值；<br>（2）第二范式2NF：如果关系是1NF，且每个非主属性都完全依赖于候选键；<br>（3）第三范式3NF：如果关系是1NF，且每个非主属性都不传递依赖于候选键；<br>（4）<strong>鲍依斯-科得(巴斯)范式</strong>BCNF范式：如果关系是1NF，且每个属性都不传递依赖于候选键。</p><p>BCNF意味着在关系模式中每一个决定因素都包含候选键，也就是说，只要属性或属性组A能够决定任何一个属性B，则A的子集中必须有候选键。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="C:\Users\ADMINI~1\AppData\Local\Temp\1526870129743.png" alt="52687012974" title="">                </div>                <div class="image-caption">52687012974</div>            </figure><h3 id="属性闭包"><a href="#属性闭包" class="headerlink" title="属性闭包"></a>属性闭包</h3><p>定义：闭包就是由一个属性直接或间接推导出的所有属性的集合。</p><p>表示：B的闭包用B+表示。</p><p>计算：关系R的属性集X的闭包的步骤如下： </p><ol><li>设最终将成为闭包的属性集是Y，把Y初始化为X；<br> .  检查F中的每一个函数依赖A→B，如果属性集A中所有属性均在Y中，而B中有的属性不在Y中，则将                 其加入到Y中； </li><li>重复第二步，直到没有属性可以添加到属性集Y中为止。 最后得到的Y就是X＋</li></ol><p>举例：</p><p>例1： R = {A,B,C,D,E}</p><p>​         F = {B→CD， D→E, B→A, E→C， AD→B }</p><p>​             则 B+ = B ;    B+ = BCD;  B+ = BCDA； B+ = BCDAE。（推导过程是属性依赖传递的过程。</p><p>​            所以最终B+ 包含了R中所有属性。 故<strong>B is a key for R。</strong></p><p>例2： 有关系模式R(U，F)，其中U={A，B，C，D，E，I}，F={A→D，AB→E，BI→E，CD→I，E→C}，计算(AE)闭包。 </p><p>(1) 令X={AE}，X(0)=AE</p><p>(2)在F中寻找尚未使用过的左边是AE的子集的函数依赖，结果是: A→D， E→C；所以 X(1)=X(0)DC=ACDE，     显然 X(1)≠X(0).</p><p>(3) 在F中寻找尚未使用过的左边是ACDE的子集的函数依赖， 结果是: CD→I；所以 X(2)=X(1)I=ACDEI。虽然X（2）≠X(1)，但F中寻找尚未使用过函数依赖的左边已经没有X（2）的子集，所以不必再计算下去，即(AE)+=ACDEI。</p><p>例3：f={a-&gt;b，b-&gt;c，a-&gt;d，e-&gt;f}；由a可直接得到b和d，间接得到c，则a的闭包就是{a，b，c，d}</p><h3 id="关系模式分解"><a href="#关系模式分解" class="headerlink" title="关系模式分解"></a>关系模式分解</h3><p>关系模式分解必须遵守两个准则<br>       (1)无损联接性：信息不失真（不增减信息）。<br>       (2)函数依赖保持性：不破坏属性间存在的依赖关系</p><h4 id="无损连接分解"><a href="#无损连接分解" class="headerlink" title="无损连接分解"></a>无损连接分解</h4><p>R的无损分解为X Y，那么 x∩y →x  或者 x∩y → y.   </p><p>####Dependency Preserving Decomposition 依赖保持分解</p><p> 关系模式R&lt;U,F&gt;的分解是指R为它的一组子集<br>          ρ={R1&lt;U1,F1&gt;, R2&lt;U2,F2&gt;,…, Rk&lt;Uk,Fk&gt;}所代替的过程。<br>          其中U=U1∪U2∪…∪k ,并且没有Ui≤Uj(表Ui包含于Uj，1≤i,j≤k),<br>          Fi是F在Ui上的投影，即Fi={X→Y∈F+∧XY≤Ui}(表XY包含于Ui）。</p><p>描述：R被分解为 i个关系子集 Ri。Fi为每个子集的函数依赖投影。</p><p>计算函数依赖fi保持的方法就是：Fi∪Fj 推出 fi成立，其中Fi Fj的计算从自身属性和原来函数依赖推导得来。</p><p>模式分解是独立保持的条件就是，所有函数依赖Fi的投影的并集的闭包 = F的闭包</p><p>思考： 可否是Fi的闭包的并集 = F的闭包？</p><p>回答：不可以，因为每个子集的函数依赖Fi，可能产生跨子集的函数依赖，先求Fi的闭包会产生不完整的闭包关系。</p><h4 id="BCNF分解"><a href="#BCNF分解" class="headerlink" title="BCNF分解"></a>BCNF分解</h4><p>BCNF的要求：函数依赖要么平凡，函数依赖的左侧是超键</p><p>如果X→Y违反BCNF, 分解R 为R-Y 和XY。</p><h4 id="第三范式分解"><a href="#第三范式分解" class="headerlink" title="第三范式分解"></a>第三范式分解</h4><p>第三范式的条件：</p><ol><li>平凡依赖</li><li>x 属于超键</li><li>A属于候选键</li></ol><p>部分依赖</p><p>传递依赖</p><p>最小覆盖模型— 简化函数依赖集</p><h3 id="补充知识点"><a href="#补充知识点" class="headerlink" title="补充知识点"></a>补充知识点</h3><h4 id="自然连接"><a href="#自然连接" class="headerlink" title="自然连接"></a>自然连接</h4><p>在连接运算当中，一种最常用的连接是自然连接。如果关系R与S具有相同的属性组B，且该属性组的值相等时的连接称为自然连接，结果关系的属性集合为<strong>R的属性并上S减去属性B的属性</strong>集合。</p><p>参考的文章</p><p><a href="https://www.cnblogs.com/bewolf/p/4445027.html" target="_blank" rel="noopener">函数依赖集闭包、属性集闭包、超键、候选键和最小函数依赖集</a></p><p><a href="https://www.cnblogs.com/makeupforever-carrie/p/6837325.html" target="_blank" rel="noopener">四种范式的实例</a></p><p><a href="https://blog.csdn.net/fanfan4569/article/details/53910670" target="_blank" rel="noopener">函数依赖不懂看这里</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;函数依赖&quot;&gt;&lt;a href=&quot;#函数依赖&quot; class=&quot;headerlink&quot; title=&quot;函数依赖&quot;&gt;&lt;/a&gt;函数依赖&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;X→Y，表示Y依赖于X；&lt;/li&gt;
&lt;li&gt;X→Y，且Y→X不成立，Y→Z，则X→Z，
      
    
    </summary>
    
    
      <category term="数据库理论" scheme="https://joshuaqyh.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%90%86%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>死锁问题</title>
    <link href="https://joshuaqyh.github.io/2018/07/27/%E8%AF%BB%E8%80%85%E5%86%99%E8%80%85%E9%97%AE%E9%A2%98/"/>
    <id>https://joshuaqyh.github.io/2018/07/27/读者写者问题/</id>
    <published>2018-07-27T15:28:32.721Z</published>
    <updated>2018-12-17T13:58:58.205Z</updated>
    
    <content type="html"><![CDATA[<h3 id="读者写者问题"><a href="#读者写者问题" class="headerlink" title="读者写者问题"></a>读者写者问题</h3><p>–写者对数据库有排他的访问</p><ul><li>第一读者-写者问题</li></ul><p>若有写者正在访问对象，那么其他读者需要保持等待</p><ul><li>第二读者-写者问题</li></ul><p>如果有写者等待访问对象，那么不会有新读者开始读操作</p><p>以上问题经常出现在数据库的访问读写问题之中。</p><h3 id="哲学家问题"><a href="#哲学家问题" class="headerlink" title="哲学家问题"></a>哲学家问题</h3><p>导致出现哲学家饥饿的情况。</p><h3 id="死锁的特征"><a href="#死锁的特征" class="headerlink" title="死锁的特征"></a>死锁的特征</h3><h4 id="！死锁的必要条件："><a href="#！死锁的必要条件：" class="headerlink" title="！死锁的必要条件："></a>！死锁的必要条件：</h4><ol><li>互斥</li><li>占有并等待</li><li>非抢占</li><li>循环等待</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://p8ekwajjb.bkt.clouddn.com/%E6%AD%BB%E9%94%81%E5%BF%85%E8%A6%81%E6%9D%A1%E4%BB%B6.png" alt="52643424888" title="">                </div>                <div class="image-caption">52643424888</div>            </figure><h4 id="资源分配图"><a href="#资源分配图" class="headerlink" title="资源分配图"></a>资源分配图</h4><p>节点集可分为两类：一类是系统活动进程集合（节点连接的线代表申请边，表示申请创建进程），一类是系统所有资源类型的集合（节点连接的线代表分配边，表示请求分配资源）。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://p8ekwajjb.bkt.clouddn.com/1526434313403.png" alt="52643431340" title="">                </div>                <div class="image-caption">52643431340</div>            </figure><h3 id="死锁处理方法"><a href="#死锁处理方法" class="headerlink" title="死锁处理方法"></a>死锁处理方法</h3><ul><li>使用协议预防或者避免死锁</li><li>允许系统进入死锁状态，然后检测恢复它</li><li>忽视死锁，认为死锁不可能存在。。。（unix windows多采用这种办法，，比较常用</li><li>​</li></ul><h4 id="死锁预防"><a href="#死锁预防" class="headerlink" title="死锁预防"></a>死锁预防</h4><p>只要保证死锁的四个必要条件有一个不成立，就可以起到死锁预防的效果。</p><ol><li>否定互斥条件：这仅仅适用于共享资源。非共享资源必须有互斥条件</li><li>占有并等待：两种协议</li><li>非抢占：协议：一个进程占有资源并申请另外一个无法分配的资源，那么原来的资源将会隐式释放</li><li>循环等待：对所有资源类型进行编号排序，按编号递增顺序来申请资源。</li></ol><p>死锁预防的缺点：低设备利用率和 低吞吐率</p><h4 id="死锁避免"><a href="#死锁避免" class="headerlink" title="死锁避免"></a>死锁避免</h4><p>死锁避免的方法：获得申请资源时进程的附加信息：意思是获得资源的先验信息，根据信息来判断是否分配资源或让其等待。</p><p>死锁避免的两个方法：</p><ol><li>安全状态：存在一个安全序列，给进程分配资源，使得永远不会出现死锁，系统状态就是安全的。</li><li>资源分配图：</li><li>银行家算法 ！！！</li></ol><h4 id="！！！死锁避免-银行家算法（重点）"><a href="#！！！死锁避免-银行家算法（重点）" class="headerlink" title="！！！死锁避免-银行家算法（重点）"></a>！！！死锁避免-银行家算法（重点）</h4><p>数据结构</p><ul><li>Allocation：当前进程各种资源分配的的实例数量—-  二维矩阵 — 行代表不同进程，列代表资源</li><li>Max: 当前进程各类型资源的最大需求   —————— 二维矩阵— 同1</li><li>Need: 当前资源仍需要的各种类型资源——————- 二维矩阵— 同1</li><li>Avoidable: 当前系统能再提供的资源———————-  一维数组– 列代表资源类型，只有一行</li></ul><ol><li><p>安全性算法：一个Finish[m]数组判断进程是否完成，  每满足一个进程资源请求设为Finish[i] = true, 最后检测所有Finish是否都为false, 如果不是则不安全。</p></li><li><p>资源请求算法：每个进程有一个请求向量，系统假设满足该请求，然后计算分配后的结果是否安全，不安全则不分配。</p><p><strong>两者最大缺点</strong>：无法提前预知进程对资源的最大需求。</p></li></ol><h3 id="死锁检测"><a href="#死锁检测" class="headerlink" title="死锁检测"></a>死锁检测</h3><p>系统需要提供：</p><ol><li>检测出现了死锁的算法</li><li>如何从死锁中恢复过来</li></ol><h4 id="检测算法"><a href="#检测算法" class="headerlink" title="检测算法"></a>检测算法</h4><ul><li>对于资源只有单个实例</li><li>对于资源有两个实例与银行家的安全算法不同的是最大需求矩阵变化为请求矩阵。其他基本一致 。得到一个安全序列的时候则认为系统安全。</li></ul><p>时间复杂度 O （m*n^2)</p><h4 id="恢复算法"><a href="#恢复算法" class="headerlink" title="恢复算法"></a>恢复算法</h4><p>取消死锁的方法</p><ul><li><p>终止一个或者某些进程  </p><ul><li><p>终止所有死锁进程—- 不大好</p></li><li><p>一次终止一个进程直到死锁取消。部分终止需要进程终止进程的选择，但终止完<strong>需要恢复</strong>！调度原则有：</p><ul><li><p>按优先级：优先级低的先终止</p></li><li><p>按执行时间长度：执行时间短的先终止</p></li><li><p>按进程需要的资源：需要资源多的先终止</p><p>需要注意饥饿的情况。。</p></li></ul></li></ul></li><li><p>资源抢占</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;读者写者问题&quot;&gt;&lt;a href=&quot;#读者写者问题&quot; class=&quot;headerlink&quot; title=&quot;读者写者问题&quot;&gt;&lt;/a&gt;读者写者问题&lt;/h3&gt;&lt;p&gt;–写者对数据库有排他的访问&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一读者-写者问题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;若有写
      
    
    </summary>
    
    
      <category term="操作系统" scheme="https://joshuaqyh.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>计算机组成原理课堂笔记</title>
    <link href="https://joshuaqyh.github.io/2018/07/27/%E7%AC%AC%E5%9B%9B%E7%AB%A0CPU--%E8%AE%A1%E7%BB%84%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0-01/"/>
    <id>https://joshuaqyh.github.io/2018/07/27/第四章CPU--计组课堂笔记-01/</id>
    <published>2018-07-27T15:28:32.706Z</published>
    <updated>2018-11-28T07:16:32.955Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CPU基础概念"><a href="#CPU基础概念" class="headerlink" title="CPU基础概念"></a>CPU基础概念</h2><p>CPU功能： 指令控制，操作控制，时间控制，数据加工</p><p>CPU控制方式：同步控制，异步控制，联合控制</p><p>CPU指令周期：取值时间+执行时间</p><p>CPU周期：机器周期，总线周期。</p><h2 id="CPU中断逻辑"><a href="#CPU中断逻辑" class="headerlink" title="CPU中断逻辑"></a>CPU中断逻辑</h2><h4 id="中断基础概念"><a href="#中断基础概念" class="headerlink" title="中断基础概念"></a>中断基础概念</h4><ul><li>暂停当前程序的执行，转而去执行其他程序，执行完毕之后，重新恢复中断程序的执行</li></ul><ul><li><p>中断源： 人为设置的中断，程序性事故,  硬件故障，外部事件（比如断电）</p></li><li><p>中断分类：可屏蔽中断和不可屏蔽中断；内部中断和外部中断；软中断和硬中断。</p><p>根据CPU是否可以采取响应判断来分类：可屏蔽中断，不可屏蔽中断。 电源断电，CPU不可禁止响应，另外可以根据中断源是否被屏蔽来确定是否给予响应。</p><p>​</p></li></ul><p>####中断系统需要解决的7个问题：</p><ol><li><p>中断如何向CPU提出诉求</p></li><li><p>多个中断同时发生请求，CPU如何优先处理？</p><ol><li>硬件排队</li><li>软件轮询</li></ol></li><li><p>CPU响应中断的条件，时间，方式。</p><ol><li><p>中断服务程序入口地址的查找：硬件向量法和软件查询法</p></li><li><p>中断响应的条件：中断允许触发器必须为1</p></li><li><p>中断响应时间：当前<strong>指令周期结束</strong>。（而不是指令执行结束）</p><p>（2， 3 为中断响应的充分必要条件）</p></li></ol></li><li><p>CPU响应中断后如何保护现场  </p></li><li><p>中断响应结束之后如何阻止源程序的执行转入中断服务程序的入口地址</p></li><li><p>中断处理结束后，CPU如何恢复现场</p></li><li><p>中断处理结束过程中出现了新的中断请求,CPU该如何处理</p></li></ol><p><strong>处理办法</strong> ：中断处理系统中配置响应的软件和硬件</p><h4 id="中断屏蔽技术"><a href="#中断屏蔽技术" class="headerlink" title="中断屏蔽技术"></a>中断屏蔽技术</h4><ul><li><p>实现多重中断的条件：</p><ol><li><p>提前设置开中断指令 </p></li><li><p>优先级高的中断源有权屏蔽优先级别低的中断源</p></li></ol></li><li><p>中断屏蔽的结果</p><ol><li>屏蔽触发器与屏蔽字</li><li>改变中断优先登记以及运行轨迹的变化</li></ol><p><a href="https://blog.csdn.net/Blue_Starry_sky/article/details/53994698" target="_blank" rel="noopener">中断屏蔽字的设置</a></p><p>​</p></li><li><p>多重中断的断点保护</p><ol><li><strong>中断响应轨迹图</strong></li><li>设置中断屏蔽字改变中断响应优先级</li></ol></li></ul><p>发生多重中断时中断响应逻辑类似于CPU调度中的优先级调度。</p><p>引起cpu中断的各种因素（称为中断源）</p><ul><li>人为设置的中断（访管指令）</li><li>程序性事故</li></ul><ul><li>硬件故障</li><li>I/O设备</li><li>外部事件</li></ul><p><img src="http://p8ekwajjb.bkt.clouddn.com/1526351012462.png" alt="52635101246"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;CPU基础概念&quot;&gt;&lt;a href=&quot;#CPU基础概念&quot; class=&quot;headerlink&quot; title=&quot;CPU基础概念&quot;&gt;&lt;/a&gt;CPU基础概念&lt;/h2&gt;&lt;p&gt;CPU功能： 指令控制，操作控制，时间控制，数据加工&lt;/p&gt;
&lt;p&gt;CPU控制方式：同步控制，异步控
      
    
    </summary>
    
    
      <category term="CPU" scheme="https://joshuaqyh.github.io/tags/CPU/"/>
    
      <category term="计组理论" scheme="https://joshuaqyh.github.io/tags/%E8%AE%A1%E7%BB%84%E7%90%86%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>单周期CPU设计笔记和总结</title>
    <link href="https://joshuaqyh.github.io/2018/07/27/%E5%8D%95%E5%91%A8%E6%9C%9FCPU%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0%E5%92%8C%E6%80%BB%E7%BB%93/"/>
    <id>https://joshuaqyh.github.io/2018/07/27/单周期CPU设计笔记和总结/</id>
    <published>2018-07-27T15:28:32.694Z</published>
    <updated>2018-11-28T07:15:02.647Z</updated>
    
    <content type="html"><![CDATA[<h3 id="单周期CPU设计与实现（实验"><a href="#单周期CPU设计与实现（实验" class="headerlink" title="单周期CPU设计与实现（实验)"></a>单周期CPU设计与实现（实验)</h3><p>每一个指令都在一个时钟周期内完成，称为单周期CPU。</p><hr><h3 id="单周期CPU数据通路图"><a href="#单周期CPU数据通路图" class="headerlink" title="单周期CPU数据通路图"></a>单周期CPU数据通路图</h3><p>该图描述的是CPU中数据，如何在 PC时钟，指令存储器，寄存器组，控制单元，ALU，数据存储器和控制器中如何传送的过程。</p><h4 id="MIPS指令的三种格式"><a href="#MIPS指令的三种格式" class="headerlink" title="MIPS指令的三种格式"></a>MIPS指令的三种格式</h4><ul><li><p>R类型</p></li><li><p>I类型</p></li><li><p>J类型</p></li></ul><p>算术运算指令</p><p>逻辑运算指令</p><p>移位指令</p><p>比较指令</p><p>存储器读写指令</p><p>分支指令</p><p>跳转指令</p><p>停机指令</p><p>CPU学习笔记 - 5/15</p><p>###逻辑设计</p><ul><li>组合单元— 操作单元 如门 ALU</li></ul><ul><li>状态单元— 存储单元，如存储器，寄存器</li></ul><p>注： 状态单元需要两个输入（时钟信号值和输入数据值） 一个输出（输出数据值）。</p><h3 id="建立数据通路"><a href="#建立数据通路" class="headerlink" title="建立数据通路"></a>建立数据通路</h3><p>部件认识：</p><p>PC程序计数器：存储当前指令的地址，每执行完一条指令，PC+4。（一个指令4个字节）</p><p>指令存储器：</p><p>数据存储器：</p><p>寄存器堆：</p><p>ALU:</p><p>加法器：</p><p><a href="http://www.cnblogs.com/sevenir-code/p/4887994.html" target="_blank" rel="noopener">MIPS指令特点</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;单周期CPU设计与实现（实验&quot;&gt;&lt;a href=&quot;#单周期CPU设计与实现（实验&quot; class=&quot;headerlink&quot; title=&quot;单周期CPU设计与实现（实验)&quot;&gt;&lt;/a&gt;单周期CPU设计与实现（实验)&lt;/h3&gt;&lt;p&gt;每一个指令都在一个时钟周期内完成，称为单
      
    
    </summary>
    
    
      <category term="计组实验" scheme="https://joshuaqyh.github.io/tags/%E8%AE%A1%E7%BB%84%E5%AE%9E%E9%AA%8C/"/>
    
      <category term="CPU" scheme="https://joshuaqyh.github.io/tags/CPU/"/>
    
  </entry>
  
  <entry>
    <title>Verilog 设计初步</title>
    <link href="https://joshuaqyh.github.io/2018/07/27/Verilog%E8%AE%BE%E8%AE%A1%E5%88%9D%E6%AD%A5/"/>
    <id>https://joshuaqyh.github.io/2018/07/27/Verilog设计初步/</id>
    <published>2018-07-27T15:28:32.680Z</published>
    <updated>2018-07-27T15:30:58.770Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Verilog设计初步"><a href="#Verilog设计初步" class="headerlink" title="Verilog设计初步"></a>Verilog设计初步</h1><p>##Verilog 代码模板</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语句关键字字母都为小写字母，大小写敏感</span></span><br><span class="line"><span class="comment">//硬件思维来写代码</span></span><br><span class="line"><span class="comment">//命名不能以数字开头</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> &lt;顶层模块名&gt; (输入输出端口列表) <span class="comment">//定义输入输出端口列表</span></span><br><span class="line"><span class="keyword">output</span> 输出端口列表；  <span class="comment">//输出端口生声明</span></span><br><span class="line"><span class="keyword">input</span>  输入端口列表；      <span class="comment">//输入输出端口生命 </span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*定义数据类型，功能定义，函数实现*/</span></span><br><span class="line">    <span class="keyword">reg</span>  信号名；</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//逻辑功能定义</span></span><br><span class="line"><span class="keyword">assign</span>&lt;结果信号名&gt; = &lt;表达式&gt;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//用always块描述逻辑功能</span></span><br><span class="line">    <span class="keyword">always</span> @(&lt;敏感信号&gt;)   </span><br><span class="line">        <span class="keyword">begin</span></span><br><span class="line">            <span class="comment">//过程赋值运算</span></span><br><span class="line">            <span class="comment">//语句，if else while task</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="comment">//调用其他模块</span></span><br><span class="line">    &lt;调用模块名module_name&gt;&lt;例化模块名&gt;(&lt;端口列表&gt;)；</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//门元件例化</span></span><br><span class="line">    门元件关键字&lt;例化门元件名&gt;(&lt;端口列表port_list&gt;);</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p>四位选择器</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> mux4_1(out,in0, in1, in2,in4,sel);</span><br><span class="line">    <span class="keyword">output</span> out;</span><br><span class="line">    <span class="keyword">input</span> in0,in1,in2,in3;</span><br><span class="line">    <span class="keyword">input</span>[<span class="number">1</span>:<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">reg</span> out;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">always</span> @（in0 <span class="keyword">or</span> in1 <span class="keyword">or</span> in2 <span class="keyword">or</span> in3 <span class="keyword">or</span> sel)</span><br><span class="line">        <span class="keyword">begin</span> </span><br><span class="line">            <span class="keyword">case</span>(sel)</span><br></pre></td></tr></table></figure><h2 id="数据类型及运算符"><a href="#数据类型及运算符" class="headerlink" title="数据类型及运算符"></a>数据类型及运算符</h2><ul><li>整数类型<ul><li>构成是：字符宽度+进制+数值。</li><li>例如：2’0xd5;  宽度为2的十六进制d5。</li></ul></li><li>逻辑类型<ul><li>高低电平 1 0，电路里体现为电压的区间</li><li>x：未知</li><li>z:   高阻</li></ul></li><li>net类型<ul><li>常用的是wire。用法是 wire[7:0] databus。 //databus宽度8</li></ul></li><li>寄存器类型<ul><li>reg </li><li>integer</li><li>time</li><li>real</li><li>realtime</li></ul></li><li>parameter参数 <ul><li>用来定义符号常量。 parameter sel = 8’ha3。</li></ul></li><li>向量类型</li><li>逻辑运算符</li><li>位运算符</li><li>三目运算</li><li>位拼接运算符</li></ul><p>下例采用数据流方式描述1位全加器。</p><p>在本例中，有两个连续赋值语句。这些赋值语句是并发的，与其书写的顺序无关。只要<br>连续赋值语句右端表达式中操作数的值变化(即有事件发生), 连续赋值语句即被执行。如果A<br>变化，则两个连续赋值都被计算，即同时对右端表达式求值，并将结果赋给左端目标。</p><h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><ul><li>initial</li><li>always @（敏感信号）<ul><li>@ (posedge clk) 上升沿</li><li>@ (negedge clk) 下降沿触发</li></ul></li><li>赋值语句<ul><li>连续赋值语句assign 只要连续赋值语句右端表达式中操作数的值变化, 连续赋值语句即被执行。</li><li>阻塞赋值 a = b;         ————-非时序赋值（组合）</li><li>非阻塞赋值  a&lt;=b      ————时序赋值中使用  </li><li>时序和组合在电路上的表现是时序赋值过程中需要等待时钟沿来触发。</li></ul></li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h2 id="设计特点"><a href="#设计特点" class="headerlink" title="设计特点"></a>设计特点</h2><h4 id="层次化模块化"><a href="#层次化模块化" class="headerlink" title="层次化模块化"></a>层次化模块化</h4><p>顶层模块和底层模块的设计方法，将模块细分为若干个子模块，在底层实现子模块功能，在顶层组合各个子模块。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Verilog设计初步&quot;&gt;&lt;a href=&quot;#Verilog设计初步&quot; class=&quot;headerlink&quot; title=&quot;Verilog设计初步&quot;&gt;&lt;/a&gt;Verilog设计初步&lt;/h1&gt;&lt;p&gt;##Verilog 代码模板&lt;/p&gt;
&lt;figure class=&quot;
      
    
    </summary>
    
    
      <category term="verilog 计组实验" scheme="https://joshuaqyh.github.io/tags/verilog-%E8%AE%A1%E7%BB%84%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>SQL用法总结</title>
    <link href="https://joshuaqyh.github.io/2018/07/27/SQL%20%E7%94%A8%E6%B3%95--postgresql/"/>
    <id>https://joshuaqyh.github.io/2018/07/27/SQL 用法--postgresql/</id>
    <published>2018-07-27T15:28:32.663Z</published>
    <updated>2018-12-17T13:59:20.261Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SQL-用法–postgresql"><a href="#SQL-用法–postgresql" class="headerlink" title="SQL 用法–postgresql"></a>SQL 用法–postgresql</h2><p>[TOC]</p><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p><a href="https://www.postgresql.org/docs/9.1/static/functions-geometry.html" target="_blank" rel="noopener">https://www.postgresql.org/docs/9.1/static/functions-geometry.html</a></p><p>官方链接最全。</p><h4 id="表格操作"><a href="#表格操作" class="headerlink" title="表格操作"></a>表格操作</h4><h5 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">users</span> (</span><br><span class="line">    user_id <span class="built_in">INT</span> AUTO_INCREMENT PRIMARY <span class="keyword">KEY</span>, //声明主键</span><br><span class="line">    username <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">UNIQUE</span>,  //声明非空，唯一</span><br><span class="line">    <span class="keyword">password</span> <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> </span><br><span class="line">    FOREIGN <span class="keyword">KEY</span> (user_id)  </span><br><span class="line">    <span class="keyword">REFERENCES</span> projects (user_id)</span><br><span class="line">    //声明  user_id为外键引用自表格projects</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="改表"><a href="#改表" class="headerlink" title="改表"></a>改表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name</span><br><span class="line"><span class="keyword">ADD</span> new_colum data_type column_constraint [<span class="keyword">AFTER</span> existing_column];  // 加列</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">COLUMN</span> max_limit,  //删除列</span><br><span class="line"></span><br><span class="line"><span class="keyword">MODIFY</span> fee <span class="built_in">NUMERIC</span> (<span class="number">10</span>, <span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>;  //修改列约束</span><br></pre></td></tr></table></figure><h5 id="删表"><a href="#删表" class="headerlink" title="删表"></a>删表</h5><p>TRUNCATE table_name;  // 将行清空，但表头依旧保留</p><p>DROP table table_name;  //删除整个表格</p><table><thead><tr><th></th><th><strong>PRIMARY KEY constraint</strong></th><th><strong>UNIQUE constraint</strong></th></tr></thead><tbody><tr><td>The number of constraints</td><td>One</td><td>Many</td></tr><tr><td>NULL values</td><td>Do not allow</td><td>Allow</td></tr></tbody></table><h3 id="表的连接"><a href="#表的连接" class="headerlink" title="表的连接"></a>表的连接</h3><h4 id="内连接–INNER-JOIN"><a href="#内连接–INNER-JOIN" class="headerlink" title="内连接–INNER JOIN"></a>内连接–INNER JOIN</h4><p>两个表使用内连接，通过指定一个属性来匹配，若两个表的同一属性具有相同值，则保留在连接表中，其余不相等的行则消去。</p><p>图解</p><p>使用示例（内连接也可以连接多张表格）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  A.n</span><br><span class="line"><span class="keyword">FROM</span> A</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> B <span class="keyword">ON</span> B.n = A.n;</span><br><span class="line">INNER JOIN C ON C.n = A.n;</span><br></pre></td></tr></table></figure><h4 id="全连接–FUll-OUTER-JOIN"><a href="#全连接–FUll-OUTER-JOIN" class="headerlink" title="全连接–FUll OUTER JOIN"></a>全连接–FUll OUTER JOIN</h4><p>指定连接条件，属性值相同的行保留，但不重复，属性值不同的值保留，但存在某些为Null的情况。</p><p>用法示例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_list</span><br><span class="line"><span class="keyword">FROM</span> A</span><br><span class="line"><span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> B <span class="keyword">ON</span> B.n = A.n;</span><br></pre></td></tr></table></figure><h4 id="左连接–LEFT-JOIN"><a href="#左连接–LEFT-JOIN" class="headerlink" title="左连接–LEFT JOIN"></a>左连接–LEFT JOIN</h4><p>对几个将要连接的表指定条件进行连接，属性匹配的时候，会保留左表所有属性，即便右表属性为NULL,但不会存在左表属性为NULL的情况。</p><p>代码示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    A.n</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    A</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> B <span class="keyword">ON</span> B.n = A.n;</span><br></pre></td></tr></table></figure><h4 id="右连接–RIGHT-JOIN"><a href="#右连接–RIGHT-JOIN" class="headerlink" title="右连接–RIGHT JOIN"></a>右连接–RIGHT JOIN</h4><p>和左连接相反，用法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    A.n</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    A</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> B <span class="keyword">ON</span> B.n = A.n;</span><br></pre></td></tr></table></figure><h4 id="交叉连接–CROSS-JOIN"><a href="#交叉连接–CROSS-JOIN" class="headerlink" title="交叉连接–CROSS JOIN"></a>交叉连接–CROSS JOIN</h4><p>看图就知道。。。交叉连接结果的表格是 两表行数相乘。需要指出的一点就是两个表相连不需要指定cross join。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    column_list</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    A,</span><br><span class="line">    B;</span><br></pre></td></tr></table></figure><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><blockquote><p>PostgreSQL provides several index types: B-tree, Hash, GiST and GIN. Each index type uses a different algorithm that is best suited to different types of queries. By default, the <code>CREATE INDEX</code> command creates B-tree indexes, which fit the most common situations.</p></blockquote><h4 id="创建b-tree索引"><a href="#创建b-tree索引" class="headerlink" title="创建b_tree索引"></a>创建b_tree索引</h4><p>语法： create index index_name ON table_name(column_name)</p><p>postgresql默认b树索引。官方描述如下：</p><blockquote><p>B-trees can handle equality and range queries on data that can be sorted into some ordering. In particular, the PostgreSQL query planner will consider using a B-tree index whenever an indexed column is involved in a comparison using one of these operators:</p><table><thead><tr><th><code>&lt;</code></th></tr></thead><tbody><tr><td><code>&lt;=</code></td></tr><tr><td><code>=</code></td></tr><tr><td><code>&gt;=</code></td></tr><tr><td><code>&gt;</code></td></tr></tbody></table><p>Constructs equivalent to combinations of these operators, such as </p><p>BETWEEN</p><p> and </p><p>IN</p><p>, can also be implemented with a B-tree index search. Also, an </p><p>IS NULL</p><p> or </p><p>IS NOT NULL</p><p> condition on an index column can be used with a B-tree index.</p></blockquote><p>上述说明b_tree在范围查询中比较有效，也可以用于顺序检索数据。</p><p>当查询条件为范围查询时(运算符是 &gt; &lt; &lt;= &gt;= = is null, is not null, between and ,in)，b_tree索引可以体现较为良好的性能。</p><h4 id="创建hash索引"><a href="#创建hash索引" class="headerlink" title="创建hash索引"></a>创建hash索引</h4><p>语法： create index index_name on table_name using hash(column_name)</p><p>官方描述</p><blockquote><p>Hash indexes can only handle simple equality comparisons. The query planner will consider using a hash index whenever an indexed column is involved in a comparison using the <code>=</code> operator.</p></blockquote><p>上述说明，hash索引仅仅在处理简单的<strong>等值比较</strong>-(=) 中相对有效。</p><h4 id="使用GiST索引"><a href="#使用GiST索引" class="headerlink" title="使用GiST索引"></a>使用GiST索引</h4><p>(错误）语法： create index  index_name on table_name using GiST（column_name)</p><p>官方描述</p><blockquote><p>GiST indexes are not a single kind of index, but rather an infrastructure within which many different indexing strategies can be implemented. Accordingly, the particular operators with which a GiST index can be used vary depending on the indexing strategy (the <em>operator class</em>). As an example, the standard distribution of PostgreSQL includes GiST operator classes for several two-dimensional geometric data types, which support indexed queries using these operators:</p><table><thead><tr><th><code>&lt;&lt;</code></th></tr></thead><tbody><tr><td><code>&amp;&lt;</code></td></tr><tr><td><code>&amp;&gt;</code></td></tr><tr><td><code>&gt;&gt;</code></td></tr><tr><td>`&lt;&lt;</td><td>`</td></tr><tr><td>`&amp;&lt;</td><td>`</td></tr><tr><td>`</td><td>&amp;&gt;`</td></tr><tr><td>`</td><td>&gt;&gt;`</td></tr><tr><td><code>@&gt;</code></td></tr><tr><td><code>&lt;@</code></td></tr><tr><td><code>~=</code></td></tr><tr><td><code>&amp;&amp;</code></td></tr></tbody></table></blockquote><p>上述描述可知，gist 不是单一类型的索引，实现了不同策略索引的基础结构。可以根据索引策略（运算符类）来采取不同的索引策略。</p><p>详见<a href="https://www.postgresql.org/docs/9.1/static/gist.html" target="_blank" rel="noopener">官方文档gist index</a></p><h4 id="使用GIN索引"><a href="#使用GIN索引" class="headerlink" title="使用GIN索引"></a>使用GIN索引</h4><p>gin索引能够用于优化级的最近邻查找。</p><blockquote><p>GIN indexes are inverted indexes which can handle values that contain more than one key, arrays for example. Like GiST, GIN can support many different user-defined indexing strategies and the particular operators with which a GIN index can be used vary depending on the indexing strategy. As an example, the standard distribution of PostgreSQLincludes GIN operator classes for one-dimensional arrays, which support indexed queries using these operators:</p><table><thead><tr><th><code>&lt;@</code></th></tr></thead><tbody><tr><td><code>@&gt;</code></td></tr><tr><td><code>=</code></td></tr><tr><td><code>&amp;&amp;</code></td></tr></tbody></table></blockquote><p>用法查看官方描述<a href="https://www.postgresql.org/docs/9.1/static/gin.html" target="_blank" rel="noopener">gin index</a>.</p><h3 id="分析效率-explain"><a href="#分析效率-explain" class="headerlink" title="分析效率 explain"></a>分析效率 explain</h3><p>将explain(analyze)置于语句的开始，结果将返回语句执行效率有关的数值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">explain</span> （<span class="keyword">analyze</span>） <span class="keyword">Select</span> s_name, s_address, s_nationkey </span><br><span class="line"><span class="keyword">From</span> table_a </span><br><span class="line"><span class="keyword">Where</span> s_suppkey = <span class="number">717</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> （<span class="keyword">analyze</span>） <span class="keyword">Select</span> s_name, s_address, s_nationkey </span><br><span class="line"><span class="keyword">From</span> b_tree_a </span><br><span class="line"><span class="keyword">Where</span> s_suppkey = <span class="number">717</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> （<span class="keyword">analyze</span>） <span class="keyword">Select</span> s_name, s_address, s_nationkey </span><br><span class="line"><span class="keyword">From</span> hash_a </span><br><span class="line"><span class="keyword">Where</span> s_suppkey = <span class="number">717</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line">Click To Expand Code</span><br><span class="line">PostgreSQL</span><br><span class="line">The following script creates the HR sample database structure in PostgreSQL.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> regions (</span><br><span class="line">region_id <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">region_name <span class="built_in">CHARACTER</span> <span class="built_in">VARYING</span> (<span class="number">25</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> countries (</span><br><span class="line">country_id <span class="built_in">CHARACTER</span> (<span class="number">2</span>) PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">country_name <span class="built_in">CHARACTER</span> <span class="built_in">VARYING</span> (<span class="number">40</span>),</span><br><span class="line">region_id <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">FOREIGN <span class="keyword">KEY</span> (region_id) <span class="keyword">REFERENCES</span> regions (region_id) <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span> <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">CASCADE</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> locations (</span><br><span class="line">location_id <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">street_address <span class="built_in">CHARACTER</span> <span class="built_in">VARYING</span> (<span class="number">40</span>),</span><br><span class="line">postal_code <span class="built_in">CHARACTER</span> <span class="built_in">VARYING</span> (<span class="number">12</span>),</span><br><span class="line">city <span class="built_in">CHARACTER</span> <span class="built_in">VARYING</span> (<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">state_province <span class="built_in">CHARACTER</span> <span class="built_in">VARYING</span> (<span class="number">25</span>),</span><br><span class="line">country_id <span class="built_in">CHARACTER</span> (<span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">FOREIGN <span class="keyword">KEY</span> (country_id) <span class="keyword">REFERENCES</span> countries (country_id) <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span> <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">CASCADE</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> departments (</span><br><span class="line">department_id <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">department_name <span class="built_in">CHARACTER</span> <span class="built_in">VARYING</span> (<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">location_id <span class="built_in">INTEGER</span>,</span><br><span class="line">FOREIGN <span class="keyword">KEY</span> (location_id) <span class="keyword">REFERENCES</span> locations (location_id) <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span> <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">CASCADE</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> jobs (</span><br><span class="line">job_id <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">job_title <span class="built_in">CHARACTER</span> <span class="built_in">VARYING</span> (<span class="number">35</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">min_salary <span class="built_in">NUMERIC</span> (<span class="number">8</span>, <span class="number">2</span>),</span><br><span class="line">max_salary <span class="built_in">NUMERIC</span> (<span class="number">8</span>, <span class="number">2</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employees (</span><br><span class="line">employee_id <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">first_name <span class="built_in">CHARACTER</span> <span class="built_in">VARYING</span> (<span class="number">20</span>),</span><br><span class="line">last_name <span class="built_in">CHARACTER</span> <span class="built_in">VARYING</span> (<span class="number">25</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">email <span class="built_in">CHARACTER</span> <span class="built_in">VARYING</span> (<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">phone_number <span class="built_in">CHARACTER</span> <span class="built_in">VARYING</span> (<span class="number">20</span>),</span><br><span class="line">hire_date <span class="built_in">DATE</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">job_id <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">salary <span class="built_in">NUMERIC</span> (<span class="number">8</span>, <span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">manager_id <span class="built_in">INTEGER</span>,</span><br><span class="line">department_id <span class="built_in">INTEGER</span>,</span><br><span class="line">FOREIGN <span class="keyword">KEY</span> (job_id) <span class="keyword">REFERENCES</span> jobs (job_id) <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span> <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">CASCADE</span>,</span><br><span class="line">FOREIGN <span class="keyword">KEY</span> (department_id) <span class="keyword">REFERENCES</span> departments (department_id) <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span> <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">CASCADE</span>,</span><br><span class="line">FOREIGN <span class="keyword">KEY</span> (manager_id) <span class="keyword">REFERENCES</span> employees (employee_id) <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span> <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">CASCADE</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> dependents (</span><br><span class="line">dependent_id <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">first_name <span class="built_in">CHARACTER</span> <span class="built_in">VARYING</span> (<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">last_name <span class="built_in">CHARACTER</span> <span class="built_in">VARYING</span> (<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">relationship <span class="built_in">CHARACTER</span> <span class="built_in">VARYING</span> (<span class="number">25</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">employee_id <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">FOREIGN <span class="keyword">KEY</span> (employee_id) <span class="keyword">REFERENCES</span> employees (employee_id) <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">CASCADE</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> regions (</span><br><span class="line">    region_id <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">    region_name <span class="built_in">CHARACTER</span> <span class="built_in">VARYING</span> (<span class="number">25</span>)</span><br><span class="line">);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> countries (</span><br><span class="line">    country_id <span class="built_in">CHARACTER</span> (<span class="number">2</span>) PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">    country_name <span class="built_in">CHARACTER</span> <span class="built_in">VARYING</span> (<span class="number">40</span>),</span><br><span class="line">    region_id <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    FOREIGN <span class="keyword">KEY</span> (region_id) <span class="keyword">REFERENCES</span> regions (region_id) <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span> <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">CASCADE</span></span><br><span class="line">);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> locations (</span><br><span class="line">    location_id <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">    street_address <span class="built_in">CHARACTER</span> <span class="built_in">VARYING</span> (<span class="number">40</span>),</span><br><span class="line">    postal_code <span class="built_in">CHARACTER</span> <span class="built_in">VARYING</span> (<span class="number">12</span>),</span><br><span class="line">    city <span class="built_in">CHARACTER</span> <span class="built_in">VARYING</span> (<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    state_province <span class="built_in">CHARACTER</span> <span class="built_in">VARYING</span> (<span class="number">25</span>),</span><br><span class="line">    country_id <span class="built_in">CHARACTER</span> (<span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    FOREIGN <span class="keyword">KEY</span> (country_id) <span class="keyword">REFERENCES</span> countries (country_id) <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span> <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">CASCADE</span></span><br><span class="line">);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> departments (</span><br><span class="line">    department_id <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">    department_name <span class="built_in">CHARACTER</span> <span class="built_in">VARYING</span> (<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    location_id <span class="built_in">INTEGER</span>,</span><br><span class="line">    FOREIGN <span class="keyword">KEY</span> (location_id) <span class="keyword">REFERENCES</span> locations (location_id) <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span> <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">CASCADE</span></span><br><span class="line">);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> jobs (</span><br><span class="line">    job_id <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">    job_title <span class="built_in">CHARACTER</span> <span class="built_in">VARYING</span> (<span class="number">35</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    min_salary <span class="built_in">NUMERIC</span> (<span class="number">8</span>, <span class="number">2</span>),</span><br><span class="line">    max_salary <span class="built_in">NUMERIC</span> (<span class="number">8</span>, <span class="number">2</span>)</span><br><span class="line">);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employees (</span><br><span class="line">    employee_id <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">    first_name <span class="built_in">CHARACTER</span> <span class="built_in">VARYING</span> (<span class="number">20</span>),</span><br><span class="line">    last_name <span class="built_in">CHARACTER</span> <span class="built_in">VARYING</span> (<span class="number">25</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    email <span class="built_in">CHARACTER</span> <span class="built_in">VARYING</span> (<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    phone_number <span class="built_in">CHARACTER</span> <span class="built_in">VARYING</span> (<span class="number">20</span>),</span><br><span class="line">    hire_date <span class="built_in">DATE</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    job_id <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    salary <span class="built_in">NUMERIC</span> (<span class="number">8</span>, <span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    manager_id <span class="built_in">INTEGER</span>,</span><br><span class="line">    department_id <span class="built_in">INTEGER</span>,</span><br><span class="line">    FOREIGN <span class="keyword">KEY</span> (job_id) <span class="keyword">REFERENCES</span> jobs (job_id) <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span> <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">CASCADE</span>,</span><br><span class="line">    FOREIGN <span class="keyword">KEY</span> (department_id) <span class="keyword">REFERENCES</span> departments (department_id) <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span> <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">CASCADE</span>,</span><br><span class="line">    FOREIGN <span class="keyword">KEY</span> (manager_id) <span class="keyword">REFERENCES</span> employees (employee_id) <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span> <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">CASCADE</span></span><br><span class="line">);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> dependents (</span><br><span class="line">    dependent_id <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">    first_name <span class="built_in">CHARACTER</span> <span class="built_in">VARYING</span> (<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    last_name <span class="built_in">CHARACTER</span> <span class="built_in">VARYING</span> (<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    relationship <span class="built_in">CHARACTER</span> <span class="built_in">VARYING</span> (<span class="number">25</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    employee_id <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    FOREIGN <span class="keyword">KEY</span> (employee_id) <span class="keyword">REFERENCES</span> employees (employee_id) <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">CASCADE</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;SQL-用法–postgresql&quot;&gt;&lt;a href=&quot;#SQL-用法–postgresql&quot; class=&quot;headerlink&quot; title=&quot;SQL 用法–postgresql&quot;&gt;&lt;/a&gt;SQL 用法–postgresql&lt;/h2&gt;&lt;p&gt;[TOC]&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="postgresql" scheme="https://joshuaqyh.github.io/tags/postgresql/"/>
    
  </entry>
  
  <entry>
    <title>cocos2d学习丨坑和解决办法</title>
    <link href="https://joshuaqyh.github.io/2018/07/27/Q&amp;A_cocos2d/"/>
    <id>https://joshuaqyh.github.io/2018/07/27/Q&amp;A_cocos2d/</id>
    <published>2018-07-27T15:28:32.642Z</published>
    <updated>2018-07-27T15:30:02.216Z</updated>
    
    <content type="html"><![CDATA[<h3 id="cocos2d-使用遇到的问题和解决办法"><a href="#cocos2d-使用遇到的问题和解决办法" class="headerlink" title="cocos2d 使用遇到的问题和解决办法"></a>cocos2d 使用遇到的问题和解决办法</h3><p>[TOC]</p><h4 id="Q-1：-如何解决中文乱码？"><a href="#Q-1：-如何解决中文乱码？" class="headerlink" title="Q 1： 如何解决中文乱码？"></a>Q 1： 如何解决中文乱码？</h4><p>A1: 直接看正确的示例代码，杂七杂八的代码太多，跟上版本的是下面这个</p><p>xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>HelloWorldStringkey&gt;  </span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>你好，世界string&gt;  </span><br><span class="line">dict&gt;</span><br></pre></td></tr></table></figure><p>解析xml文件的代码。需要注意按键值获取中文内容保存为char*指针后，用于创建的label类是CCLabelTTF，而不是Label.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用CCDictionary来读取xml    </span></span><br><span class="line">   CCDictionary *strings = CCDictionary::createWithContentsOfFile(<span class="string">"strings.xml"</span>);<span class="comment">//载入资源文件夹的strings.xml  </span></span><br><span class="line">   <span class="comment">//读取HelloWorld键中的值objectForKey根据key，获取对应的string    </span></span><br><span class="line">   <span class="keyword">const</span> <span class="keyword">char</span> *HelloWorld = ((CCString*)strings-&gt;objectForKey(<span class="string">"HelloWorldString"</span>))-&gt;m_sString.c_str();   </span><br><span class="line"> </span><br><span class="line">   <span class="comment">//获取屏幕的尺寸、位置信息等        </span></span><br><span class="line">   CCSize visibleSize = CCDirector::sharedDirector()-&gt;getVisibleSize();   </span><br><span class="line"> </span><br><span class="line">   <span class="comment">//乱码文字  </span></span><br><span class="line">   CCLabelTTF *label0 = CCLabelTTF::create(<span class="string">"你好，世界"</span>,<span class="string">"arial"</span>,<span class="number">72</span>);  </span><br><span class="line">   label0-&gt;setPosition(ccp(visibleSize.width/<span class="number">2</span>,<span class="number">2</span>*visibleSize.height/<span class="number">3</span>));  </span><br><span class="line">   <span class="keyword">this</span>-&gt;addChild(label0);  </span><br><span class="line"> </span><br><span class="line">   <span class="comment">//正常中文  </span></span><br><span class="line">   CCLabelTTF *label1 = CCLabelTTF::create(HelloWorld,<span class="string">"arial"</span>,<span class="number">72</span>);  </span><br><span class="line">   label1-&gt;setPosition(ccp(visibleSize.width/<span class="number">2</span>,visibleSize.height/<span class="number">3</span>));  </span><br><span class="line">   <span class="keyword">this</span>-&gt;addChild(label1);</span><br></pre></td></tr></table></figure><h4 id="Q2：xml文件资源（字体-图片等等）的放置的正确位置？"><a href="#Q2：xml文件资源（字体-图片等等）的放置的正确位置？" class="headerlink" title="Q2：xml文件资源（字体,图片等等）的放置的正确位置？"></a>Q2：xml文件资源（字体,图片等等）的放置的正确位置？</h4><p>A2：xml文件需要放在整个顶级项目文件里头的resources文件夹，而不是放在win32项目的resource…..坑。。具体可以看初始代码引用字体文件的路径。</p><h4 id="Q3：-一开始打开项目文件发现文件不可用或者项目文件被卸载？"><a href="#Q3：-一开始打开项目文件发现文件不可用或者项目文件被卸载？" class="headerlink" title="Q3： 一开始打开项目文件发现文件不可用或者项目文件被卸载？"></a>Q3： 一开始打开项目文件发现文件不可用或者项目文件被卸载？</h4><p>A3：文件路径被改变，重新解压cocos安装包，重新安装。并且存放路径不能出现中文。</p><h4 id="Q4-编译时出现-libbox-lib不是有效的win32程序？"><a href="#Q4-编译时出现-libbox-lib不是有效的win32程序？" class="headerlink" title="Q4:  编译时出现 libbox.lib不是有效的win32程序？"></a>Q4:  编译时出现 libbox.lib不是有效的win32程序？</h4><p>A4：需要将hellococos项目设置为启动项。</p><h4 id="Q5：当出现许多-h-文件不可用的时候？"><a href="#Q5：当出现许多-h-文件不可用的时候？" class="headerlink" title="Q5：当出现许多.h 文件不可用的时候？"></a>Q5：当出现许多.h 文件不可用的时候？</h4><p>A5：重定解决方案目标</p><h4 id="Q6-本地坐标系和世界坐标系如何互换计算"><a href="#Q6-本地坐标系和世界坐标系如何互换计算" class="headerlink" title="Q6:本地坐标系和世界坐标系如何互换计算"></a>Q6:本地坐标系和世界坐标系如何互换计算</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CCPoint p1 = sprite2-&gt;convertToNodeSpace(sprite1-&gt;getPosition());</span><br><span class="line">CCPoint p2 = sprite2-&gt;convertToWorldSpace(sprite1-&gt;getPosition());</span><br><span class="line">CCPoint p3 = sprite2-&gt;convertToNodeSpaceAR(sprite1-&gt;getPosition());</span><br><span class="line">CCPoint p4 = sprite2-&gt;convertToWorldSpaceAR(sprite1-&gt;getPosition());</span><br></pre></td></tr></table></figure><p>计算方法都是用sprite1的坐标去加减sprite2的坐标，针对本地坐标系就用减法，针对世界坐标系就用加法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;cocos2d-使用遇到的问题和解决办法&quot;&gt;&lt;a href=&quot;#cocos2d-使用遇到的问题和解决办法&quot; class=&quot;headerlink&quot; title=&quot;cocos2d 使用遇到的问题和解决办法&quot;&gt;&lt;/a&gt;cocos2d 使用遇到的问题和解决办法&lt;/h3&gt;&lt;
      
    
    </summary>
    
    
      <category term="cocos2d" scheme="https://joshuaqyh.github.io/tags/cocos2d/"/>
    
  </entry>
  
  <entry>
    <title>ant,junit,vim,java</title>
    <link href="https://joshuaqyh.github.io/2018/07/27/Leanring_report-ant-junit-vim-java/"/>
    <id>https://joshuaqyh.github.io/2018/07/27/Leanring_report-ant-junit-vim-java/</id>
    <published>2018-07-27T15:28:32.625Z</published>
    <updated>2018-11-28T07:14:40.430Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vim简介"><a href="#Vim简介" class="headerlink" title="Vim简介"></a>Vim简介</h2><p>Vim是一款上古编辑器，被广大程序员成为编辑器之神，这与之强大的编辑功能和编辑效率是分不开的。和Emace一样都在代码行业享有盛誉。vim最为重要的一点就是一切操作几乎可以舍弃鼠标，熟悉了vim命令的话，光靠键盘指令可以使开发效率迅速提高。</p><h2 id="Vim的安装"><a href="#Vim的安装" class="headerlink" title="Vim的安装"></a>Vim的安装</h2><h3 id="Linux下"><a href="#Linux下" class="headerlink" title="Linux下"></a>Linux下</h3><p>在Ubuntu平台下控制台敲入下列指令即可自动安装。</p><blockquote><p>sudo apt-get install vim</p></blockquote><h3 id="Windows下"><a href="#Windows下" class="headerlink" title="Windows下"></a>Windows下</h3><p>去<a href="http://www.vim.org/" target="_blank" rel="noopener">官网</a> 直接下载使用。</p><h2 id="Vim常用指令和教程"><a href="#Vim常用指令和教程" class="headerlink" title="Vim常用指令和教程"></a>Vim常用指令和教程</h2><p>首先值得注意的一点就是其实vim是自带教程的Vimtutor,s使用方法是linux下输入命令<strong>vimtutor</strong>,即可开启教程，这属于官方教程，  最为详细，没有之一。</p><p>在这里介绍一些常用的vim命令，有利于快速上手vim。</p><h4 id="1-创建或打开文件-vim-filename"><a href="#1-创建或打开文件-vim-filename" class="headerlink" title="1. 创建或打开文件 vim filename"></a>1. 创建或打开文件 <code>vim filename</code></h4><blockquote><p>vim helloworld.java</p></blockquote><h4 id="2-添加内容"><a href="#2-添加内容" class="headerlink" title="2.添加内容"></a>2.添加内容</h4><p>一开始进入处于<strong>正常模式</strong>在编辑窗口直接输入<code>i,a,o</code>等字符可以进入<strong>输入模式</strong>，可以在屏幕下方看到<em>insert</em>单词。按左上角<code>Esc</code>键可以回到正常模式，使用各种方便的指令。以下指令均在<strong>正常模式</strong>下进行。</p><h4 id="3-删除内容"><a href="#3-删除内容" class="headerlink" title="3.删除内容"></a>3.删除内容</h4><p><code>dd</code>可以删除光标所在的一整行。</p><p><code>ndd</code>可以删除光标以下的n行</p><h4 id="4-复制内容"><a href="#4-复制内容" class="headerlink" title="4. 复制内容"></a>4. 复制内容</h4><p><code>yy</code>可以复制光标所在行的字符<br><code>nyy</code>可以复制光标以下的n行字符</p><h4 id="5-粘贴内容"><a href="#5-粘贴内容" class="headerlink" title="5.粘贴内容"></a>5.粘贴内容</h4><p><code>p/P</code>作用时粘贴字符，小写p将已复制的字符粘贴到光标以下，大写P将字符粘贴到光标以上。</p><h4 id="6-撤销内容"><a href="#6-撤销内容" class="headerlink" title="6. 撤销内容"></a>6. 撤销内容</h4><p>撤销指令使用<code>u</code>,类似于windows上的<code>ctrl z`</code>。</p><h4 id="7-保存文件"><a href="#7-保存文件" class="headerlink" title="7. 保存文件"></a>7. 保存文件</h4><p>先进入正常模式<code>Esc</code>，然后输入<code>:</code>。然后输入：</p><ul><li><code>q</code> 离开vim</li><li><code>w</code> 保存内容</li><li><code>wq</code> 保存内容并离开vim,回到命令行</li></ul><p>其他还有许多可以提高效率的指令在这里就不多赘述啦。</p><hr><p>​            </p><h1 id="Java知识入门"><a href="#Java知识入门" class="headerlink" title="Java知识入门"></a>Java知识入门</h1><p>###初探java</p><p>从hello world入门, 初步体会java这一门面向对象编程语言。在HelloWorld.java文件中键入以下代码。（注意文件名称必须和<strong>类名</strong>一致）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中用到的编译指令是</p><blockquote><p>javac HelloWorld.java</p></blockquote><p>命令行没有弹出其他消息，即为编译成功。</p><p>执行指令是</p><blockquote><p>java HelloWorld</p></blockquote><p>这里用到两个重要指令<code>javac</code> <code>java</code> ，分别是编译和执行指令。</p><p>###基础知识</p><p>由于已经学习过C++，java语言在一定程度上和C++是类似的，所以在Java入门学习上可以直接跳过基础语法，对象和类，基本数据类型，运算符，循环结构，分支结构。</p><h3 id="Java面向对象"><a href="#Java面向对象" class="headerlink" title="Java面向对象"></a>Java面向对象</h3><h3 id="java继承"><a href="#java继承" class="headerlink" title="java继承"></a>java继承</h3><p>java继承的概念和C++类似，同样是定义一个父类，然后定义一个子类，来继承父类的属性，和C++不同的是，java用关键字<code>extends</code> 来表示继承关系。继承格式是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 父类  </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> 子类 <span class="keyword">extends</span> 父类 </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>####继承的特性</p><ul><li><p>子类拥有父类非private的属性，方法。</p></li><li><p>子类可以拥有自己的属性和方法，即子类可以对父类进行扩展。</p></li><li><p>子类可以用自己的方式实现父类的方法。</p></li><li><p>Java的继承是单继承，但是可以多重继承，单继承就是一个子类只能继承一个父类，多重继承就是，例如A类继承B类，B类继承C类，所以按照关系就是C类是B类的父类，B类是A类的父类，这是java继承区别于C++继承的一个特性。</p></li><li><p>提高了类之间的耦合性（继承的缺点，耦合度高就会造成代码之间的联系）。</p><p>​</p></li></ul><p>####继承的关键字</p><table><thead><tr><th style="text-align:center">关键字</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">extends</td><td style="text-align:center">单一继承</td></tr><tr><td style="text-align:center">implements</td><td style="text-align:center">继承多个父类</td></tr><tr><td style="text-align:center">super</td><td style="text-align:center">实现对父类父类成员的访问，引用父类</td></tr><tr><td style="text-align:center">this</td><td style="text-align:center">指向自己的引用</td></tr><tr><td style="text-align:center">final</td><td style="text-align:center">将自身定义为不可继承的类</td></tr></tbody></table><h3 id="java重写和重载"><a href="#java重写和重载" class="headerlink" title="java重写和重载"></a>java重写和重载</h3><h4 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h4><p>#####重写含义</p><p>重写是子类对父类的允许访问的方法的实现过程进行重新编写, <strong>返回值和形参</strong>都不能改变。<strong>即外壳不变，核心重写！</strong>重写的好处在于子类可以根据需要，定义特定于自己的行为。 也就是说子类能够根据需要实现父类的方法。。</p><h5 id="重写方法的原则"><a href="#重写方法的原则" class="headerlink" title="重写方法的原则"></a>重写方法的原则</h5><ul><li>参数列表必须完全与被重写方法的相同；</li><li>返回类型必须完全与被重写方法的返回类型相同；</li><li>访问权限不能比父类中被重写的方法的访问权限更低。例如：如果父类的一个方法被声明为public，那么在子类中重写该方法就不能声明为protected。</li><li>父类的成员方法只能被它的子类重写。</li><li>声明为final的方法不能被重写。</li><li>声明为static的方法不能被重写，但是能够被再次声明。</li><li>子类和父类在同一个包中，那么子类可以重写父类所有方法，除了声明为private和final的方法。</li><li>子类和父类不在同一个包中，那么子类只能够重写父类的声明为public和protected的非final方法。</li></ul><h5 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"动物可以移动"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">super</span>.move(); <span class="comment">// 应用super类的方法</span></span><br><span class="line">      System.out.println(<span class="string">"狗可以跑和走"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDog</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">      Animal b = <span class="keyword">new</span> Dog(); <span class="comment">// Dog 对象</span></span><br><span class="line">      b.move(); <span class="comment">//执行 Dog类的方法</span></span><br><span class="line"> </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行的结果是</p><blockquote><p>狗可以跑和走</p></blockquote><p>可以看到在Dog类中重写了move()方法，传入的参数和返回类型和原来父类的方法一致，但内部代码可以修改。</p><p>####重载</p><p>#####重载含义</p><p>重载(overloading) 是在一个类里面，方法名字相同，而参数不同。返回类型可以相同也可以不同。</p><p>每个重载的方法（或者构造函数）都必须有一个独一无二的参数类型列表。</p><h5 id="重载的规则"><a href="#重载的规则" class="headerlink" title="重载的规则"></a>重载的规则</h5><ul><li>被重载的方法必须改变参数列表(参数个数或类型或顺序不一样)；</li><li>被重载的方法可以改变返回类型；</li><li>被重载的方法可以改变访问修饰符；</li><li>被重载的方法可以声明新的或更广的检查异常；</li><li>方法能够在同一个类中或者在一个子类中被重载。</li><li>无法以返回值类型作为重载函数的区分标准。</li></ul><h5 id="代码实例-1"><a href="#代码实例-1" class="headerlink" title="代码实例"></a>代码实例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Overloading</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"test1"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"test2"</span>);</span><br><span class="line">    &#125;   </span><br><span class="line"> </span><br><span class="line">    <span class="comment">//以下两个参数类型顺序不同</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(<span class="keyword">int</span> a,String s)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"test3"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"returntest3"</span>;</span><br><span class="line">    &#125;   </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(String s,<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"test4"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"returntest4"</span>;</span><br><span class="line">    &#125;   </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Overloading o = <span class="keyword">new</span> Overloading();</span><br><span class="line">        System.out.println(o.test());</span><br><span class="line">        o.test(<span class="number">1</span>);</span><br><span class="line">        System.out.println(o.test(<span class="number">1</span>,<span class="string">"test3"</span>));</span><br><span class="line">        System.out.println(o.test(<span class="string">"test4"</span>,<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果是</p><blockquote><p>test1</p><p>test2</p><p>test3</p><p>test4</p></blockquote><p>从运行结果看，调用的传参不同的函数顺序执行。</p><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><p>多态就是对象多种表现形式的体现。</p><p>#####多态存在的三个必要条件</p><ul><li>继承</li><li>重写</li><li>父类引用指向子类对象</li></ul><p>这里提供一份代码以便理解。大意就是一个抽象父类声明但不定义一个方法，在其他子类中可以重写这个方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"吃鱼"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"抓老鼠"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"吃骨头"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"看家"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###java组件部分设计</p><h3 id="Swing"><a href="#Swing" class="headerlink" title="Swing"></a>Swing</h3><p>在本次实训实验中利用了Swing这个java的<strong>GUI工具包</strong>，以实现一个简单的计算器。其中的主要用途是引用这些包的相关控件，控件的相关接口，同时给这些控件注册事件，建立事件处理逻辑。</p><p>介绍控件，首先应提到<strong>JComponet</strong> 。</p><p><strong>JComponent</strong></p><p>Swing 的整个可视组件库的基础构造块是 JComponent。它是所有组件的父类。它是一个<strong>抽象类</strong>，所以不能创建 JComponent，但是作为类层次结构的结果，从字面意义来说它包含了数百个函数，Swing 中的每个组件都可以使用这些函数。</p><p>注意： 每一个控件都是一个类，具有许多接口函数，在eclipes这个IDE上可以轻松获取。使用方法：鼠标移动到某一个控件类名，按ctrl键点击类名，即可弹出这个控件类里头详细的函数定义。</p><h4 id="常用的控件集合"><a href="#常用的控件集合" class="headerlink" title="常用的控件集合"></a>常用的控件集合</h4><table><thead><tr><th>控件</th><th>用途</th></tr></thead><tbody><tr><td>JLabel</td><td>用作文本描述</td></tr><tr><td>JButton</td><td>按钮</td></tr><tr><td>JFrame</td><td>窗口</td></tr><tr><td>JPanel</td><td>控件容器</td></tr><tr><td>JTextField</td><td>文本输入框</td></tr><tr><td>JCheckBox</td><td>确认框</td></tr><tr><td>GridLayout</td><td>生成网格状的布局</td></tr></tbody></table><p><em>Tips: 任何一个控件都有Add()的方法，意味着每一个控件都可以添加到另外一个控件里。</em></p><h4 id="注册事件的方法"><a href="#注册事件的方法" class="headerlink" title="注册事件的方法"></a>注册事件的方法</h4><p>以下以button为例，进行两种常用方式的注册。</p><h5 id="方法1-匿名内部类实现"><a href="#方法1-匿名内部类实现" class="headerlink" title="方法1 匿名内部类实现"></a>方法1 匿名内部类实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">button.addActionListener(  </span><br><span class="line">        <span class="keyword">new</span> ActionListener()&#123;  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;  </span><br><span class="line">                 System.out.println(<span class="string">"你按了按钮一"</span>);  </span><br><span class="line">             &#125;  </span><br><span class="line"> &#125;);   <span class="comment">//调用监听函数并定义监听事件</span></span><br></pre></td></tr></table></figure><h5 id="方法2-利用一般内部类实现"><a href="#方法2-利用一般内部类实现" class="headerlink" title="方法2 利用一般内部类实现"></a>方法2 利用一般内部类实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">button.addActionListener(<span class="keyword">new</span> Button2ActionListener()); </span><br><span class="line">     </span><br><span class="line"> <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Button1ActionListener</span> <span class="keyword">implements</span> <span class="title">ActionListener</span></span>&#123;  </span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;  </span><br><span class="line">           System.out.println(<span class="string">"你按了按钮一"</span>);     </span><br><span class="line">     &#125;     </span><br><span class="line"> &#125;  <span class="comment">//将事件处理为一个类事件</span></span><br></pre></td></tr></table></figure><p>用了以上的基础知识就可以解决一个简单计算器的实现啦。</p><h1 id="Junit-学习和使用"><a href="#Junit-学习和使用" class="headerlink" title="Junit 学习和使用"></a>Junit 学习和使用</h1><p>###Junit是什么</p><p>JUnit是用于编写和运行可重复的自动化测试的开源测试框架， 这样可以保证我们的代码按预期工作。JUnit可广泛用于工业和作为支架(从命令行)或IDE(如Eclipse)内单独的Java程序。</p><p><strong>JUnit提供：</strong></p><ul><li>断言测试预期结果。</li><li>测试功能共享通用的测试数据。</li><li>测试套件轻松地组织和运行测试。</li><li>图形和文本测试运行。</li></ul><p><strong>JUnit用于测试：</strong></p><ul><li><p>整个对象</p></li><li><p>对象的一部分 - 交互的方法或一些方法</p></li><li><p>几个对象之间的互动(交互)</p><p>​</p></li></ul><p>###JUnit的特点</p><ul><li>JUnit是用于编写和运行测试的开源框架。</li><li>提供了注释，以确定测试方法。</li><li>提供断言测试预期结果。</li><li>提供了测试运行的运行测试。</li><li>JUnit测试让您可以更快地编写代码，提高质量</li><li>JUnit是优雅简洁。它是不那么复杂以及不需要花费太多的时间。</li><li>JUnit测试可以自动运行，检查自己的结果，并提供即时反馈。没有必要通过测试结果报告来手动梳理。</li><li>JUnit测试可以组织成测试套件包含测试案例，甚至其他测试套件。</li><li>Junit显示测试进度的，如果测试是没有问题条形是绿色的，测试失败则会变成红色。</li></ul><table><thead><tr><th><strong>注解</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>@Test</strong>public void method()</td><td>测试注释指示该公共无效方法它所附着可以作为一个测试用例。</td></tr><tr><td><strong>@Before</strong>public void method()</td><td>Before注释表示，该方法必须在类中的每个测试之前执行，以便执行测试某些必要的先决条件。</td></tr><tr><td><strong>@BeforeClass</strong>public static void method()</td><td>BeforeClass注释指出这是附着在静态方法必须执行一次并在类的所有测试之前。发生这种情况时一般是测试计算共享配置方法(如连接到数据库)。</td></tr><tr><td><strong>@After</strong>public void method()</td><td>After 注释指示，该方法在执行每项测试后执行(如执行每一个测试后重置某些变量，删除临时变量等)</td></tr><tr><td><strong>@AfterClass</strong>public static void method()</td><td>当需要执行所有的测试在JUnit测试用例类后执行，AfterClass注解可以使用以清理建立方法，(从数据库如断开连接)。注意：附有此批注(类似于BeforeClass)的方法必须定义为静态。</td></tr><tr><td><strong>@Ignore</strong>public static void method()</td><td>当想暂时禁用特定的测试执行可以使用忽略注释。每个被注解为@Ignore的方法将不被执行。</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Vim简介&quot;&gt;&lt;a href=&quot;#Vim简介&quot; class=&quot;headerlink&quot; title=&quot;Vim简介&quot;&gt;&lt;/a&gt;Vim简介&lt;/h2&gt;&lt;p&gt;Vim是一款上古编辑器，被广大程序员成为编辑器之神，这与之强大的编辑功能和编辑效率是分不开的。和Emace一样都在代
      
    
    </summary>
    
    
      <category term="vim" scheme="https://joshuaqyh.github.io/tags/vim/"/>
    
      <category term="java" scheme="https://joshuaqyh.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>git学习</title>
    <link href="https://joshuaqyh.github.io/2018/07/27/git%E5%AD%A6%E4%B9%A0/"/>
    <id>https://joshuaqyh.github.io/2018/07/27/git学习/</id>
    <published>2018-07-27T15:28:32.596Z</published>
    <updated>2018-07-27T15:29:24.293Z</updated>
    
    <content type="html"><![CDATA[<h3 id="从本地添加项目到github仓库"><a href="#从本地添加项目到github仓库" class="headerlink" title="从本地添加项目到github仓库"></a>从本地添加项目到github仓库</h3><p>在git bash 命令行下进行：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir project    <span class="comment">//本地新建一个仓库，项目文件夹</span></span><br><span class="line">$ cd project       <span class="comment">// 进入文件夹</span></span><br><span class="line">$ git init         <span class="comment">// 初始化</span></span><br><span class="line">$ git remote add origin git<span class="meta">@github</span>.<span class="string">com:</span>username<span class="regexp">/RepoName.git /</span>/ 添加远程地址,换用户名和仓库名</span><br><span class="line">$ cat .git<span class="regexp">/config    /</span>/查看配置文件是否添加远程地址成功</span><br><span class="line">$ git add -A         <span class="comment">// 上传本地项目</span></span><br><span class="line">$ git commit -m  <span class="string">"first commit"</span>    <span class="comment">//项目注释</span></span><br><span class="line">$ git push origin master    <span class="comment">// 上传仓库初始代码</span></span><br><span class="line">$ git status    <span class="comment">//查看提交情况，这一行出现在commit之前</span></span><br></pre></td></tr></table></figure><h3 id="git基础命令"><a href="#git基础命令" class="headerlink" title="git基础命令"></a>git基础命令</h3><ul><li>git staus  ————————————————————————- 进入仓库，查看仓库文件状态</li><li>git diff  + filename ———————————————————— 查看文件与上一次提交时的不同</li><li>git add + filename    ||  git commit -m “注释”   ———————提交到库   —此处相当于代码存档</li><li>git log ——————————————————————————查看存档历史</li><li>git reset –hard HEAD^   ———————————————— —-一个^ 表示回退几次; HEA~100 回退一百次</li><li>git reset –hard  版本id   —————————————————–回溯版本id</li><li>git reflog         ——————————————————————– 查看历史指令，可以看到之前的版本id </li><li>git checkout – filename —————————————————— 舍弃上一次更改</li><li>git pull  —————————————————————————— 更新内容</li></ul><h4 id="暂存区概念"><a href="#暂存区概念" class="headerlink" title="暂存区概念"></a>暂存区概念</h4><p>前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：</p><p>第一步是用<code>git add</code>把文件添加进去，实际上就是把文件修改添加到暂存区；</p><p>第二步是用<code>git commit</code>提交更改，实际上就是把暂存区的所有内容提交到当前分支。</p><p>因为我们创建Git版本库时，Git自动为我们创建了唯一一个<code>master</code>分支，所以，现在，<code>git commit</code>就是往<code>master</code>分支上提交更改。</p><p>你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。</p><hr><p><strong>多次修改的版本 可以多次add 保留到暂存区之后，一次性commit提交到版本库。</strong></p><h3 id="分支命令"><a href="#分支命令" class="headerlink" title="分支命令"></a>分支命令</h3><p>查看分支：<code>git branch</code></p><p>创建分支：<code>git branch &lt;name&gt;</code></p><p>切换分支：<code>git checkout &lt;name&gt;</code></p><p>创建+切换分支：<code>git checkout -b &lt;name&gt;</code></p><p>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></p><p>删除分支：<code>git branch -d &lt;name&gt;</code></p><p>提交分支： <code>git push origin branchname</code>    // orgin 相当于仓库， 意思为提交到仓库的某一分支</p><h3 id="git-协同"><a href="#git-协同" class="headerlink" title="git 协同"></a>git 协同</h3><p>多人协作的工作模式通常是这样：</p><ol><li>首先，可以试图用<code>git push origin &lt;branch-name&gt;</code>推送自己的修改；</li><li>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</li><li>如果合并有冲突，则解决冲突，并在本地提交；</li><li>没有冲突或者解决掉冲突后，再用<code>git push origin &lt;branch-name&gt;</code>推送就能成功！</li></ol><p>如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</code>。</p><p>这就是多人协作的工作模式，一旦熟悉了，就非常简单。</p><ul><li><p>查看远程库信息，使用<code>git remote -v</code>；</p></li><li><p>本地新建的分支如果不推送到远程，对其他人就是不可见的；</p></li><li><p>从本地推送分支，使用<code>git push origin branch-name</code>，如果推送失败，先用<code>git pull</code>抓取远程的新提交；</p></li><li><p>在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；</p></li><li><p>建立本地分支和远程分支的关联，使用<code>git branch --set-upstream branch-name origin/branch-name</code>；</p></li><li><p>从远程抓取分支，使用<code>git pull</code>，如果有冲突，要先处理冲突。  </p><p>​</p><p>​</p></li></ul><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><p>敲命令<code>git tag &lt;name&gt;</code>就可以打一个新标签：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag v1.0</span><br></pre></td></tr></table></figure><p>可以用命令<code>git tag</code>查看所有标签：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git tag</span><br><span class="line">v1.0</span><br></pre></td></tr></table></figure><p>因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。</p><p>如果要推送某个标签到远程，使用命令<code>git push origin &lt;tagname&gt;</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin v1.0</span><br><span class="line">Total 0 (delta 0), reused 0 (delta 0)</span><br><span class="line">To github.com:michaelliao/learngit.git</span><br><span class="line"> * [new tag]         v1.0 -&gt; v1.0</span><br></pre></td></tr></table></figure><p>或者，一次性推送全部尚未推送到远程的本地标签：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin --tags</span><br><span class="line">Total 0 (delta 0), reused 0 (delta 0)</span><br><span class="line">To github.com:michaelliao/learngit.git</span><br><span class="line"> * [new tag]         v0.9 -&gt; v0.9</span><br></pre></td></tr></table></figure><p>如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -d v0.9</span><br><span class="line">Deleted tag &apos;v0.9&apos; (was f52c633)</span><br></pre></td></tr></table></figure><p>然后，从远程删除。删除命令也是push，但是格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin :refs/tags/v0.9</span><br><span class="line">To github.com:michaelliao/learngit.git</span><br><span class="line"> - [deleted]         v0.9</span><br></pre></td></tr></table></figure><h3 id="一些git学习链接"><a href="#一些git学习链接" class="headerlink" title="一些git学习链接"></a>一些git学习链接</h3><p><a href="https://gist.github.com/" target="_blank" rel="noopener">git 代码分享</a></p><p><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">廖雪峰git教程</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;从本地添加项目到github仓库&quot;&gt;&lt;a href=&quot;#从本地添加项目到github仓库&quot; class=&quot;headerlink&quot; title=&quot;从本地添加项目到github仓库&quot;&gt;&lt;/a&gt;从本地添加项目到github仓库&lt;/h3&gt;&lt;p&gt;在git bash 命令行下
      
    
    </summary>
    
    
      <category term="git" scheme="https://joshuaqyh.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>操作系统第五章之CPU调度算法（重点）</title>
    <link href="https://joshuaqyh.github.io/2018/07/27/CPU%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/"/>
    <id>https://joshuaqyh.github.io/2018/07/27/CPU调度算法/</id>
    <published>2018-07-27T15:28:32.558Z</published>
    <updated>2018-07-27T15:29:10.161Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CPU调度算法"><a href="#CPU调度算法" class="headerlink" title="CPU调度算法"></a>CPU调度算法</h2><ul><li><p>先到先服务 fcfs    – CPU请求次序</p><ul><li>缺点：FCFS 算法对于分时系统(每个用户需要定<br>时地得到一定的CPU 时间)是特别麻烦的。允许一个进程保持CPU 时间过长将是个严重<br>错误。</li></ul></li><li><p>最短作业优先sjf  – 平均等待时间最短 | 最优</p></li><li><ul><li><p>存在抢占和非抢占</p></li><li><p>抢占（最短剩余时间优先）：由于CPU到达时间和CPU区间大小的差异，长作业可以优先处理，但出现短作业请求的时候，优先处理短作业</p><p>​</p></li></ul></li></ul><ul><li>优先级调度    – fcfs sjf都是特殊的优先级调度</li></ul><blockquote><p>每个进程都有一个优先级与其关联，具有最高优先级的进程会分配到CPU 。具有相同优先级<br>的进程按FCFS 顺序调度。</p></blockquote><ul><li><ul><li><p>同样存在抢占调度的情况</p></li><li><p>问题：存在阻塞或饥饿– 存在进程一直处于等待状态</p></li><li><p>解决方法：老化– 等待时间越长，优先级提高</p><blockquote><p>优先级可通过内部或外部方式来定义。内部定义优先级使用一些测量数据以计算进程<br>优先级。例如，时间极限、内存要求、打开文件的数量和平均I/O 区间与平均CPU 区间之<br>比都可以用于计算优先级。外部优先级是通过操作系统之外的准则来定义的，如进程重要<br>性、用于支付使用计算机的费用类型和数量、赞助工作的单位、其他(通常为政治)因素。</p></blockquote></li><li><p>​</p></li></ul></li><li><p>轮转法调度 – rr ( round robin</p></li><li><ul><li><p>为分时系统而设置的</p></li><li><p>平均等待时间较长，响应时间较长</p></li><li><p>定义较小的时间处理单元，时间片。时间片和周转时间有关，要考虑和上下文切换的时间比例</p></li><li><p>进程存储在一个fifo循环队列中</p><p>​</p></li></ul></li><li><p>多级队列调度</p><blockquote><p>多级队列 调度算法(multilevel queue      scheduling algorithm) 将就绪队列分成多个独立队列(见图5.6) 。根据进程的属性，如内存大小、进程优先级、进程类型，一个进程被<strong>永久</strong>地分配到一个队列。</p></blockquote></li><li><ul><li>根据进程的性质和属性对进程进行分组的方法，给不同的队列设立优先级。比如前台交互进程和后台批处理过程。前台交互进程较高。</li><li>每个队列可以采用不同的调度算法，前台交互需要等待时间较短的调度算法，通常选用rr调度，后台批处理可以选择fcfs,优先级调度算法。</li><li>缺点同样会产生阻塞的情况</li></ul></li><li><blockquote><p>队列之间必须有调度，通常采用固定优先级抢占调度。例如，前台队列可以比<br>后台队列具有绝对的优先级。<br>现在来研究一下具有5 个队列的多级队列调度算法的例子，按优先级来排列:<br>①系统进程。<br>②交互进程。<br>③交互编辑进程。<br>④批处理进程。<br>⑤学生进程。</p></blockquote></li></ul><ul><li>多级反馈队列调度</li></ul><blockquote><p>多级反馈队列调度算法(multilevel feedback queue scheduling algorithm) 允<br>许进程在队列之间移动。主要思想是根据<strong>不同CPU 区间</strong>的特点以区分进程。如果进程使用<br>过多CPU 时间，那么它会被转移到更低优先级队列。这种方案将νo 约束和交互进程留在<br>更高优先级队列。此外，在较低优先级队列中等待时间过长的进程会被转移到更高优先级<br>队列。这种形式的老化阻止饥饿的发生。</p></blockquote><blockquote><p>通常，多级反馈队列调度程序可由下列参数来定义:<br>.队列数量。<br>· 每个队列的调度算法。<br>· 用以确定何时升级到更高优先级队列的方法。<br>. 用以确定何时降级到更低优先级队列的方法。<br>· 用以确定进程在需要服务时应进入哪个队列的方法。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;CPU调度算法&quot;&gt;&lt;a href=&quot;#CPU调度算法&quot; class=&quot;headerlink&quot; title=&quot;CPU调度算法&quot;&gt;&lt;/a&gt;CPU调度算法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;先到先服务 fcfs    – CPU请求次序&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;缺点：F
      
    
    </summary>
    
    
      <category term="操作系统" scheme="https://joshuaqyh.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>知乎问答——如何用互联网思维卖馒头</title>
    <link href="https://joshuaqyh.github.io/2018/07/27/%E7%9F%A5%E4%B9%8E%E9%97%AE%E7%AD%94_%E5%A6%82%E4%BD%95%E7%94%A8%E4%BA%92%E8%81%94%E7%BD%91%E6%80%9D%E7%BB%B4%E4%B9%B0%E9%A6%92%E5%A4%B4/"/>
    <id>https://joshuaqyh.github.io/2018/07/27/知乎问答_如何用互联网思维买馒头/</id>
    <published>2018-07-27T15:28:32.545Z</published>
    <updated>2018-07-27T15:34:08.635Z</updated>
    
    <content type="html"><![CDATA[<h3 id="回答一"><a href="#回答一" class="headerlink" title="回答一"></a>回答一</h3><p><strong>一、规划</strong></p><p>slogan：做中国好馒头、做好中国馒头</p><p>使命：让全中国人重新吃上安心馒头</p><p>愿景：成为世界顶级的馒头品牌</p><p>广告语：这一口，谁不爱</p><p>目标人群：新中产阶级</p><p>新中产消费观的最大特征：相较于价格，他们在意质量，对于高质量的商品和服务，他们愿意为之付出更高的代价。较高的收入与体面的工作给中产带来片刻的欣慰，但不安与焦虑才是中产光鲜外表下最戳心的痛点，消费升级正是他们面对这种焦虑选择的解决方案。</p><p><strong>二、设计</strong></p><p>1.品牌</p><p>品牌要能让人产生联想，要好记，比如：”真馒头”</p><p>2.设计</p><p>包装要讲究，但重点是一定要去德国买一个红点奖。</p><p>每个包装上，还必须有扎心的文案，比如:</p><p>我们拼尽全力，不是为了活成别人想要的模样</p><p>你只来了一下子，却改变了我一辈子</p><p>我有馒头，你有故事吗?</p><p>3.产品</p><p>要秉承匠心精神，只做单一产品–真•葱花馒头，将一款产品做到极致。</p><p>但是可以根据用户人群推出专属款，比如</p><p>有助记忆力的儿童款</p><p>提高睡眠质量的老人款</p><p>4.门店</p><p>不同类型的门店来满足用户多元化的场景需求，包括满足用户线下社交需求的旗舰店，满足亲子活动的DIY体验店，以及快速自提、服务商务人群的快取店，满足客户外送需求的外卖厨房店。通过差异化的门店布局，实现对消费者日常生活全方位覆盖。</p><p>5.定价</p><p>统一价19.9元！！没有足够的利润空间，618、双11、双12你拿什么打折？</p><p><strong>三、营销</strong></p><p>1.讲故事</p><p>馒头的面全部来自北纬36°黄金优麦区种植的8848号小麦，纯手工脱粒。</p><p>蒸馒头的水，选自长白山矿物质水，再经过36道工艺人工萃取。</p><p>创新思维碰撞传统手工技艺，再造中国馒头新未来。</p><p>2.讲情怀</p><p>创始人211名校毕业后，放弃BTA百万年薪自主创业；尝遍了全国各地大街小巷所有的馒头，拜访数十位隐居的大师，经历了同事朋友的嘲讽、女朋友的离等非常人所能经历的磨难后，终于发明了拥有独特、唯一口味的”真馒头”。</p><p>3.软文推广</p><p>《震惊！男人吃了沉默，女人吃了流泪》</p><p>《感动！一个馒头如果没有情怀，那它和面粉有什么区别》</p><p>《刚刚！人人都在疯抢这款馒头》</p><p>…</p><p>4.造气氛</p><p>找很多人来回排队，不用多讲，这是网红店的标配。但是排队的人员组成还是要有讲究的，需要有学生、青年、白领、中年人，而且不能一起到，要分批到。</p><p>5.制造热点事件</p><p>哭诉鹅厂抄袭商业模式</p><p>喊话某互联网大佬，打赌3年后比营业额</p><p>6.社会化传播</p><p>赞助绝地求生，新增能量馒头，吃一个血条全满！</p><p>雇人拿着馒头去starbuck、costa，让咖啡、苹果笔记本、馒头成为新一代的装B三件套。</p><p>抢在韩国人前为馒头申遗！</p><p>7.微微一抖</p><p>微博：每天去抢杜蕾斯、回忆专用小马甲的沙发，设置转发有奖活动；</p><p>微信公众号：每天深夜10点，推送一条荷尔蒙满满的语音鸡汤，一定要煽情！</p><p>抖音：做一个卡通吉祥物，天天耍贱，卖萌，用户爱看什么拍什么。</p><p>8.饥饿营销</p><p>每家门店每天限量8888个，卖完即止。第二天的馒头需要提前预约。</p><p>9.裂变营销</p><p>给好友免费送馒头，他吃你也吃。</p><p>10.社群运营</p><p>建立真馒头的粉丝群，收集种子用户的建议反馈，经常与粉丝互动。邀请5个人进群可免费领取一个馒头，群成员可享受新品内测试吃福利。</p><p>11.APP运营</p><p>开启步数兑换优惠券功能，倡导绿色出行；</p><p>消费有积分，积分可以浇水种小麦，小麦长成后可以直接磨成面，寄给用户。</p><p>增加交友功能，注册必须上传吃馒头的自拍照，可以查看5公里内异性用户的照片，但是必须相互点赞，才能加好友聊天。</p><p>12.会员体系</p><p>充值5000黄金会员，享8折优惠；充值10000白金会员，全部5折，生日赠送定制版馒头。</p><p>13.配送模式</p><p>可以在APP或公众号上自助完成下单，下单时可以选择温度、辣度等，制作好了系统会发提示，凭二维码领取，节约排队时间；如果选择外送，在已经开通的外送区域15分钟左右送到，超过30分钟免费。</p><p><strong>四、实现盈利</strong></p><p>炒作互联网新零售+馒头的成功之道，然后花钱发一堆新闻通稿，进行大量商业路演，约见各类ＶＰ，重点来了：</p><p>想要快速套现的可以选择阿里的投资，2年内一定会被全资收购；</p><p>想要上市的优选搜狐的投资，直接搭建境外架构，3年后妥妥纳斯达克敲钟。</p><p>最后你们一定会问，你谁啊，靠不靠谱啊？</p><p>“<strong>我，秦始皇，打钱！</strong>”</p><h3 id="回答二"><a href="#回答二" class="headerlink" title="回答二"></a>回答二</h3><p><strong>一、规划</strong></p><p>slogan：做中国好馒头、做好中国馒头</p><p>使命：让全中国人重新吃上安心馒头</p><p>愿景：成为世界顶级的馒头品牌</p><p>广告语：这一口，谁不爱</p><p>目标人群：新中产阶级</p><p>新中产消费观的最大特征：相较于价格，他们在意质量，对于高质量的商品和服务，他们愿意为之付出更高的代价。较高的收入与体面的工作给中产带来片刻的欣慰，但不安与焦虑才是中产光鲜外表下最戳心的痛点，消费升级正是他们面对这种焦虑选择的解决方案。</p><p><strong>二、设计</strong></p><p>1.品牌</p><p>品牌要能让人产生联想，要好记，比如：”真馒头”</p><p>2.设计</p><p>包装要讲究，但重点是一定要去德国买一个红点奖。</p><p>每个包装上，还必须有扎心的文案，比如:</p><p>我们拼尽全力，不是为了活成别人想要的模样</p><p>你只来了一下子，却改变了我一辈子</p><p>我有馒头，你有故事吗?</p><p>3.产品</p><p>要秉承匠心精神，只做单一产品–真•葱花馒头，将一款产品做到极致。</p><p>但是可以根据用户人群推出专属款，比如</p><p>有助记忆力的儿童款</p><p>提高睡眠质量的老人款</p><p>4.门店</p><p>不同类型的门店来满足用户多元化的场景需求，包括满足用户线下社交需求的旗舰店，满足亲子活动的DIY体验店，以及快速自提、服务商务人群的快取店，满足客户外送需求的外卖厨房店。通过差异化的门店布局，实现对消费者日常生活全方位覆盖。</p><p>5.定价</p><p>统一价19.9元！！没有足够的利润空间，618、双11、双12你拿什么打折？</p><p><strong>三、营销</strong></p><p>1.讲故事</p><p>馒头的面全部来自北纬36°黄金优麦区种植的8848号小麦，纯手工脱粒。</p><p>蒸馒头的水，选自长白山矿物质水，再经过36道工艺人工萃取。</p><p>创新思维碰撞传统手工技艺，再造中国馒头新未来。</p><p>2.讲情怀</p><p>创始人211名校毕业后，放弃BTA百万年薪自主创业；尝遍了全国各地大街小巷所有的馒头，拜访数十位隐居的大师，经历了同事朋友的嘲讽、女朋友的离等非常人所能经历的磨难后，终于发明了拥有独特、唯一口味的”真馒头”。</p><p>3.软文推广</p><p>《震惊！男人吃了沉默，女人吃了流泪》</p><p>《感动！一个馒头如果没有情怀，那它和面粉有什么区别》</p><p>《刚刚！人人都在疯抢这款馒头》</p><p>…</p><p>4.造气氛</p><p>找很多人来回排队，不用多讲，这是网红店的标配。但是排队的人员组成还是要有讲究的，需要有学生、青年、白领、中年人，而且不能一起到，要分批到。</p><p>5.制造热点事件</p><p>哭诉鹅厂抄袭商业模式</p><p>喊话某互联网大佬，打赌3年后比营业额</p><p>6.社会化传播</p><p>赞助绝地求生，新增能量馒头，吃一个血条全满！</p><p>雇人拿着馒头去starbuck、costa，让咖啡、苹果笔记本、馒头成为新一代的装B三件套。</p><p>抢在韩国人前为馒头申遗！</p><p>7.微微一抖</p><p>微博：每天去抢杜蕾斯、回忆专用小马甲的沙发，设置转发有奖活动；</p><p>微信公众号：每天深夜10点，推送一条荷尔蒙满满的语音鸡汤，一定要煽情！</p><p>抖音：做一个卡通吉祥物，天天耍贱，卖萌，用户爱看什么拍什么。</p><p>8.饥饿营销</p><p>每家门店每天限量8888个，卖完即止。第二天的馒头需要提前预约。</p><p>9.裂变营销</p><p>给好友免费送馒头，他吃你也吃。</p><p>10.社群运营</p><p>建立真馒头的粉丝群，收集种子用户的建议反馈，经常与粉丝互动。邀请5个人进群可免费领取一个馒头，群成员可享受新品内测试吃福利。</p><p>11.APP运营</p><p>开启步数兑换优惠券功能，倡导绿色出行；</p><p>消费有积分，积分可以浇水种小麦，小麦长成后可以直接磨成面，寄给用户。</p><p>增加交友功能，注册必须上传吃馒头的自拍照，可以查看5公里内异性用户的照片，但是必须相互点赞，才能加好友聊天。</p><p>12.会员体系</p><p>充值5000黄金会员，享8折优惠；充值10000白金会员，全部5折，生日赠送定制版馒头。</p><p>13.配送模式</p><p>可以在APP或公众号上自助完成下单，下单时可以选择温度、辣度等，制作好了系统会发提示，凭二维码领取，节约排队时间；如果选择外送，在已经开通的外送区域15分钟左右送到，超过30分钟免费。</p><p><strong>四、实现盈利</strong></p><p>炒作互联网新零售+馒头的成功之道，然后花钱发一堆新闻通稿，进行大量商业路演，约见各类ＶＰ，重点来了：</p><p>想要快速套现的可以选择阿里的投资，2年内一定会被全资收购；</p><p>想要上市的优选搜狐的投资，直接搭建境外架构，3年后妥妥纳斯达克敲钟。</p><p>最后你们一定会问，你谁啊，靠不靠谱啊？</p><p>“<strong>我，秦始皇，打钱！</strong>”</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;回答一&quot;&gt;&lt;a href=&quot;#回答一&quot; class=&quot;headerlink&quot; title=&quot;回答一&quot;&gt;&lt;/a&gt;回答一&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;一、规划&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;slogan：做中国好馒头、做好中国馒头&lt;/p&gt;
&lt;p&gt;使命：让全中国人重
      
    
    </summary>
    
    
      <category term="互联网思维" scheme="https://joshuaqyh.github.io/tags/%E4%BA%92%E8%81%94%E7%BD%91%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
</feed>
